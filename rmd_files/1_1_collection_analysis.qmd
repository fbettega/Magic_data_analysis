---
title: "Collection Tracker"
---

```{r setup, include=FALSE, message = FALSE, warning = FALSE} 
library(tidyverse)
source("../sources/MTG_function_base_FB/global_mtg_sources.R")
source("../sources/S2_Source_mtg_new_card.R",local = TRUE)
options(DT.warn.size = FALSE)
conflicted::conflicts_prefer(dplyr::filter)
params <- read_rds( "../data/intermediate_result/temp_format_encours_for_param.rds")
```


```{r data_reading }
exclude_archetype <- c(
   # "Nadu"
  )

df_export <-  readRDS(paste0("../data/",params$format_param,"_data_meta_en_cours.rds")) %>%
      # include filter bad deck
  filter(Valide_deck) %>% 
  mutate(
    Deck_winrate = Wins / (Losses + Wins)
  ) %>%
  group_by(Archetype) %>% 
  mutate(
    Archetype_count = n()
  ) %>% 
    ungroup() %>% 
  filter(Archetype %notin% exclude_archetype) 

modern_DB_card <- read_csv("../data/mtg_data/DBcarte_oracle.csv") %>% 
filter(
    !!sym(paste0("legalities.",tolower(params$format_param))) == "legal" |
        !!sym(paste0("legalities.",tolower(params$format_param))) ==  "restricted"
)
 

path_collection <- 
  list.files(
      path = "../data/mtg_data/",pattern = "^archidekt-collection-export-",
               full.names = TRUE
      )
```


```{r}
knitr::opts_chunk$set(
  eval = length(path_collection) > 0
)
```



```{r}
basic_land_list <- c(
  "Swamp", "Mountain", "Plains", "Island", "Forest","Wastes"
  )

Deck_list_cards_count <-
  rbind(df_export %>%
  unnest_longer(Mainboard) %>%
  unnest_wider(Mainboard, names_sep = "_")  %>%
  select(Mainboard_Count,Mainboard_CardName,Archetype,Base_Archetype,id) %>%
  rename(Count = 1 , CardName = 2)   %>%
  mutate(main_side = "Main"),
  df_export %>%
  unnest_longer(Sideboard) %>%
  unnest_wider(Sideboard, names_sep = "_") %>%
  select(Sideboard_Count,Sideboard_CardName,Archetype,Base_Archetype,id) %>%
  rename(Count = 1 , CardName = 2) %>%
  mutate(main_side = "Side")
  ) %>% 
  group_by(
    id,
    CardName,
    Archetype,
    Base_Archetype
    ) %>% 
  summarise(Count = sum(Count),.groups = "drop") %>% 
  filter(
    !(CardName %in% c(
    basic_land_list,
    paste0(
      "Snow-Covered ",basic_land_list
      )  
    )   
    )  
    ) %>% 
  rownames_to_column("cards_id_temp")


collection_archi <- 
  read.csv(
    path_collection
    ) %>% 
  # TEmp
  # filter(!str_detect(Tags, "Sealable|Commande_en_cours")) %>% 
  group_by(Name) %>% 
  summarise(Quantity = sum(Quantity)) %>% 
  rownames_to_column("collect_id")






initial_match <-  Deck_list_cards_count %>% 
  inner_join(
    collection_archi,
    by = c("CardName" = "Name")
    ) 

match_double_face <-  Deck_list_cards_count %>% 
  filter(cards_id_temp %notin% initial_match$cards_id_temp) %>% 
    inner_join(
      collection_archi %>% 
        filter(collect_id %notin% initial_match$collect_id) %>% 
        mutate(
          Name = str_remove(Name,"\\s+//.*$")
          ),
    by = c("CardName" = "Name")
    )


match_deck_and_collection <- rbind(
  initial_match,
  match_double_face,
  Deck_list_cards_count %>%
    filter(cards_id_temp %notin% c(
      match_double_face$cards_id_temp,
      initial_match$cards_id_temp)
      ) %>%
    mutate(
      Quantity = 0,
      collect_id = NA
           )
  ) %>% 
  select(-c(cards_id_temp,collect_id))



```



```{r}
not_owned_cards <- 
  match_deck_and_collection %>% 
  mutate(
    Quantity = ifelse(is.na(Quantity),0,Quantity),
    missing = Count - Quantity
  ) %>% 
  group_by(Archetype) %>% 
  mutate(
    Archetype_count = n_distinct(id)
  ) %>% 
  ungroup() %>% 
  group_by(Base_Archetype) %>% 
  mutate(
    Base_Archetype_count = n_distinct(id)
  ) %>% 
  ungroup() %>% 
  filter(missing > 0) %>% 
  group_by(id) %>% 
   mutate(
     Number_of_card_missing_in_deck = sum(missing),
     Number_of_distinct_card_missing_in_deck = n()
  ) %>% 
  ungroup() %>% 
  mutate(
    Quantity = paste0(Quantity,"/",Count)
  ) %>% 
  select(-Count) %>% 
  group_by(CardName,Quantity,Archetype) %>% 
  mutate(n_quant_arch = n()) %>% 
  ungroup() %>% 
  group_by(CardName,Quantity,Base_Archetype) %>% 
  mutate(n_quant_base_arch = n()) %>% 
  ungroup() #%>% 
```


# Boosters Tables
```{r}
Total_scryfall_table <-  read_csv("../data/mtg_data/DBcarte.csv") %>% 
filter(
    !!sym(paste0("legalities.",tolower(params$format_param))) == "legal" |
        !!sym(paste0("legalities.",tolower(params$format_param))) ==  "restricted"
    ) %>% 
  filter(booster) %>%
  filter(digital == FALSE) %>%  # Exclure les cartes exclusivement num√©riques
  filter(!set_type %in% c("alchemy", "arena", "mtgo"))


Missing_cards_by_set <- not_owned_cards %>% 
  group_by(CardName) %>% 
  summarise(
    n = n(),
    .groups = "drop"
    ) %>% 
  left_join(
     join_with_scryfall(
    Df_with_cardname =   .,
    cardname_col = "CardName" ,
    scry_fall_df = Total_scryfall_table
    ),
    by = c("CardName" = "CardName")
    ) %>%
  left_join(
    Total_scryfall_table %>% 
      select(id,rarity,set,set_name,set_id),
    by = join_by(
      scry_fall_id == id
      )
    ) %>% 
  distinct(CardName,rarity,set_name,.keep_all = TRUE) %>% 
  group_by(rarity,set_name) %>% 
  summarise(
    n_distinct = n_distinct(CardName),
    number_of_deck = sum(n),
    .groups = "drop"
  ) %>%
  filter(!is.na(rarity)) %>% 
  mutate(
    rarity = factor(
      rarity,
      levels = c("common", "uncommon","rare","mythic","special")),
    set_name = as.factor(set_name)
  ) %>% 
  arrange(rarity) %>% 
  pivot_wider(
    names_from = rarity,
    values_from = c(n_distinct, number_of_deck),
    values_fill = 0
  )
```


```{r create_table_missing_cards_by_set_and_rarity}
Missing_cards_by_set_rarity_with_card_name <- not_owned_cards %>% 
  group_by(CardName) %>% 
  summarise(
    n = n(),
    .groups = "drop"
    ) %>% 
  left_join(
     join_with_scryfall(
    Df_with_cardname =   .,
    cardname_col = "CardName" ,
    scry_fall_df = Total_scryfall_table
    ),
    by = c("CardName" = "CardName")
    ) %>%
  left_join(
    Total_scryfall_table %>% 
      select(id,rarity,set,set_name,set_id,scryfall_uri),
    by = join_by(
      scry_fall_id == id
      )
    ) %>% 
  distinct(CardName,rarity,set_name,.keep_all = TRUE) %>% 
  select(-starts_with("colors.")) %>%  
add_link_to_a_column(
  df_add_link_fun =   .,
  column_where_is_add = "link", #"link",
  link_column = "scryfall_uri"
) %>% 
  select(-c(scry_fall_id,set_name,set_id)) %>% 
  mutate(across(where(is.character),as.factor))  %>% 
  relocate(n,.after = last_col()) %>% 
  arrange(desc(n))
```



```{r tooltip_booster}
tooltip_booster_distinct <- c(
  "Set name",
  "Number of distinct common",
  "Number of distinct uncommon",
  "Number of distinct rare",
  "Number of distinct mythic",
  "Number of distinct special"
  
)

tooltip_booster_total_deck <- c(
  "Set name",
  "Number of deck with common",
  "Number of deck with uncommon",
  "Number of deck with rare",
  "Number of deck with mythic",
  "Number of deck with special"
  
)

tooltip_missing_cards_by_rarity_and_set <- c(
  "Cards names",
  "Rarity of cards",
  "Set name",
  "Number of time missing in format"
)
```


::: {.panel-tabset .nav-pills}

## Distinct cards in set  

```{r}
distinct_Missing_cards_by_set <- Missing_cards_by_set %>% 
  select(set_name,starts_with("n_distinct_")) %>% 
  rename_all(~str_remove(.,"n_distinct_")) %>% 
  arrange(desc(common))


htmltools::tagList(
      DT::datatable( 
        distinct_Missing_cards_by_set,
        colnames = str_replace_all(colnames(distinct_Missing_cards_by_set), "_", " "),
          callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltip_booster_distinct, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
"),
      return_filter_js()
    ),
  filter = "top", rownames = FALSE,
  options = list(dom = "ltipr", autoWidth = TRUE, pageLength = 25)
) 
)
```


## Total number of deck with missing  


```{r}
Total_Missing_cards_by_set <- Missing_cards_by_set %>% 
  select(set_name,starts_with("number_of_deck_")) %>% 
  rename_all(~str_remove(.,"number_of_deck_")) %>% 
  arrange(desc(common))


htmltools::tagList(
      DT::datatable( 
        Total_Missing_cards_by_set,
        colnames = str_replace_all(colnames(Total_Missing_cards_by_set), "_", " "),
          callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltip_booster_total_deck, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
"),
      return_filter_js()
    ),
  filter = "top", rownames = FALSE,
  options = list(dom = "ltipr", autoWidth = TRUE, pageLength = 25)
) 
)
```

## Missing cards by set and rarity

```{r print_missing_cards_by_set_and_rarity}
htmltools::tagList(
      DT::datatable( 
        Missing_cards_by_set_rarity_with_card_name,
        colnames = str_replace_all(colnames(Missing_cards_by_set_rarity_with_card_name), "_", " "),
          callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltip_missing_cards_by_rarity_and_set, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
"),
      return_filter_js()
    ),
  filter = "top", rownames = FALSE,escape = FALSE,
  options = list(dom = "ltipr", autoWidth = TRUE, pageLength = 25)
) 
)
```

:::



# Number of missing cards by archetype 


<!-- Exclude Archetype : `r paste0(exclude_archetype,collapse = " ,")` -->



```{r}
Summary_missing_cards_by_archetype <-
  df_export %>%
  distinct(Archetype) %>%
  right_join(
    not_owned_cards %>%
      group_by(Archetype) %>%
      mutate(
        number_of_deck_with_missing = n_distinct(id),
        Number_of_card_missing_in_deck = 
          value_to_string_with_mean_min_max(Number_of_card_missing_in_deck),
        Number_of_distinct_card_missing_in_deck = 
          value_to_string_with_mean_min_max(Number_of_distinct_card_missing_in_deck)
      ) %>%
      group_by(
        Archetype, CardName, 
        number_of_deck_with_missing,
        Number_of_card_missing_in_deck,
        Number_of_distinct_card_missing_in_deck
      ) %>%
      summarise(
        Number_of_missing = max(missing),
        Archetype_count = unique(Archetype_count),
        .groups = "drop"
      ) %>%
      group_by(Archetype) %>%
      mutate(
        Number_of_missing = sum(Number_of_missing)
      ) %>%
      ungroup() %>%
      distinct(
        Archetype,
        Number_of_missing,
        Archetype_count,
        number_of_deck_with_missing,
        Number_of_card_missing_in_deck,
        Number_of_distinct_card_missing_in_deck
      ),
    by = "Archetype"
  ) %>%
  arrange(
    desc(Archetype_count)
    ) %>%
  mutate(
    Number_of_missing = if_else(
      is.na(Number_of_missing), 0,
      Number_of_missing
    ),
    number_of_deck_with_missing = if_else(
      is.na(number_of_deck_with_missing), 0,
      number_of_deck_with_missing
    ),
    number_of_deck_without_missing = Archetype_count - number_of_deck_with_missing,
    Archetype = as.factor(
      # paste0(
      Archetype
      # , " : ", Archetype_count)
      ),
    number_of_deck_with_missing = number_of_deck_with_missing,
    Percent_of_deck_with_missing_cards = number_of_deck_with_missing / Archetype_count
  ) %>% 
  relocate(Archetype_count,.after = Archetype) %>% 
  rename(n = Archetype_count) 




```

```{r tooltip_aggregate_archetype_missing}
tooltip_aggregate_archetype_missing <- c(
  "Deck Archetype agregated",
  "Number of deck",
  "Number of cards missing (4 copy count for 4)",
  "Number of deck with atleast one missing",
  "Average number of missing cards [minimum ; maximum]",
  "Average number of distinct missing cards [minimum ; maximum]",
   "Number of deck with no missing",
  "Percent of deck with atleast one missing in archetype"
)
```


```{r}
 # print(
      htmltools::tagList(
      DT::datatable( 
        Summary_missing_cards_by_archetype %>% 
          mutate(
            Archetype =as.factor(Archetype)
                 ),
        colnames = str_replace_all(colnames(Summary_missing_cards_by_archetype), "_", " "),
          callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltip_aggregate_archetype_missing, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
"),
      return_filter_js()
    ),
  filter = "top", rownames = FALSE,
  options = list(dom = "ltipr",    searchCols = list(
    NULL,list(search = '10 ...'),
    NULL,NULL,
    NULL,NULL,
    NULL,NULL
  ),
  autoWidth = TRUE, pageLength = 25)
) %>% 
  DT::formatPercentage(
    c("Percent_of_deck_with_missing_cards"),
    digits = 2
    )
)
     # )
```

# Number of missing cards aggregate

```{r}
Summary_missing_cards_aggregate <-
  rbind(
    not_owned_cards %>%
      group_by(CardName,Quantity) %>%
      summarise(
        Max_Number_of_missing = max(missing),
        Q1_med_Q3_of_missing = median_quantile_paste(missing),
        Number_of_deck_with_missing_cards = n_distinct(id),
        .groups = "drop"
      ) ,
    not_owned_cards %>%
      group_by(CardName) %>%
      summarise(
        Quantity = "Any",
        Max_Number_of_missing = max(missing),
        Q1_med_Q3_of_missing = median_quantile_paste(missing),
        Number_of_deck_with_missing_cards = n_distinct(id),
        .groups = "drop"
      )
    ) %>% 
    mutate(percent_of_deck_with_missing = 
           Number_of_deck_with_missing_cards / n_distinct(df_export$id) 
           ) %>% 
    mutate(across(where(is.character),as.factor)) %>% 
  arrange(
    desc(Number_of_deck_with_missing_cards 
         )
    )
```

```{r tooltip_aggregate_cards_missing}
tooltip_aggregate_cards_missing <- c(
    "Link to scry fall",
  "Card name",
  "Number of copies of the card",
  "Max number of copies missing",
  "Median number of missing cards [first quartile ; third quartile]",
  "Number of deck with this card missing",
  "Percent of deck with this card missing",
  "Card Color"
)
```




```{r, results='asis'}
# print(

htmltools::tagList(
      DT::datatable( 
        Summary_missing_cards_aggregate %>% 
  left_join(
     join_with_scryfall(
    Df_with_cardname =   .,
    cardname_col = "CardName" ,
    scry_fall_df = modern_DB_card
),
by = c("CardName" = "CardName")
  ) %>%
  left_join(
    modern_DB_card %>% 
      select(id,scryfall_uri,starts_with("colors.")),
    by = join_by(
      scry_fall_id == id
    )
  ) %>%
  mutate(
    colors = as.factor(pmap_chr(
      list(colors.1, colors.2, colors.3, colors.4, colors.5),
      ~ paste0(na.omit(c(...)), collapse = "")
    )),
    CardName = as.factor(CardName)
  ) %>% 
  select(-starts_with("colors.")) %>%  
add_link_to_a_column(
  df_add_link_fun =   .,
  column_where_is_add = "link", #"link",
  link_column = "scryfall_uri"
) %>%
  select(-scry_fall_id),
        colnames = str_replace_all(
          c(
            "link",
            colnames(Summary_missing_cards_aggregate),
             "colors"
            ), "_", " "),
  callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltip_aggregate_cards_missing, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
"),
      return_filter_js()
    ),
  filter = "top",
  rownames = FALSE,
  options = list(
  dom = "ltipr",
    searchCols = list(
    NULL,NULL,
    list(search = '["Any"]' ),
    NULL,NULL,
    list(search = '10 ...'),
    NULL
  ),
  autoWidth = TRUE,
  pageLength = 25),
escape = FALSE
  )  %>% 
  DT::formatPercentage(c("percent_of_deck_with_missing"),digits = 1)
  )
     # )
```


#  Archetype 


```{r}
Archetype_list <- df_export %>%
  filter(Archetype_count > 20) %>% 
  # arrange(desc(Archetype_count)) %>% 
  pull(Archetype) %>%
  unique() %>% 
  sort()

not_own_car_by_archetype_without_any <- not_owned_cards %>%
  select(
    -c(
      id,Base_Archetype,
      Base_Archetype_count,n_quant_base_arch
      )
    ) %>% 
  distinct(
    Archetype,
    CardName,
    Quantity,
    .keep_all = TRUE
    ) %>%
    group_by(Archetype,CardName) %>% 
    mutate(max_missing_quantity = max(missing)) %>% 
    ungroup() %>% 
  mutate(
    Archetype_count = 
      n_quant_arch/Archetype_count
  ) %>% 
  distinct() %>% 
    ungroup() %>% 
  select(-missing) %>% 
    mutate(across(where(is.character),as.factor))

not_own_car_by_archetype <- 
  rbind(
  not_own_car_by_archetype_without_any %>% 
  group_by(Archetype,CardName) %>% 
  summarise(
    Quantity = "Any",
    Archetype_count = sum(Archetype_count),
    n_quant_arch = sum(n_quant_arch),
    max_missing_quantity = unique(max_missing_quantity),
    .groups = "drop"
  ),
  not_own_car_by_archetype_without_any %>% 
    select(
      -c(
        Number_of_card_missing_in_deck,
        Number_of_distinct_card_missing_in_deck
        )
      )
  ) %>% 
  rename(Number_of_time_missing = n_quant_arch) %>% 
  mutate(Quantity = as.factor(Quantity))

```



```{r tooltip_Archetype_cards_missing}
tooltip_Archetype_cards_missing <- c(
  "Link to scry fall",
  "Card name",
  "Number of copies of the card",
  "Percent of deck in the archetype with missing cards",
  "Number of deck with this card missing",
  "Max number of copy of the card missing in the archetype",
  "Card Color"
)
```


```{r, results='asis'}
for (i in Archetype_list) {
  # Inserts Month titles
  # Section contents
  pander::pandoc.header(i, level = 2)
  pander::pandoc.p("")
  pander::pandoc.p("")
  pander::pandoc.p(
    paste0("Number of deck : ",not_owned_cards %>%
  filter(Archetype == i) %>% 
    pull(Archetype_count) %>% 
    unique())
  )
  pander::pandoc.p("")
  pander::pandoc.p("")
  if (i %in% not_owned_cards$Archetype) {
    print(
      htmltools::tagList(
      DT::datatable(
  not_own_car_by_archetype %>%
  filter(Archetype == i) %>% 
    select(-Archetype) %>% 
  left_join(
     join_with_scryfall(
    Df_with_cardname =   .,
    cardname_col = "CardName" ,
    scry_fall_df = modern_DB_card
),
by = c("CardName" = "CardName")
  ) %>%
  left_join(
    modern_DB_card %>% 
      select(id,scryfall_uri,starts_with("colors.")),
    by = join_by(
      scry_fall_id == id
    )
  ) %>%
  mutate(
    colors = as.factor(pmap_chr(
      list(colors.1, colors.2, colors.3, colors.4, colors.5),
      ~ paste0(na.omit(c(...)), collapse = "")
    )),
    CardName = as.factor(CardName)
  ) %>% 
  select(-starts_with("colors.")) %>% 
add_link_to_a_column(
  df_add_link_fun =   .,
  column_where_is_add = "link", #"link",
  link_column = "scryfall_uri"
) %>%
  select(-scry_fall_id) %>% 
    mutate(across(where(is.factor),as.factor)) %>% 
    arrange(desc(Number_of_time_missing)),
   colnames = str_replace_all(c("link",
                                colnames(
     not_own_car_by_archetype %>% 
       select(-Archetype)
     ),
             "colors"), "_", " "),
  callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltip_Archetype_cards_missing, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
"),
      return_filter_js()
    ),
  filter = "top",
rownames = FALSE,
  # extensions = c("SearchBuilder", "DateTime"),
  options = list(
    dom = "ltipr", 
  # searchBuilder = TRUE,
     searchCols = list(
    NULL,NULL,
    list(search = '["Any"]' ),
    NULL,
    list(search = '10 ...'),
    NULL
  ),
    autoWidth = TRUE, 
    pageLength = 25
    ),escape = FALSE
) %>% 
  DT::formatPercentage(c("Archetype_count"),digits = 1)
)
    )
    pander::pandoc.p("")
    pander::pandoc.p("")
  } 
  # else {
  #   pander::pandoc.p("No cards missing")
  # }
  pander::pandoc.p("")
  pander::pandoc.p("")

}
```


# Base Archetype

```{r}
base_archetype_not_owned_without_any <-   
  not_owned_cards %>%
  select(-c(id,Archetype,Archetype_count,n_quant_arch)) %>% 
    group_by(Base_Archetype,CardName) %>% 
    mutate(max_missing_quantity = max(missing)) %>% 
    ungroup() %>% 
  group_by(
    Base_Archetype,
    CardName,
    Quantity
    ) %>% 
  mutate(
    # n_quant_base_arch = sum(n_quant_base_arch),
    Base_Archetype_count = #paste0(
      n_quant_base_arch/Base_Archetype_count
     # "(",Base_Archetype_count,")")
  ) %>% 
  distinct() %>% 
    ungroup()  

 
base_archetype_not_owned <- rbind(
  base_archetype_not_owned_without_any,
not_owned_cards %>%
  select(-c(id,Archetype,Archetype_count,n_quant_arch)) %>% 
    group_by(Base_Archetype,CardName) %>% 
    mutate(max_missing_quantity = max(missing)) %>% 
    ungroup() %>% 
    mutate(Quantity = "Any") %>% 
  group_by(
    Base_Archetype,
    CardName,
    Quantity
    ) %>% 
  distinct(
    CardName,	Base_Archetype,	Quantity,	
    Base_Archetype_count,	n_quant_base_arch,
    max_missing_quantity,.keep_all = TRUE
  ) %>% 
  mutate(
    n_quant_base_arch = sum(n_quant_base_arch),
    # missing = max(missing),
    Base_Archetype_count = #paste0(
      n_quant_base_arch/Base_Archetype_count
     # "(",Base_Archetype_count,")")
  ) %>% 
  distinct(
    CardName,	Base_Archetype,	Quantity,	
    Base_Archetype_count,	n_quant_base_arch,
    max_missing_quantity,.keep_all = TRUE
  ) %>% 
    ungroup() 
 ) %>% 
  select(
    -c(
      missing,
      Number_of_card_missing_in_deck,
      Number_of_distinct_card_missing_in_deck
      )
    )  %>% 
    mutate(across(where(is.character),as.factor)) %>%
    arrange(desc(n_quant_base_arch))

```


```{r tooltip_base_Archetype_cards_missing}
tooltip_base_Archetype_cards_missing <- c(
  "Link to scry fall",
  "Card name",
  "Base archetype name",
  "Number of copies of the card",
  "Percent of deck in the base archetype with missing cards",
  "Number of deck with this card missing",
  "Max number of copy of the card missing in the archetype",
  "Card Color"
)
```

```{r}
 # print(
htmltools::tagList(
      DT::datatable(
        base_archetype_not_owned  %>% 
  left_join(
     join_with_scryfall(
    Df_with_cardname =   .,
    cardname_col = "CardName" ,
    scry_fall_df = modern_DB_card
),
by = c("CardName" = "CardName")
  ) %>%
  left_join(
    modern_DB_card %>% 
      select(id,scryfall_uri,starts_with("colors.")),
    by = join_by(
      scry_fall_id == id
    )
  ) %>%
  mutate(
    colors = as.factor(pmap_chr(
      list(colors.1, colors.2, colors.3, colors.4, colors.5),
      ~ paste0(na.omit(c(...)), collapse = "")
    )),
    CardName = as.factor(CardName)
  ) %>% 
  select(-starts_with("colors.")) %>% 
add_link_to_a_column(
  df_add_link_fun =   .,
  column_where_is_add = "link", #"link",
  link_column = "scryfall_uri"
) %>%
  select(-scry_fall_id),
  colnames = str_replace_all(c("link",colnames(
     base_archetype_not_owned),
             "colors"), "_", " "),
  callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltip_base_Archetype_cards_missing, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
"),
      return_filter_js()
    ),
  filter = "top",
rownames = FALSE,
  # extensions = c("SearchBuilder", "DateTime"),
  options = list(
    dom = "ltipr", 
  searchBuilder = TRUE,
     searchCols = list(
    NULL,NULL,NULL,
    list(search = '["Any"]' ),
    NULL, 
    list(search = '10 ...'),
    NULL
  ),
    autoWidth = TRUE, 
    pageLength = 25
    ),
escape = FALSE
) %>% 
  DT::formatPercentage(c("Base_Archetype_count"),digits = 1)
)
    # )

```




