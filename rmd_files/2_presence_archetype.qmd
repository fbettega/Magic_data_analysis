---
title: "Presence"
---


```{r setup, include=FALSE, message = FALSE, warning = FALSE} 
library("rjson")
library(lubridate)
library(kableExtra)
library(tidyverse)
library(plotly)
# devtools::install_github("hoesler/rwantshue")
library("rwantshue")
library(htmltools)
conflicted::conflicts_prefer(purrr::discard)
# css: TOC.css
source("../sources/S2_Source_mtg_new_card.R",local = TRUE)
params <- read_rds( "../data/intermediate_result/temp_format_encours_for_param.rds")

loaded_base_data <- readRDS(paste0("../data/",params$format_param,"_data_meta_en_cours.rds"))
# Réfléchir pour les couleurs et meilleurs distances
# Manque ajouter du texte après les % pour la variation
conflicted::conflicts_prefer(dplyr::filter)
```


```{r}
knitr::read_chunk("../sources/S1_introduction_text.R")
```


```{r, Introduction_chunk_2_Deck_analysis, results='asis'}

```




```{r}
# Generate different color scheme for close archetype
scheme <- iwanthue(seed = 42, force_init = TRUE) # recreate with a seed

Presence_df_base_no_filter <- loaded_base_data %>%
  filter(Tournament != paste0(params$format_param," League")) %>%
  group_by(Archetype) %>%
  mutate(
    Archetype_count = n()
  ) %>%
  ungroup() %>% 
  group_by(Base_Archetype) %>%
  mutate(
    Base_Archetype_count = n()
  ) %>%
  ungroup() %>%
  arrange(Archetype_count)


filter_archetype_count <- min(50, 
 sum(
      Presence_df_base_no_filter %>% 
       distinct(Archetype,.keep_all = TRUE) %>%
       pull(Archetype_count)
     )/100 )

Presence_df_base <- Presence_df_base_no_filter %>%  
  ungroup() %>% 
  mutate(Archetype = if_else(
    Archetype_count > filter_archetype_count,
                             Archetype,"other")
    ) %>%  
  group_by(Archetype) %>%
  mutate(
    Archetype_count = n()
  ) %>%
  ungroup() %>% 
  mutate(
    Global_winrate =
      winrate_1_data(
        sum(Wins,na.rm = TRUE),
        sum(Losses,na.rm = TRUE)
        )
    )

```



```{r presence_df_over_time}
Presence_df_base_all_data <- Presence_df_base %>%
  mutate(
    Archetype =
      factor(Archetype,
        level = unique(.$Archetype)
      ),
    Rank = as.numeric(
      factor(Archetype,
        level = rev(unique(.$Archetype))
      )
    ),
    Base_Archetype =

      factor(Base_Archetype,
        level = unique(.$Base_Archetype)
      ),
    # A reflechir ou tu mets ça selon les filters
    Archetype_percent = Archetype_count / nrow(.)
  )

# Plot color scales
colors_scales_presence <- scheme$hex(
  length(levels(Presence_df_base_all_data$Base_Archetype))
)


one_week_inline <- Presence_df_base_all_data %>%
  filter(
    Week > (max(Week) - 2)
  )

two_week_inline <- Presence_df_base_all_data %>%
  filter(
    Week > (max(Week) - 3)
  )


one_month_inline <- Presence_df_base_all_data %>%
  filter(
    Week > (max(Week) - 5)
  )
```

```{r}
spaghetti_plot_df <- Presence_df_base %>%
  arrange(desc(Archetype_count)) %>%
  mutate(
    Archetype =
      factor(Archetype,
        level = unique(.$Archetype)
      ),
    Base_Archetype =
      factor(str_remove(Base_Archetype, " _fallback"),
        level = unique(str_remove(.$Base_Archetype, " _fallback"))
      )
  ) %>%
  select(Date,Week, Meta, Archetype, Base_Archetype) %>%
  # add_count(Week,Archetype,
  #           name = "Count_arch") %>%
  group_by(Week, Archetype) %>%
  mutate(Count_arch = n()) %>%
  ungroup() %>%
  group_by(Week) %>%
  mutate(Week_deck_number = n()) %>%
  ungroup() %>%
  mutate(Archetype_percent = (Count_arch / Week_deck_number)) %>%
  # add_count(Week,Base_Archetype,
  #           name = "Count_base_arch") %>%
  group_by(Week, Base_Archetype) %>%
  mutate(Count_base_arch = n()) %>%
  ungroup() %>%
  mutate(Base_Archetype_percent = (Count_base_arch / Week_deck_number)) %>%
  distinct() %>% 
  group_by(Week) %>% 
    mutate(Date = min(as_date(Date))) %>% 
  ungroup()



Low_Arch_spaghetti <- as.character(
  spaghetti_plot_df %>%
  distinct(Week, Archetype, Archetype_percent) %>%
  group_by(Archetype) %>%
  # old based on mean presence
  # summarise(Archetype_percent = sum(Archetype_percent) / max(Week), ) %>%
  # now based on max presence
  summarise(Archetype_percent = max(Archetype_percent)) %>%
   filter(Archetype_percent < 0.025) %>% pull(Archetype)
)


Low_base_Arch_spaghetti <- as.character(
  spaghetti_plot_df %>%
  distinct(Week, Base_Archetype, Base_Archetype_percent) %>%
  group_by(Base_Archetype) %>%
  # old based on mean presence
  # summarise(Base_Archetype_percent = sum(Base_Archetype_percent) / max(Week), ) %>%
  # now based on max presence
  summarise(Base_Archetype_percent = max(Base_Archetype_percent)) %>%
  
  filter(Base_Archetype_percent < 0.025) %>% pull(Base_Archetype)
  )

ratio_plot <- 3

```



# Presence over Time 



## Archetype 

Presence from `r min(spaghetti_plot_df$Date)` to `r max(spaghetti_plot_df$Date)`  for a total of `r spaghetti_plot_df %>% distinct(Week,.keep_all = TRUE) %>% pull(Week_deck_number) %>% sum()` decks.   


```{r}
#| column: screen
plot_archetype_spaghetti <- (ggplot(
  spaghetti_plot_df ,
  aes(
    x = Week,
    y = Archetype_percent,
    color = Archetype,
    text = paste(
      "Archetype: ", Archetype," (", Count_arch,")","<br>", # Archetype name
      "Archetype percent: ", round(Archetype_percent * 100, 2), " %", "<br>",
      sep = ""
    ),
    group = 1
  )
) +
  geom_line() +
  geom_point() +
  scale_x_continuous("Week",
    breaks = unique(spaghetti_plot_df$Week),
    labels = paste0(
      "Week : ", unique(spaghetti_plot_df$Week), "<br>",
        unique(spaghetti_plot_df$Date), "<br>",
        "N total deck : ", unique(spaghetti_plot_df$Week_deck_number)
                    
                    )
  ) +
  scale_color_manual(
    values = colors_scales_presence[1:length(
      unique(spaghetti_plot_df$Base_Archetype)
    )]
  ) +
  ylab("Archetype presence") +
  scale_y_continuous(labels = function(x) scales::percent(x))
) %>%
  ggplotly(
    tooltip = c("text") , height = (480 * ratio_plot), width = (850 * ratio_plot)
    )


plot_archetype_spaghetti$x$data <- lapply(
  plot_archetype_spaghetti$x$data, function(y) {
    if (y$name %in% Low_Arch_spaghetti) {
      y$visible <- "legendonly"
    }


    return(y)
  }
)


plot_archetype_spaghetti %>% bslib::card(full_screen = TRUE)
```


## Base Archetype
Presence from `r min(spaghetti_plot_df$Date)` to `r max(spaghetti_plot_df$Date)` for a total of `r spaghetti_plot_df %>% distinct(Week,.keep_all = TRUE) %>% pull(Week_deck_number) %>% sum()` decks.   

```{r}
#| column: screen
plot_base_archetype_spaghetti <- (ggplot(
  spaghetti_plot_df,
  aes(
    x = Week,
    y = Base_Archetype_percent,
    color = Base_Archetype,
    text = paste(
      "Archetype: ", Base_Archetype," (", Count_base_arch,")", "<br>", # Archetype name
      "Archetype percent: ", round(Base_Archetype_percent * 100, 2), " %", "<br>",
      sep = ""
    ),
    group = 1
  )
) +
  geom_line() +
  geom_point() +
  scale_x_continuous("Week",
    breaks = unique(spaghetti_plot_df$Week),
    labels = paste0(
      "Week : ", unique(spaghetti_plot_df$Week), "<br>",
        unique(spaghetti_plot_df$Date), "<br>",
        "N total deck : ", unique(spaghetti_plot_df$Week_deck_number)
                    
                    )
  ) +
  scale_color_manual(
    values = colors_scales_presence[1:length(
      unique(spaghetti_plot_df$Base_Archetype)
    )]
  ) +
  ylab("Archetype presence") +
  scale_y_continuous(labels = function(x) scales::percent(x))
) %>%
  ggplotly(tooltip = c("text"), height = (480 * ratio_plot), width = (850 * ratio_plot))



plot_base_archetype_spaghetti$x$data <- lapply(
  plot_base_archetype_spaghetti$x$data, function(y) {
    if (y$name %in% Low_base_Arch_spaghetti) {
      y$visible <- "legendonly"
    }


    return(y)
  }
)

plot_base_archetype_spaghetti %>% 
  bslib::card(full_screen = TRUE)
```



# Presence graph 

## All Data 

* All data : `r format(as.Date(min(Presence_df_base$Date)), "%d-%m-%Y")` to `r format(as.Date(max(Presence_df_base$Date)), format = "%d/%m/%Y")`. 
* Duration `r round(max(difftime(Sys.Date(),Presence_df_base$Date,units = "weeks")),0)` weeks.
* Include meta : `r unique(Presence_df_base_all_data$Meta)`.  
* Total number of deck : `r nrow(Presence_df_base)`.  




```{r}
#| column: screen
plot_presence_fun(
  df_base = Presence_df_base,
  color_scheme = colors_scales_presence,
  time_limit = Inf,
  compare_time_limit = NULL,
  plot_scaling = ratio_plot
) %>% bslib::card(full_screen = TRUE)
```

## 1 Month

* 1 Month data : `r format(as.Date(min(one_month_inline$Date)), "%d-%m-%Y")` to `r format(as.Date(max(one_month_inline$Date)), "%d-%m-%Y")`.
* Duration `r round(max(difftime(Sys.Date(),one_month_inline$Date,units = "days")),0)` days.
* Include meta : `r unique(one_month_inline$Meta)`.
* Total number of deck : `r nrow(one_month_inline)`.  

```{r}
#| column: screen
plot_presence_fun(
  df_base = Presence_df_base,
  color_scheme = colors_scales_presence,
  time_limit = 5,
  compare_time_limit = Inf,
  plot_scaling = ratio_plot
) %>% 
  bslib::card(full_screen = TRUE)
```


## 2 Weeks 

* 2 Weeks data : `r format(as.Date(min(two_week_inline$Date)), "%d-%m-%Y")` to `r format(as.Date(max(two_week_inline$Date)), "%d-%m-%Y")`.
* Duration `r round(max(difftime(Sys.Date(),two_week_inline$Date,units = "days")),0)` days.
* Include meta : `r unique(two_week_inline$Meta)`.
* Total number of deck : `r nrow(two_week_inline)`.  



```{r}
#| column: screen
plot_presence_fun(
  df_base = Presence_df_base,
  color_scheme = colors_scales_presence,
  time_limit = 3,
  compare_time_limit = 5,
  plot_scaling = ratio_plot
) %>% bslib::card(full_screen = TRUE)
```


## 1 Weeks 

* 1 Weeks data : `r format(as.Date(min(one_week_inline$Date)), "%d-%m-%Y")` to `r format(as.Date(max(one_week_inline$Date)), "%d-%m-%Y")`.
* Duration `r round(max(difftime(Sys.Date(),one_week_inline$Date,units = "days")),0)` days.
* Include meta : `r unique(one_week_inline$Meta)`.
* Total number of deck : `r nrow(one_week_inline)`.  



```{r}
#| column: screen
plot_presence_fun(
  df_base = Presence_df_base,
  color_scheme = colors_scales_presence,
  time_limit = 2,
  compare_time_limit = 5,
  plot_scaling = ratio_plot
) %>% bslib::card(full_screen = TRUE)
```

# CI plot win rates  

::: {.panel-tabset .nav-pills} 
## Archetype  
```{r}
df_Ci_by_week <- rbind(
  Presence_df_base,
  Presence_df_base %>% 
    mutate(Week = 0)
  ) %>%
    group_by(Archetype,Week) %>% 
  mutate( 
    Arch_winrate = winrate_1_data(
      sum(Wins, na.rm = TRUE) , sum(Losses, na.rm = TRUE)
      ),
    CI_Arch_winrate = CI_prop(
      Arch_winrate, sum(Losses + Wins, na.rm = TRUE)
      ),
    ) %>% 
  distinct(Archetype,Week,.keep_all = TRUE) %>% 
  group_by(Week) %>% 
    mutate(
      Global_winrate = mean(Arch_winrate),
      Arch_winrate = Arch_winrate - Global_winrate) %>% 
  ungroup() %>%
  select(
    Archetype,#Base_Archetype,
    Week,Archetype_count,
    Arch_winrate,CI_Arch_winrate #, Base_Arch_winrate,CI_Base_Arch_winrate
    ) %>% 
  mutate(
    Week = factor(ifelse(Week == 0,"all",Week),
                  levels = c("all",as.character(seq(1,max(Presence_df_base$Week)
                                                    ))
                             )
                  )
    ) %>% arrange(Archetype_count)

df_Ci_by_week2 <- rbind(
  Presence_df_base,
  Presence_df_base %>% 
    mutate(Week = 0)
  ) %>%
    group_by(Archetype,Archetype_count,Week,Global_winrate) %>% 
  summarise( 
    Arch_winrate = winrate_1_data(
      sum(Wins, na.rm = TRUE) , sum(Losses, na.rm = TRUE)
      ),
    CI_Arch_winrate = CI_prop(
      Arch_winrate, sum(Losses + Wins, na.rm = TRUE)
      ),
    .groups = "drop"
    ) %>%  
  mutate( Arch_winrate = Arch_winrate - Global_winrate) %>% 
  distinct() %>% 
  mutate(
    Week = factor(ifelse(Week == 0,"all",Week),
                  levels = c("all",as.character(seq(1,max(Presence_df_base$Week)
                                                    ))
                             )
                  )
    ) %>% arrange(Archetype_count)


df_Ci_by_all_week <- df_Ci_by_week %>% 
         filter(Week == "all") %>% 
         mutate(
           Archetype = factor(Archetype, levels = .$Archetype[order(.$Arch_winrate + .$CI_Arch_winrate)])
         ) %>% 
  arrange(Archetype)
```





```{r}
#| column: screen

(ggplot(data = df_Ci_by_all_week
       ) +
  geom_point(
    aes(
      y = Arch_winrate,
      x = Archetype,
      text = paste(
      "Archetype: ", Archetype, "<br>", # Archetype name
      "Winrate: ", 
      round(Arch_winrate * 100, 1), " %",
      "[",round((Arch_winrate + CI_Arch_winrate) * 100, 2),";",
      round((Arch_winrate - CI_Arch_winrate) * 100, 2),"]", "<br>",
      sep = ""
    ),
      ),
    position = position_dodge(0.75)
    )  +
      geom_errorbar(aes(
        x = Archetype,
        ymin = Arch_winrate + CI_Arch_winrate,
                        ymax = Arch_winrate - CI_Arch_winrate
        ),
      position = position_dodge(width = .75), width = .01
      )  +
     geom_hline(yintercept = mean(df_Ci_by_all_week$Arch_winrate), linetype="dashed", color = "red") +
    geom_hline(
      yintercept= c(mean(df_Ci_by_all_week$Arch_winrate - df_Ci_by_all_week$CI_Arch_winrate),
                    mean(df_Ci_by_all_week$Arch_winrate + df_Ci_by_all_week$CI_Arch_winrate)), 
      linetype="dashed", color = "blue") +
    scale_x_discrete(
        label = paste0(
            "<span style='font-size:", 17 , "px;'> <b>",
            df_Ci_by_all_week %>%
                pull(Archetype) %>%
                unique(),
            "</b> </span>",
            "<br /> n : ", df_Ci_by_all_week %>%
                pull(
                    Archetype_count   
                ),
            "<br /> ", df_Ci_by_all_week %>%
                mutate(temp_ci = paste0(
                    round(Arch_winrate * 100, 1), " %",
                    "[", round((Arch_winrate + CI_Arch_winrate) * 100, 2), ";",
                    round((Arch_winrate - CI_Arch_winrate) * 100, 2), "]")
                ) %>% 
                pull(
                    temp_ci
                )
            
        ),
        # guide = guide_axis(n.dodge=3)
    ) +
  coord_flip()
  )  %>%
  ggplotly(
    tooltip = c("text"), height = (480 * ratio_plot), width = (820 * ratio_plot)
  ) %>% bslib::card(full_screen = TRUE)
```




## Base archetype
```{r}
filter_base_archetype_count <- min(50, 
 sum(
   Presence_df_base_no_filter %>% 
       distinct(Base_Archetype,.keep_all = TRUE) %>%
       pull(Base_Archetype_count)
     )/100 )


Presence_base_arch_df_base <- Presence_df_base_no_filter %>%  
  ungroup() %>% 
  mutate(Base_Archetype = if_else(
    Base_Archetype_count > filter_base_archetype_count,
                             Base_Archetype,"other")
    ) %>%  
  group_by(Base_Archetype) %>%
  mutate(
    Base_Archetype_count = n()
  ) %>%
  ungroup() %>% 
  mutate(
    Global_winrate =
      winrate_1_data(
        sum(Wins,na.rm = TRUE),
        sum(Losses,na.rm = TRUE)
        )
    )
```

```{r}
df_base_arch_Ci_by_week <- rbind(
  Presence_base_arch_df_base,
  Presence_base_arch_df_base %>% 
    mutate(Week = 0)
  ) %>%
    group_by(Base_Archetype,Week) %>% 
  mutate( 
    Arch_winrate = winrate_1_data(
      sum(Wins, na.rm = TRUE) , sum(Losses, na.rm = TRUE)
      ),
    CI_Arch_winrate = CI_prop(
      Arch_winrate, sum(Losses + Wins, na.rm = TRUE)
      ),
    ) %>% 
  distinct(Base_Archetype,Week,.keep_all = TRUE) %>% 
  group_by(Week) %>% 
    mutate(
      Global_winrate = mean(Arch_winrate),
      Arch_winrate = Arch_winrate - Global_winrate) %>% 
  ungroup() %>%
  select(
    Base_Archetype,#Base_Archetype,
    Week,Base_Archetype_count,
    Arch_winrate,CI_Arch_winrate #, Base_Arch_winrate,CI_Base_Arch_winrate
    ) %>% 
  mutate(
    Week = factor(ifelse(Week == 0,"all",Week),
                  levels = c("all",as.character(seq(1,max(Presence_base_arch_df_base$Week)
                                                    ))
                             )
                  )
    ) %>% arrange(Base_Archetype_count)

df_base_arch_Ci_by_week2 <- rbind(
  Presence_base_arch_df_base,
  Presence_base_arch_df_base %>% 
    mutate(Week = 0)
  ) %>%
    group_by(Base_Archetype,Base_Archetype_count,Week,Global_winrate) %>% 
  summarise( 
    Arch_winrate = winrate_1_data(
      sum(Wins, na.rm = TRUE) , sum(Losses, na.rm = TRUE)
      ),
    CI_Arch_winrate = CI_prop(
      Arch_winrate, sum(Losses + Wins, na.rm = TRUE)
      ),
    .groups = "drop"
    ) %>%  
  mutate( Arch_winrate = Arch_winrate - Global_winrate) %>% 
  distinct() %>% 
  mutate(
    Week = factor(ifelse(Week == 0,"all",Week),
                  levels = c("all",as.character(seq(1,max(Presence_base_arch_df_base$Week)
                                                    ))
                             )
                  )
    ) %>% arrange(Base_Archetype_count)


df_base_arch_Ci_by_all_week <- df_base_arch_Ci_by_week %>% 
         filter(Week == "all") %>% 
         mutate(
           Base_Archetype = factor(Base_Archetype, levels = .$Base_Archetype[order(.$Arch_winrate + .$CI_Arch_winrate)])
         ) %>% 
  arrange(Base_Archetype)
```





```{r}
#| column: screen

(ggplot(data = df_base_arch_Ci_by_all_week
       ) +
  geom_point(
    aes(
      y = Arch_winrate,
      x = Base_Archetype,
      text = paste(
      "Archetype: ", Base_Archetype, "<br>", # Archetype name
      "Winrate: ", 
      round(Arch_winrate * 100, 1), " %",
      "[",round((Arch_winrate + CI_Arch_winrate) * 100, 2),";",
      round((Arch_winrate - CI_Arch_winrate) * 100, 2),"]", "<br>",
      sep = ""
    ),
      ),
    position = position_dodge(0.75)
    )  +
      geom_errorbar(aes(
        x = Base_Archetype,
        ymin = Arch_winrate + CI_Arch_winrate,
                        ymax = Arch_winrate - CI_Arch_winrate
        ),
      position = position_dodge(width = .75), width = .01
      )  +
     geom_hline(yintercept = mean(df_base_arch_Ci_by_all_week$Arch_winrate), linetype="dashed", color = "red") +
    geom_hline(
      yintercept= c(mean(df_base_arch_Ci_by_all_week$Arch_winrate - df_base_arch_Ci_by_all_week$CI_Arch_winrate),
                    mean(df_base_arch_Ci_by_all_week$Arch_winrate + df_base_arch_Ci_by_all_week$CI_Arch_winrate)), 
      linetype="dashed", color = "blue") +
    scale_x_discrete(
        label = paste0(
            "<span style='font-size:", 17 , "px;'> <b>",
            df_base_arch_Ci_by_all_week %>%
                pull(Base_Archetype) %>%
                unique(),
            "</b> </span>",
            "<br /> n : ", df_base_arch_Ci_by_all_week %>%
                pull(
                    Base_Archetype_count   
                ),
            "<br /> ", df_base_arch_Ci_by_all_week %>%
                mutate(temp_ci = paste0(
                    round(Arch_winrate * 100, 1), " %",
                    "[", round((Arch_winrate + CI_Arch_winrate) * 100, 2), ";",
                    round((Arch_winrate - CI_Arch_winrate) * 100, 2), "]")
                ) %>% 
                pull(
                    temp_ci
                )
            
        ),
        # guide = guide_axis(n.dodge=3)
    ) +
  coord_flip()
  )  %>%
  ggplotly(
    tooltip = c("text"), height = (480 * ratio_plot), width = (820 * ratio_plot)
  ) %>% bslib::card(full_screen = TRUE)
```
:::

# Number of copy of each cards 



```{r}
source("../sources/sources_script_specific/S1new_cards.R", local = TRUE)
df_export <- loaded_base_data %>%
  # include filter bad deck
  filter(Valide_deck) %>%
  mutate(
    Deck_winrate = Wins / (Losses + Wins)
  ) %>%
  group_by(Archetype) %>%
  mutate(
    Archetype_count = n()
  ) %>%
  ungroup() %>% 
  mutate(
    n_deck = n_distinct(id),
    n_winrates = sum(!is.na(Wins))
    )

```


The aim is to evaluate the most popular cards in the format. This table shows the presence of each card either on the mainboard or on the sideboard, or both.


Number of total deck for presence : `r unique(df_export$n_deck)`  
Number of deck with winrates : `r unique(df_export$n_winrates)`  

```{r}
# bug any don't match count sum
win_rate_main_board_overall <- Count_and_winrates_cards_in_decklist(
  df = df_export,
  colname_deck_list = "Mainboard" , 
  No_grouping_column = TRUE
) %>% 
  rename_all(~str_remove(.,"Mainboard_"))

General_presence_mainboard_overall <- Count_cards_in_decklist(
   df = df_export,
  colname_deck_list = "Mainboard" , 
  No_grouping_column = TRUE
) %>%
  rename(count_presence = count) %>% 
  rename_all(~str_remove(.,"Mainboard_"))

Main_board_total <-   full_join(
    General_presence_mainboard_overall,
    win_rate_main_board_overall,
    by = c("CardName", "Count")
  ) %>% 
  mutate(Main_side = "Main",.before = 1)
```



```{r}
win_rate_side_board_overall <- Count_and_winrates_cards_in_decklist(
   df = df_export,
  colname_deck_list = "Sideboard" , 
  No_grouping_column = TRUE
) %>% 
  rename_all(~str_remove(.,"Sideboard_"))

General_presence_sideboard_overall <- Count_cards_in_decklist(
   df = df_export,
  colname_deck_list = "Sideboard" , 
  No_grouping_column = TRUE
) %>%
  rename(count_presence = count) %>% 
  rename_all(~str_remove(.,"Sideboard_"))

Side_board_total <-   full_join(
    General_presence_sideboard_overall,
    win_rate_side_board_overall,
    by = c("CardName", "Count")
  ) %>% 
  mutate(Main_side = "Side",.before = 1)
```



```{r}
win_rate_total_deck_overall <- Count_and_winrates_cards_in_decklist(
   df = df_export,
  colname_deck_list = "All" , 
  No_grouping_column = TRUE
) 
# %>% 
#   rename_all(~str_remove(.,"Sideboard_"))


General_presence_total_deck_overall <- Count_cards_in_decklist(
  df = df_export,
  colname_deck_list = "All" , 
  No_grouping_column = TRUE
) %>%
   rename(count_presence = count) 
# %>% 
#   rename_all(~str_remove(.,"Sideboard_"))

total_deck_total <-   full_join(
    General_presence_total_deck_overall,
    win_rate_total_deck_overall,
    by = c("CardName", "Count")
  ) %>% 
  mutate(Main_side = "All",.before = 1)
```


```{r}
tooltips_deck_new_cards <- c(
  "Main, Side or Both combine",
  "Card name",
  "Set code of cards (probably last edition not sure)",
  "Number of copies of the cards",
  "Number of decks with the card (exact number of copies)",
  "Number of decks include in the win rate computation of the card (exact number of copies)",
  "Number of wins",
  "Number of looses",
  "Win rate of the card",
  "95 % Confidence intervale of card win rate",
  "Boolean for card with no possible win rate inclusion (only league)"
)
```


```{r}
modern_DB_card <- read_csv("../data/mtg_data/DBcarte_oracle.csv",show_col_types = FALSE) %>% 
   filter(
     !!sym(paste0("legalities.",tolower(params$format_param))) == "legal"
     )
```



```{r}
DT::datatable(
  rbind(
    total_deck_total,
    Main_board_total,
    Side_board_total
  ) %>% 
  left_join(modern_DB_card %>%
  mutate(
    name = str_remove(name, "\\s? //.+")
  ) %>% 
    select(name,set),by = join_by(CardName == name)) %>%
    mutate(set = as.factor(set),
           ) %>% 
  relocate(set,.after = CardName)  %>% 
  mutate(
    count_presence_percent = count_presence/unique(df_export$n_deck),
    .after = count_presence
  )  %>%
  mutate(
    count_winrate_percent = count_winrate/unique(df_export$n_winrates),
    .after = count_winrate
  ) %>% 
    mutate(
      Main_side = as.factor(Main_side) ,
      CardName = as.factor(CardName),
      Count = as.factor(Count)
    ) %>%
    mutate(Only_count = is.na(count_winrate)) %>%
    arrange(desc(count_winrate)) %>% 
    select(
      -delta_winrate_card,
      -CI_delta_winrate_card,
      -Sign_delta_wr,
      -card_draw_diff
      ) %>% 
    rename_with(
      ~ str_replace(
        str_replace(
          str_replace(
            str_replace_all(., "_", " "),
            "Mainboard", "Main"
          ),
          "Sideboard", "Side"
        ),
        "CardName", "Card"
      )
    ) ,
  callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltips_deck_new_cards, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
",
      return_filter_js()
    )
  ),
  filter = "top", rownames = FALSE,
  options = list(
    dom = "ltipr",
    searchCols = list(
      list(search = '["All"]'), NULL,NULL,
      list(search = '["Any"]'),
      NULL,NULL,NULL,NULL, NULL,
      NULL, # list(search = '10 ...'),
      NULL, NULL,# NULL, NULL, NULL, NULL,
      list(search = '["false"]') # NULL
    ), autoWidth = TRUE, pageLength = 25
  )
) %>% 
  DT::formatPercentage(c(6,8,11#,10,13
                         ),digits = 1)
```






