---
title: "Presence"
---


```{r setup, include=FALSE, message = FALSE, warning = FALSE} 
library("rjson")
library(lubridate)
library(kableExtra)
library(tidyverse)
library(plotly)
# devtools::install_github("hoesler/rwantshue")
library("rwantshue")
library(htmltools)

# css: TOC.css
source("../sources/S2_Source_mtg_new_card.R",local = TRUE)
params <- read_rds( "../data/intermediate_result/temp_format_encours_for_param.rds")

loaded_base_data <- readRDS(paste0("../data/",params$format_param,"_data_meta_en_cours.rds"))
# Réfléchir pour les couleurs et meilleurs distances
# Manque ajouter du texte après les % pour la variation
conflicted::conflicts_prefer(dplyr::filter)
```


```{r}
knitr::read_chunk("../sources/S1_introduction_text.R")
```


```{r, Introduction_chunk_2_Deck_analysis, results='asis'}

```




```{r}
# Generate different color scheme for close archetype
scheme <- iwanthue(seed = 42, force_init = TRUE) # recreate with a seed

Presence_df_base_no_filter <- loaded_base_data %>%
  filter(Tournament != paste0(params$format_param," League")) %>%
  group_by(Archetype) %>%
  mutate(
    Archetype_count = n()
  ) %>%
  ungroup() %>% 
  arrange(Archetype_count)


filter_archetype_count <- min(50, 
 sum(unique(Presence_df_base_no_filter$Archetype_count))/100 )

Presence_df_base <- Presence_df_base_no_filter %>%  
  ungroup() %>% 
  mutate(Archetype = if_else(
    Archetype_count > filter_archetype_count,
                             Archetype,"other")
    ) %>%  
  group_by(Archetype) %>%
  mutate(
    Archetype_count = n()
  ) %>%
  ungroup() %>% 
  mutate(
    Global_winrate =
      winrate_1_data(
        sum(Wins,na.rm = TRUE),
        sum(Losses,na.rm = TRUE)
        )
    )

```



```{r presence_df_over_time}
Presence_df_base_all_data <- Presence_df_base %>%
  mutate(
    Archetype =
      factor(Archetype,
        level = unique(.$Archetype)
      ),
    Rank = as.numeric(
      factor(Archetype,
        level = rev(unique(.$Archetype))
      )
    ),
    Base_Archetype =

      factor(Base_Archetype,
        level = unique(.$Base_Archetype)
      ),
    # A reflechir ou tu mets ça selon les filters
    Archetype_percent = Archetype_count / nrow(.)
  )

# Plot color scales
colors_scales_presence <- scheme$hex(
  length(levels(Presence_df_base_all_data$Base_Archetype))
)


one_week_inline <- Presence_df_base_all_data %>%
  filter(
    Week > (max(Week) - 2)
  )

two_week_inline <- Presence_df_base_all_data %>%
  filter(
    Week > (max(Week) - 3)
  )


one_month_inline <- Presence_df_base_all_data %>%
  filter(
    Week > (max(Week) - 5)
  )
```

```{r}
spaghetti_plot_df <- Presence_df_base %>%
  arrange(desc(Archetype_count)) %>%
  mutate(
    Archetype =
      factor(Archetype,
        level = unique(.$Archetype)
      ),
    Base_Archetype =

      factor(str_remove(Base_Archetype, " _fallback"),
        level = unique(str_remove(.$Base_Archetype, " _fallback"))
      )
  ) %>%
  select(Week, Meta, Archetype, Base_Archetype) %>%
  # add_count(Week,Archetype,
  #           name = "Count_arch") %>%
  group_by(Week, Archetype) %>%
  mutate(Count_arch = n()) %>%
  ungroup() %>%
  group_by(Week) %>%
  mutate(Week_deck_number = n()) %>%
  ungroup() %>%
  mutate(Archetype_percent = (Count_arch / Week_deck_number)) %>%
  # add_count(Week,Base_Archetype,
  #           name = "Count_base_arch") %>%
  group_by(Week, Base_Archetype) %>%
  mutate(Count_base_arch = n()) %>%
  ungroup() %>%
  mutate(Base_Archetype_percent = (Count_base_arch / Week_deck_number)) %>%
  distinct()



Low_Arch_spaghetti <- as.character(
  spaghetti_plot_df %>%
  distinct(Week, Archetype, Archetype_percent) %>%
  group_by(Archetype) %>%
  # old based on mean presence
  # summarise(Archetype_percent = sum(Archetype_percent) / max(Week), ) %>%
  # now based on max presence
  summarise(Archetype_percent = max(Archetype_percent)) %>%
   filter(Archetype_percent < 0.025) %>% pull(Archetype)
)


Low_base_Arch_spaghetti <- as.character(
  spaghetti_plot_df %>%
  distinct(Week, Base_Archetype, Base_Archetype_percent) %>%
  group_by(Base_Archetype) %>%
  # old based on mean presence
  # summarise(Base_Archetype_percent = sum(Base_Archetype_percent) / max(Week), ) %>%
  # now based on max presence
  summarise(Base_Archetype_percent = max(Base_Archetype_percent)) %>%
  
  filter(Base_Archetype_percent < 0.025) %>% pull(Base_Archetype)
  )

ratio_plot <- 3
```



# Presence over Time 

## Archetype 
```{r}
#| column: screen
plot_archetype_spaghetti <- (ggplot(
  spaghetti_plot_df,
  aes(
    x = Week,
    y = Archetype_percent,
    color = Archetype,
    text = paste(
      "Archetype: ", Archetype, "<br>", # Archetype name
      "Archetype percent: ", round(Archetype_percent * 100, 2), " %", "<br>",
      sep = ""
    ),
    group = 1
  )
) +
  geom_line() +
  geom_point() +
  scale_x_continuous("Week",
    breaks = unique(spaghetti_plot_df$Week)
  ) +
  scale_color_manual(
    values = colors_scales_presence[1:length(
      unique(spaghetti_plot_df$Base_Archetype)
    )]
  ) +
  ylab("Archetype presence") +
  scale_y_continuous(labels = function(x) scales::percent(x))
) %>%
  ggplotly(
    tooltip = c("text") , height = (480 * ratio_plot), width = (850 * ratio_plot)
    )


plot_archetype_spaghetti$x$data <- lapply(
  plot_archetype_spaghetti$x$data, function(y) {
    if (y$name %in% Low_Arch_spaghetti) {
      y$visible <- "legendonly"
    }


    return(y)
  }
)


plot_archetype_spaghetti %>% bslib::card(full_screen = TRUE)
```


## Base Archetype

```{r}
#| column: screen
plot_base_archetype_spaghetti <- (ggplot(
  spaghetti_plot_df,
  aes(
    x = Week,
    y = Base_Archetype_percent,
    color = Base_Archetype,
    text = paste(
      "Archetype: ", Base_Archetype, "<br>", # Archetype name
      "Archetype percent: ", round(Base_Archetype_percent * 100, 2), " %", "<br>",
      sep = ""
    ),
    group = 1
  )
) +
  geom_line() +
  geom_point() +
  scale_x_continuous("Week",
    breaks = unique(spaghetti_plot_df$Week)
  ) +
  scale_color_manual(
    values = colors_scales_presence[1:length(
      unique(spaghetti_plot_df$Base_Archetype)
    )]
  ) +
  ylab("Archetype presence") +
  scale_y_continuous(labels = function(x) scales::percent(x))
) %>%
  ggplotly(tooltip = c("text"), height = (480 * ratio_plot), width = (850 * ratio_plot))



plot_base_archetype_spaghetti$x$data <- lapply(
  plot_base_archetype_spaghetti$x$data, function(y) {
    if (y$name %in% Low_base_Arch_spaghetti) {
      y$visible <- "legendonly"
    }


    return(y)
  }
)

plot_base_archetype_spaghetti %>% 
  bslib::card(full_screen = TRUE)
```



# Presence graph 

## All Data 

* All data : `r format(as.Date(min(Presence_df_base$Date)), "%d-%m-%Y")` to `r format(as.Date(max(Presence_df_base$Date)), format = "%d/%m/%Y")`. 
* Duration `r round(max(difftime(Sys.Date(),Presence_df_base$Date,units = "weeks")),0)` weeks.
* Include meta : `r unique(Presence_df_base_all_data$Meta)`.




```{r}
#| column: screen
plot_presence_fun(
  df_base = Presence_df_base,
  color_scheme = colors_scales_presence,
  time_limit = Inf,
  compare_time_limit = NULL,
  plot_scaling = ratio_plot
) %>% bslib::card(full_screen = TRUE)
```

## 1 Month

* 1 Month data : `r format(as.Date(min(one_month_inline$Date)), "%d-%m-%Y")` to `r format(as.Date(max(one_month_inline$Date)), "%d-%m-%Y")`.
* Duration `r round(max(difftime(Sys.Date(),one_month_inline$Date,units = "days")),0)` days.
* Include meta : `r unique(one_month_inline$Meta)`.


```{r}
#| column: screen
plot_presence_fun(
  df_base = Presence_df_base,
  color_scheme = colors_scales_presence,
  time_limit = 5,
  compare_time_limit = Inf,
  plot_scaling = ratio_plot
) %>% 
  bslib::card(full_screen = TRUE)
```


## 2 Weeks 

* 2 Weeks data : `r format(as.Date(min(two_week_inline$Date)), "%d-%m-%Y")` to `r format(as.Date(max(two_week_inline$Date)), "%d-%m-%Y")`.
* Duration `r round(max(difftime(Sys.Date(),two_week_inline$Date,units = "days")),0)` days.
* Include meta : `r unique(two_week_inline$Meta)`.


```{r}
#| column: screen
plot_presence_fun(
  df_base = Presence_df_base,
  color_scheme = colors_scales_presence,
  time_limit = 3,
  compare_time_limit = 5,
  plot_scaling = ratio_plot
) %>% bslib::card(full_screen = TRUE)
```


## 1 Weeks 

* 1 Weeks data : `r format(as.Date(min(one_week_inline$Date)), "%d-%m-%Y")` to `r format(as.Date(max(one_week_inline$Date)), "%d-%m-%Y")`.
* Duration `r round(max(difftime(Sys.Date(),one_week_inline$Date,units = "days")),0)` days.
* Include meta : `r unique(one_week_inline$Meta)`.


```{r}
#| column: screen
plot_presence_fun(
  df_base = Presence_df_base,
  color_scheme = colors_scales_presence,
  time_limit = 2,
  compare_time_limit = 5,
  plot_scaling = ratio_plot
) %>% bslib::card(full_screen = TRUE)
```

# CI plot win rates
```{r}
df_Ci_by_week <- rbind(
  Presence_df_base,
  Presence_df_base %>% 
    mutate(Week = 0)
  ) %>%
    group_by(Archetype,Week) %>% 
  mutate( 
    Arch_winrate = winrate_1_data(
      sum(Wins, na.rm = TRUE) , sum(Losses, na.rm = TRUE)
      ),
    CI_Arch_winrate = CI_prop(
      Arch_winrate, sum(Losses + Wins, na.rm = TRUE)
      ),
    ) %>% 
  
  distinct(Archetype,Week,.keep_all = TRUE) %>% 
  group_by(Week) %>% 
    mutate(
      Global_winrate = mean(Arch_winrate),
      Arch_winrate = Arch_winrate - Global_winrate) %>% 
  ungroup() %>%
  select(
    Archetype,#Base_Archetype,
    Week,Archetype_count,
    Arch_winrate,CI_Arch_winrate #, Base_Arch_winrate,CI_Base_Arch_winrate
    ) %>% 
  mutate(
    Week = factor(ifelse(Week == 0,"all",Week),
                  levels = c("all",as.character(seq(1,max(Presence_df_base$Week)
                                                    ))
                             )
                  )
    ) %>% arrange(Archetype_count)

df_Ci_by_week2 <- rbind(
  Presence_df_base,
  Presence_df_base %>% 
    mutate(Week = 0)
  ) %>%
    group_by(Archetype,Archetype_count,Week,Global_winrate) %>% 
  summarise( 
    Arch_winrate = winrate_1_data(
      sum(Wins, na.rm = TRUE) , sum(Losses, na.rm = TRUE)
      ),
    CI_Arch_winrate = CI_prop(
      Arch_winrate, sum(Losses + Wins, na.rm = TRUE)
      ),
    .groups = "drop"
    ) %>%  
  mutate( Arch_winrate = Arch_winrate - Global_winrate) %>% 
  distinct() %>% 
  mutate(
    Week = factor(ifelse(Week == 0,"all",Week),
                  levels = c("all",as.character(seq(1,max(Presence_df_base$Week)
                                                    ))
                             )
                  )
    ) %>% arrange(Archetype_count)






df_Ci_by_all_week <- df_Ci_by_week %>% 
         filter(Week == "all") %>% 
         mutate(
           Archetype = factor(Archetype, levels = .$Archetype[order(.$Arch_winrate + .$CI_Arch_winrate)])
         )
```





```{r}
#| column: screen

(ggplot(data = df_Ci_by_all_week
       ) +
  geom_point(
    aes(
      y = Arch_winrate,
      x = Archetype,
      text = paste(
      "Archetype: ", Archetype, "<br>", # Archetype name
      "Winrate: ", 
      round(Arch_winrate * 100, 1), " %",
      "[",round((Arch_winrate + CI_Arch_winrate) * 100, 2),";",
      round((Arch_winrate - CI_Arch_winrate) * 100, 2),"]", "<br>",
      sep = ""
    ),
      ),
    position = position_dodge(0.75)
    )  +
      geom_errorbar(aes(
        x = Archetype,
        ymin = Arch_winrate + CI_Arch_winrate,
                        ymax = Arch_winrate - CI_Arch_winrate
        ),
      position = position_dodge(width = .75), width = .01
      )  +
     geom_hline(yintercept = mean(df_Ci_by_all_week$Arch_winrate), linetype="dashed", color = "red") +
    geom_hline(
      yintercept= c(mean(df_Ci_by_all_week$Arch_winrate - df_Ci_by_all_week$CI_Arch_winrate),
                    mean(df_Ci_by_all_week$Arch_winrate + df_Ci_by_all_week$CI_Arch_winrate)), 
      linetype="dashed", color = "blue") +
  coord_flip()
  )  %>%
  ggplotly(
    tooltip = c("text"), height = (480 * ratio_plot), width = (820 * ratio_plot)
  ) %>% bslib::card(full_screen = TRUE)
```





# Number of copy of each cards 



```{r}
source("../sources/sources_script_specific/S1new_cards.R", local = TRUE)
df_export <- loaded_base_data %>%
  # include filter bad deck
  filter(Valide_deck) %>%
  mutate(
    Deck_winrate = Wins / (Losses + Wins)
  ) %>%
  group_by(Archetype) %>%
  mutate(
    Archetype_count = n()
  ) %>%
  ungroup()
```



```{r}
# bug any don't match count sum
win_rate_main_board_overall <- Count_and_winrates_cards_in_decklist(
  df = df_export,
  colname_deck_list = "Mainboard" , 
  No_grouping_column = TRUE
) %>% 
  rename_all(~str_remove(.,"Mainboard_"))

General_presence_mainboard_overall <- Count_cards_in_decklist(
   df = df_export,
  colname_deck_list = "Mainboard" , 
  No_grouping_column = TRUE
) %>%
  rename(count_presence = count) %>% 
  rename_all(~str_remove(.,"Mainboard_"))

Main_board_total <-   full_join(
    General_presence_mainboard_overall,
    win_rate_main_board_overall,
    by = c("CardName", "Count")
  ) %>% 
  mutate(Main_side = "Main",.before = 1)
```



```{r}
win_rate_side_board_overall <- Count_and_winrates_cards_in_decklist(
   df = df_export,
  colname_deck_list = "Sideboard" , 
  No_grouping_column = TRUE
) %>% 
  rename_all(~str_remove(.,"Sideboard_"))

General_presence_sideboard_overall <- Count_cards_in_decklist(
   df = df_export,
  colname_deck_list = "Sideboard" , 
  No_grouping_column = TRUE
) %>%
  rename(count_presence = count) %>% 
  rename_all(~str_remove(.,"Sideboard_"))

Side_board_total <-   full_join(
    General_presence_sideboard_overall,
    win_rate_side_board_overall,
    
    by = c("CardName", "Count")
  ) %>% 
  mutate(Main_side = "Side",.before = 1)
```



```{r}
win_rate_total_deck_overall <- Count_and_winrates_cards_in_decklist(
   df = df_export,
  colname_deck_list = "All" , 
  No_grouping_column = TRUE
) 
# %>% 
#   rename_all(~str_remove(.,"Sideboard_"))

General_presence_total_deck_overall <- Count_cards_in_decklist(
   df = df_export,
  colname_deck_list = "All" , 
  No_grouping_column = TRUE
) %>%
   rename(count_presence = count) 
# %>% 
#   rename_all(~str_remove(.,"Sideboard_"))

total_deck_total <-   full_join(
    General_presence_total_deck_overall,
    win_rate_total_deck_overall,
    
    by = c("CardName", "Count")
  ) %>% 
  mutate(Main_side = "All",.before = 1)
```


```{r}
tooltips_deck_new_cards <- c(
  "Main, Side or Both combine",
  "Card name",
  "Number of copies of the cards",
  "Number of decks with the card (exact number of copies)",
  "Number of decks include in the win rate computation of the card (exact number of copies)",
  "Win rate of the card",
  "95 % Confidence intervale of card win rate",
  'Win rate of the card vs deck with different count for the card.For example, if "Count" = 4, the win rate of 4 copies minus the win rate of 0, 1, 2 or 3 copies.',
  "95 % Confidence intervale of card win rate vs other",
  "The confidence interval is different from 0. + means a strictly positive confidence interval - means a strictly negative confidence interval,  0 means a confidence interval covering 0.",
  "Boolean for card with no possible win rate inclusion (only league)"
)
```


```{r js_function}
onfly_filter_js <- c(r"{
function onlyUnique(value, index, self) {
return self.indexOf(value) === index;
};
var table_header = table.table().header();
var column_nodes = $(table_header).find('tr:nth-child(2) > td');
var input_nodes = $(column_nodes).find('input.form-control');
for (let i = 0; i < input_nodes.length; i++){
data_type_attr = $(input_nodes[i]).closest('td').attr('data-type');
if (data_type_attr == 'factor'){
$(input_nodes[i]).on('input propertychange', function(){
if (typeof unique_values !== 'undefined'){
selection_content = $(input_nodes[i]).closest('td').find('div.selectize-dropdown-content');
var content_str = '';
for (let j = 0; j < unique_values.length; j++){
content_str = content_str.concat('<div data-value="', unique_values[j],'" data-selectable="" class="option">', unique_values[j], '</div>')
}
selection_content[0].innerHTML = content_str;
}
})
}
}
column_nodes.on('click', function(){
setTimeout(function(){
for (let i = 0; i < column_nodes.length; i++){
data_type_attr = $(column_nodes[i]).attr('data-type');
if (data_type_attr == 'factor'){
selection_div = $(column_nodes[i]).find('div.selectize-input');
if($(selection_div).hasClass('dropdown-active')){
values = table.column(i, {pages: 'all', search: 'applied'}).data();
unique_values = Array.from(values.filter(onlyUnique));
selection_content = $(column_nodes[i]).find('div.selectize-dropdown-content');
var content_str = '';
for (let j = 0; j < unique_values.length; j++){
content_str = content_str.concat('<div data-value="', unique_values[j],'" data-selectable="" class="option">', unique_values[j], '</div>')
}
selection_content[0].innerHTML = content_str;
}
}
}
}, 50);
})
}")
```



```{r}
DT::datatable(
  rbind(
    total_deck_total,
    Main_board_total,
    Side_board_total
  ) %>%
    mutate(
      Main_side = as.factor(Main_side) ,
      CardName = as.factor(CardName),
      Count = as.factor(Count)
    ) %>%
    mutate(Only_count = is.na(count_winrate)) %>%
    arrange(desc(count_winrate)) %>%
    rename_with(
      ~ str_replace(
        str_replace(
          str_replace(
            str_replace_all(., "_", " "),
            "Mainboard", "Main"
          ),
          "Sideboard", "Side"
        ),
        "CardName", "Card"
      )
    ) ,
  callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltips_deck_new_cards, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
",
      onfly_filter_js
    )
  ),
  filter = "top", rownames = FALSE,
  options = list(
    dom = "ltipr",
    searchCols = list(
      list(search = '["All"]'), NULL,
      list(search = '["Any"]'),
      NULL,
      NULL, # list(search = '10 ...'),
      NULL, NULL, NULL, NULL, NULL, NULL, list(search = '["false"]') # NULL
    ), autoWidth = TRUE, pageLength = 25
  )
) %>% 
  DT::formatPercentage(c(6,8,11),digits = 1)
```






