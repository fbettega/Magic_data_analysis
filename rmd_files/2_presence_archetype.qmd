---
title: "Presence"
---


```{r setup, include=FALSE, message = FALSE, warning = FALSE} 

library(tidyverse)
library(plotly)
library(rwantshue)

conflicted::conflicts_prefer(purrr::discard)
# css: TOC.css
source("../sources/MTG_function_base_FB/global_mtg_sources.R")
source("../sources/S2_Source_mtg_new_card.R",local = TRUE)
params <- read_rds( "../data/intermediate_result/temp_format_encours_for_param.rds")

loaded_base_data <- readRDS(paste0("../data/",params$format_param,"_data_meta_en_cours.rds"))
# Réfléchir pour les couleurs et meilleurs distances
# Manque ajouter du texte après les % pour la variation
conflicted::conflicts_prefer(dplyr::filter)

options(DT.warn.size=FALSE)
```


```{r}
knitr::read_chunk("../sources/S1_introduction_text.R")
```


```{r, Introduction_chunk_2_Deck_analysis, results='asis'}

```


```{r color_scheme_and_base_data_manipulation}
# Generate different color scheme for close archetype
scheme <- iwanthue(seed = 42, force_init = TRUE) # recreate with a seed

Presence_df_base_no_filter <- loaded_base_data %>%
  filter(Tournament != paste0(params$format_param," League")) %>%
  group_by(Archetype) %>%
  mutate(
    Archetype_count = n()
  ) %>%
  ungroup() %>% 
  group_by(Base_Archetype) %>%
  mutate(
    Base_Archetype_count = n()
  ) %>%
  ungroup() %>%
  arrange(Archetype_count)


filter_archetype_count <- min(50, 
 sum(
      Presence_df_base_no_filter %>% 
       distinct(Archetype,.keep_all = TRUE) %>%
       pull(Archetype_count)
     )/100 )

Presence_df_base <- Presence_df_base_no_filter %>%  
  ungroup() %>% 
  mutate(
    Archetype = if_else(
    Archetype_count > filter_archetype_count,
                             Archetype,"other"
    )
    ) %>%  
  group_by(Archetype) %>%
  mutate(
    Archetype_count = n()
  ) %>%
  ungroup() %>% 
  mutate(
    Global_winrate =
      winrate_1_data(
        sum(Wins,na.rm = TRUE),
        sum(Losses,na.rm = TRUE)
        )
    )

```





```{r presence_df_over_time}
Presence_df_base_all_data <- Presence_df_base %>%
  mutate(
    Archetype =
      factor(Archetype,
        level = unique(.$Archetype)
      ),
    Rank = as.numeric(
      factor(Archetype,
        level = rev(unique(.$Archetype))
      )
    ),
    Base_Archetype =
      factor(Base_Archetype,
        level = unique(.$Base_Archetype)
      ),
    # A reflechir ou tu mets ça selon les filters
    Archetype_percent = Archetype_count / nrow(.)
  )

# Plot color scales
colors_scales_presence_arch <- scheme$hex(
  length(levels(Presence_df_base_all_data$Archetype))
)


colors_scales_presence_base_arch <- scheme$hex(
  length(levels(Presence_df_base_all_data$Base_Archetype))
)



one_week_inline <- Presence_df_base_all_data %>%
  filter(
    Week > (max(Week) - 2)
  )

two_week_inline <- Presence_df_base_all_data %>%
  filter(
    Week > (max(Week) - 3)
  )


one_month_inline <- Presence_df_base_all_data %>%
  filter(
    Week > (max(Week) - 5)
  )
```



```{r spagheti_computation_arch_and_base_arch}
spaghetti_plot_df <- Presence_df_base %>%
  arrange(desc(Archetype_count)) %>%
  mutate(
    Archetype =
      factor(Archetype,
        level = unique(.$Archetype)
      ),
    Base_Archetype =
      factor(str_remove(Base_Archetype, " _fallback"),
        level = unique(str_remove(.$Base_Archetype, " _fallback"))
      )
  ) %>%
  select(Date,Week, Meta, Archetype, Base_Archetype) %>%
  # add_count(Week,Archetype,
  #           name = "Count_arch") %>%
  group_by(Week, Archetype) %>%
  mutate(Count_arch = n()) %>%
  ungroup() %>%
  group_by(Week) %>%
  mutate(Week_deck_number = n()) %>%
  ungroup() %>%
  mutate(Archetype_percent = (Count_arch / Week_deck_number)) %>%
  # add_count(Week,Base_Archetype,
  #           name = "Count_base_arch") %>%
  group_by(Week, Base_Archetype) %>%
  mutate(Count_base_arch = n()) %>%
  ungroup() %>%
  mutate(Base_Archetype_percent = (Count_base_arch / Week_deck_number)) %>%
  distinct() %>% 
  group_by(Week) %>% 
  mutate(Date = min(as_date(Date))) %>% 
  ungroup() %>%
  mutate(
    Week = factor(
      format(Week, nsmall = 2) ,
      levels = c(
        format(sort(unique(Presence_df_base$Week)), nsmall = 2)
        # 1:max(Presence_df_base$Week)
                 )
    )
  )

ratio_plot <- 3

```




# Presence over Time  

Presence from `r min(spaghetti_plot_df$Date)` to `r max(spaghetti_plot_df$Date)`  for a total of `r spaghetti_plot_df %>% distinct(Week,.keep_all = TRUE) %>% pull(Week_deck_number) %>% sum()` decks.   

::: {.panel-tabset .nav-pills}

## Archetype 

```{r, results='asis'}
if(n_distinct(spaghetti_plot_df$Week) >= 15) pander::pandoc.p("::: {.column-screen}")
```

```{r print_spagheti_arch}
# <!-- #| column: screen -->

plot_archetype_spaghetti <- function_plot_spaghetti_plot(  
  df_fun_spaghetti_plot = spaghetti_plot_df,
  scheme_color_sheme_fun  = scheme,
  Arch_or_base_arch = "Archetype" , #"Base_Archetype" "Archetype"
  hide_treshold = 2.5/100,
  count_arch_var = "Count_arch" # "Count_base_arch" "Count_arch",
  )

plot_archetype_spaghetti %>%
  bslib::card(full_screen = TRUE)
```

```{r, results='asis'}
if(n_distinct(spaghetti_plot_df$Week) >= 15) pander::pandoc.p(":::")
```

## Base Archetype

```{r, results='asis'}
if(n_distinct(spaghetti_plot_df$Week) >= 15) pander::pandoc.p("::: {.column-screen}")
```


```{r print_spagheti_base_arch}
# <!-- #| column: screen -->
plot_base_archetype_spaghetti <- function_plot_spaghetti_plot(  
  df_fun_spaghetti_plot = spaghetti_plot_df,
  scheme_color_sheme_fun  = scheme,
  Arch_or_base_arch = "Base_Archetype"  , #"Base_Archetype" "Archetype"
  hide_treshold = 2.5/100,
  count_arch_var = "Count_base_arch" # "Count_base_arch" "Count_arch",
  )

plot_base_archetype_spaghetti %>% 
  bslib::card(full_screen = TRUE)
```


```{r, results='asis'}
if(n_distinct(spaghetti_plot_df$Week) >= 15) pander::pandoc.p(":::")
```


:::


# Presence graph 

::: {.panel-tabset .nav-pills}


## All Data 

* All data : `r format(as.Date(min(Presence_df_base$Date)), "%d-%m-%Y")` to `r format(as.Date(max(Presence_df_base$Date)), format = "%d/%m/%Y")`. 
* Duration `r round(max(difftime(Sys.Date(),Presence_df_base$Date,units = "weeks")),0)` weeks.
* Include meta : `r unique(Presence_df_base_all_data$Meta)`.  
* Total number of deck : `r nrow(Presence_df_base)`.  




```{r plot_presence_arch_all_data_print}
# <!-- #| column: screen -->
plot_presence_fun(
  df_base = Presence_df_base,
  color_scheme = colors_scales_presence_base_arch,
  time_limit = Inf,
  compare_time_limit = NULL,
  plot_scaling = ratio_plot
) %>% 
  bslib::card(full_screen = TRUE)
```

## 1 Month

* 1 Month data : `r format(as.Date(min(one_month_inline$Date)), "%d-%m-%Y")` to `r format(as.Date(max(one_month_inline$Date)), "%d-%m-%Y")`.
* Duration `r round(max(difftime(Sys.Date(),one_month_inline$Date,units = "days")),0)` days.
* Include meta : `r unique(one_month_inline$Meta)`.
* Total number of deck : `r nrow(one_month_inline)`.  

```{r plot_presence_arch_one_month_print}
# <!-- #| column: screen -->
plot_presence_fun(
  df_base = Presence_df_base,
  color_scheme = colors_scales_presence_base_arch,
  time_limit = 5,
  compare_time_limit = Inf,
  plot_scaling = 2.25 #ratio_plot
) %>% 
  bslib::card(full_screen = TRUE)
```


## 2 Weeks 

* 2 Weeks data : `r format(as.Date(min(two_week_inline$Date)), "%d-%m-%Y")` to `r format(as.Date(max(two_week_inline$Date)), "%d-%m-%Y")`.
* Duration `r round(max(difftime(Sys.Date(),two_week_inline$Date,units = "days")),0)` days.
* Include meta : `r unique(two_week_inline$Meta)`.
* Total number of deck : `r nrow(two_week_inline)`.  



```{r plot_presence_arch_two_weeks_print}
# <!-- #| column: screen -->
plot_presence_fun(
  df_base = Presence_df_base,
  color_scheme = colors_scales_presence_base_arch,
  time_limit = 3,
  compare_time_limit = 5,
  plot_scaling = ratio_plot
) %>% bslib::card(full_screen = TRUE)
```


## 1 Weeks 

* 1 Weeks data : `r format(as.Date(min(one_week_inline$Date)), "%d-%m-%Y")` to `r format(as.Date(max(one_week_inline$Date)), "%d-%m-%Y")`.
* Duration `r round(max(difftime(Sys.Date(),one_week_inline$Date,units = "days")),0)` days.
* Include meta : `r unique(one_week_inline$Meta)`.
* Total number of deck : `r nrow(one_week_inline)`.  



```{r plot_presence_arch_one_week_print}
# <!-- #| column: screen -->
plot_presence_fun(
  df_base = Presence_df_base,
  color_scheme = colors_scales_presence_base_arch,
  time_limit = 2,
  compare_time_limit = 5,
  plot_scaling = ratio_plot
) %>% bslib::card(full_screen = TRUE)
```

:::

# CI plot win rates  

::: {.panel-tabset .nav-pills} 
## Archetype  
```{r compute_ci_plot_arch}
df_Ci_by_week <- rbind(
  Presence_df_base,
  Presence_df_base %>% 
    mutate(Week = 0)
  ) %>%
    group_by(Archetype,Week) %>% 
  mutate( 
    Arch_winrate = winrate_1_data(
      sum(Wins, na.rm = TRUE) , sum(Losses, na.rm = TRUE)
      ),
    CI_Arch_winrate = CI_prop(
      Arch_winrate, sum(Losses + Wins, na.rm = TRUE)
      ),
    Number_of_match = sum(Losses + Wins, na.rm = TRUE)
    ) %>% 
  distinct(Archetype,Week,.keep_all = TRUE) %>% 
  group_by(Week) %>% 
    mutate(
      Global_winrate = mean(Arch_winrate),
      Arch_winrate = Arch_winrate - Global_winrate) %>% 
  ungroup() %>%
  select(
    Archetype,#Base_Archetype,
    Week,Archetype_count,
    Arch_winrate,CI_Arch_winrate ,Number_of_match#, Base_Arch_winrate,CI_Base_Arch_winrate
    ) %>% 
  mutate(
    Week = factor(ifelse(Week == 0,"all",format(Week, nsmall = 2)),
                  levels = c("all",
                             format(sort(unique(Presence_df_base$Week)), nsmall = 2)
                             # as.character(seq(1,max(Presence_df_base$Week)))
                             )
                  )
    ) %>%
  arrange(Archetype_count)


df_Ci_by_week2 <- rbind(
  Presence_df_base,
  Presence_df_base %>% 
    mutate(Week = 0)
  ) %>%
    group_by(Archetype,Archetype_count,Week,Global_winrate) %>% 
  summarise( 
    Arch_winrate = winrate_1_data(
      sum(Wins, na.rm = TRUE) , sum(Losses, na.rm = TRUE)
      ),
    CI_Arch_winrate = CI_prop(
      Arch_winrate, sum(Losses + Wins, na.rm = TRUE)
      ),
    .groups = "drop"
    ) %>%  
  mutate( Arch_winrate = Arch_winrate - Global_winrate) %>% 
  distinct() %>% 
  mutate(
    Week = factor(ifelse(Week == 0,"all",format(Week, nsmall = 2)),
                  levels = c("all",
                             format(sort(unique(Presence_df_base$Week)), nsmall = 2)
                             # as.character(seq(1,max(Presence_df_base$Week)))
                             )
                  )
    ) %>% 
  arrange(Archetype_count)



df_Ci_by_all_week <- df_Ci_by_week %>% 
         filter(Week == "all") %>% 
         mutate(
           Archetype = factor(Archetype, levels = .$Archetype[order(.$Arch_winrate + .$CI_Arch_winrate)])
         ) %>% 
  arrange(Archetype)


Archetype_best_player <- best_player_result_fun(
  top_n_player_fun = top_n_player,
Arch_or_base_arch = "Archetype", #"Base_Archetype" "Archetype"
df_fun_top_player = Presence_df_base
) %>% 
  mutate(
    best_player_Arch_winrate = best_player_Arch_winrate - 
      unique(Presence_df_base$Global_winrate)
    )
```






```{r print_ci_plot_arch}
# <!-- #| column: screen -->
arch_ci_plot_final <- Generate_CI_plot_fun(
    df_ci_fun_param = df_Ci_by_all_week,
    win_rate_fun_par = "Arch_winrate",
    CI_fun_par = "CI_Arch_winrate",
    Arch_or_base_arch = "Archetype", #"Base_Archetype" "Archetype"
    best_player_df_par_fun = Archetype_best_player
)

arch_ci_plot_final
```





## Base archetype
```{r base_arch_init_data_manipulation}
filter_base_archetype_count <- min(50, 
 sum(
   Presence_df_base_no_filter %>% 
       distinct(Base_Archetype,.keep_all = TRUE) %>%
       pull(Base_Archetype_count)
     )/100 )


Presence_base_arch_df_base <- Presence_df_base_no_filter %>%  
  ungroup() %>% 
  mutate(Base_Archetype = if_else(
    Base_Archetype_count > filter_base_archetype_count,
                             Base_Archetype,"other")
    ) %>%  
  group_by(Base_Archetype) %>%
  mutate(
    Base_Archetype_count = n()
  ) %>%
  ungroup() %>% 
  mutate(
    Global_winrate =
      winrate_1_data(
        sum(Wins,na.rm = TRUE),
        sum(Losses,na.rm = TRUE)
        )
    )
```

```{r compute_ci_plot_base_arch}
df_base_arch_Ci_by_week <- rbind(
  Presence_base_arch_df_base,
  Presence_base_arch_df_base %>% 
    mutate(Week = 0)
  ) %>%
    group_by(Base_Archetype,Week) %>% 
  mutate( 
    Arch_winrate = winrate_1_data(
      sum(Wins, na.rm = TRUE) , sum(Losses, na.rm = TRUE)
      ),
    CI_Arch_winrate = CI_prop(
      Arch_winrate, sum(Losses + Wins, na.rm = TRUE)
      ),
    Number_of_match = sum(Losses + Wins, na.rm = TRUE)
    ) %>% 
  distinct(Base_Archetype,Week,.keep_all = TRUE) %>% 
  group_by(Week) %>% 
    mutate(
      Global_winrate = mean(Arch_winrate),
      Arch_winrate = Arch_winrate - Global_winrate) %>% 
  ungroup() %>%
  select(
    Base_Archetype,#Base_Archetype,
    Week,Base_Archetype_count,
    Arch_winrate,CI_Arch_winrate,Number_of_match #, Base_Arch_winrate,CI_Base_Arch_winrate
    ) %>% 
  mutate(
    Week = factor(
      ifelse(Week == 0,"all",format(Week, nsmall = 2)),
      levels = c("all",
                 format(sort(unique(Presence_base_arch_df_base$Week)), nsmall = 2)
                 # as.character(seq(1,max(Presence_base_arch_df_base$Week)))
                             )
                  )
    ) %>% arrange(Base_Archetype_count)

df_base_arch_Ci_by_week2 <- rbind(
  Presence_base_arch_df_base,
  Presence_base_arch_df_base %>% 
    mutate(Week = 0)
  ) %>%
    group_by(Base_Archetype,Base_Archetype_count,Week,Global_winrate) %>% 
  summarise( 
    Arch_winrate = winrate_1_data(
      sum(Wins, na.rm = TRUE) , sum(Losses, na.rm = TRUE)
      ),
    CI_Arch_winrate = CI_prop(
      Arch_winrate, sum(Losses + Wins, na.rm = TRUE)
      ),
    .groups = "drop"
    ) %>%  
  mutate( Arch_winrate = Arch_winrate - Global_winrate) %>% 
  distinct() %>% 
  mutate(
    Week = factor(ifelse(Week == 0,"all",format(Week, nsmall = 2)),
                  levels = c("all",
                             format(sort(unique(Presence_base_arch_df_base$Week)), nsmall = 2)
                             # as.character(seq(1,max(Presence_base_arch_df_base$Week)))
                             )
                  )
    ) %>% arrange(Base_Archetype_count)


df_base_arch_Ci_by_all_week <- df_base_arch_Ci_by_week %>% 
         filter(Week == "all") %>% 
         mutate(
           Base_Archetype = factor(Base_Archetype, levels = .$Base_Archetype[order(.$Arch_winrate + .$CI_Arch_winrate)])
         ) %>% 
  arrange(Base_Archetype)


base_Archetype_best_player <- best_player_result_fun(
    top_n_player_fun = top_n_player/2,
    Arch_or_base_arch = "Base_Archetype", #"Base_Archetype" "Archetype"
    df_fun_top_player = Presence_df_base
) %>% 
    mutate(
        best_player_Arch_winrate = best_player_Arch_winrate - 
            unique(Presence_df_base$Global_winrate)
    )
```





```{r print_ci_plot_base_arch}
# <!-- #| column: screen -->
base_arch_ci_plot_final <- Generate_CI_plot_fun(
    df_ci_fun_param = df_base_arch_Ci_by_all_week,
    win_rate_fun_par = "Arch_winrate",
    CI_fun_par = "CI_Arch_winrate",
    Arch_or_base_arch = "Base_Archetype", #"Base_Archetype" "Archetype"
    best_player_df_par_fun = base_Archetype_best_player
)
base_arch_ci_plot_final
```
:::









# Global meta analysis


```{r Base_init_number_of_copy_of_each_cards}
source("../sources/sources_script_specific/S1new_cards.R", local = TRUE)
df_export <- loaded_base_data %>%
  # include filter bad deck
  filter(Valide_deck) %>%
  mutate(
    Deck_winrate = Wins / (Losses + Wins)
  ) %>%
  group_by(Archetype) %>%
  mutate(
    Archetype_count = n()
  ) %>%
  ungroup() %>% 
  mutate(
    n_deck = n_distinct(id),
    n_winrates = sum(!is.na(Wins))
  )

```


The aim is to evaluate the most popular cards in the format. This table shows the presence of each card either on the mainboard or on the sideboard, or both.


Number of total deck for presence : `r unique(df_export$n_deck)`  
Number of deck with winrates : `r unique(df_export$n_winrates)`  

```{r computation_main_board_number_of_copy_of_each_cards}
# bug any don't match count sum
win_rate_main_board_overall <- Count_and_winrates_cards_in_decklist(
  df = df_export,
  colname_deck_list = "Mainboard" , 
  No_grouping_column = TRUE
) %>% 
  rename_all(~str_remove(.,"Mainboard_"))

General_presence_mainboard_overall <- Count_cards_in_decklist(
  df = df_export,
  colname_deck_list = "Mainboard" , 
  No_grouping_column = TRUE
) %>%
  rename(count_presence = count) %>% 
  rename_all(~str_remove(.,"Mainboard_"))

Main_board_total <-   full_join(
  General_presence_mainboard_overall,
  win_rate_main_board_overall,
  by = c("CardName", "Count")
) %>% 
  mutate(Main_side = "Main",.before = 1)
```



```{r computation_side_board_number_of_copy_of_each_cards}
win_rate_side_board_overall <- Count_and_winrates_cards_in_decklist(
  df = df_export,
  colname_deck_list = "Sideboard" , 
  No_grouping_column = TRUE
) %>% 
  rename_all(~str_remove(.,"Sideboard_"))

General_presence_sideboard_overall <- Count_cards_in_decklist(
  df = df_export,
  colname_deck_list = "Sideboard" , 
  No_grouping_column = TRUE
) %>%
  rename(count_presence = count) %>% 
  rename_all(~str_remove(.,"Sideboard_"))

Side_board_total <-   full_join(
  General_presence_sideboard_overall,
  win_rate_side_board_overall,
  by = c("CardName", "Count")
) %>% 
  mutate(Main_side = "Side",.before = 1)
```



```{r computation_total_number_of_copy_of_each_cards}
win_rate_total_deck_overall <- Count_and_winrates_cards_in_decklist(
  df = df_export,
  colname_deck_list = "All" , 
  No_grouping_column = TRUE
) 

General_presence_total_deck_overall <- Count_cards_in_decklist(
  df = df_export,
  colname_deck_list = "All" , 
  No_grouping_column = TRUE
) %>%
  rename(count_presence = count) 

total_deck_total <-   full_join(
  General_presence_total_deck_overall,
  win_rate_total_deck_overall,
  by = c("CardName", "Count")
) %>% 
  mutate(Main_side = "All",.before = 1)
```


```{r tool_tips_number_of_copy_of_each_cards}
tooltips_deck_new_cards <- c(
  "Link to scry fall",
  "Main, Side or Both combine",
  "Card name",
  "Set code of cards (probably last edition not sure)",
  "Number of copies of the cards",
  "Number of decks with the card (exact number of copies) including deck without winrate like 5-0 leagues",
  "Percent of deck with the card (exact number of copies) including deck without winrate like 5-0 leagues",
  "Number of decks with the card (exact number of copies) and sharing colors with cards including deck without winrate like 5-0 leagues",
  "Percent of deck with the card (exact number of copies) and sharing colors with cards including deck without winrate like 5-0 leagues",
  "Number of decks include in the win rate computation of the card (exact number of copies)",
  "Percent of deck with the card (exact number of copies) only deck with winrate",
  "Number of decks include in the win rate computation of the card (exact number of copies) and sharing colors with cards",
  "Percent of deck with the card (exact number of copies) and sharing colors with cards only deck with winrate",
  "Number of wins",
  "Number of looses",
  "Win rate of the card",
  "95 % Confidence intervale of card win rate"#,"Boolean for card with no possible win rate inclusion (only league)"
)
```


```{r read_modern_db}
modern_DB_card <- read_csv("../data/mtg_data/DBcarte_oracle.csv",show_col_types = FALSE) %>% 
  filter(
    !!sym(paste0("legalities.",tolower(params$format_param))) == "legal" |
      !!sym(paste0("legalities.",tolower(params$format_param))) ==  "restricted"
  )
```


```{r prepare_df_for_join_with_final_table}
Deck_color_castable_cards_base <- df_export %>% 
  rowwise() %>% 
  mutate(
    only_presence = any(is.na(Wins) | is.na(Losses)),
    .before =  Wins
    ) %>%
  ungroup() %>% 
  select(id,Color,only_presence) %>% 
    mutate(
      color_W = as.numeric(str_detect(Color, "W")),
      color_B = as.numeric(str_detect(Color, "B")),
      color_U = as.numeric(str_detect(Color, "U")),
      color_R = as.numeric(str_detect(Color, "R")),
      color_G = as.numeric(str_detect(Color, "G"))
    )

Deck_color_castable_cards <- 
  Deck_color_castable_cards_base %>%
  filter(Color != "C") %>% 
    select(-Color) %>% 
  group_by(
    across(starts_with("color_"))
    ) %>% 
  summarise(
    Presence_count_castable = n(),
    winrate_count_castable = sum(!only_presence),
    .groups = "drop"
  )


# bloque de code pour ajouter les comtptes de deck pouvant jouer la couleurs
Modern_db_colors_parsing <- modern_DB_card %>% 
        select(id, name,
               set,scryfall_uri,contains("mana_cost")) %>%
# Combine les colonnes mana_cost et card_faces.mana_cost.* en une seule chaîne pour chaque ligne
  rowwise() %>%
  mutate(
    combined_cost = paste(
      mana_cost,
      card_faces.mana_cost.1,
      card_faces.mana_cost.2,
      card_faces.mana_cost.3,
      card_faces.mana_cost.4,
      card_faces.mana_cost.5,
      sep = " "
    ) %>%
      str_remove_all("NA") %>% # Retirer les "NA"
      str_squish()             # Supprimer les espaces superflus
  ) %>%
  ungroup() %>%
  select(id,set,scryfall_uri,combined_cost)
# tentative de gestion des mana hybride
# %>% 
#   mutate(
#     hybrid_mana = map(str_extract_all(combined_cost, "\\{[WUBRG]/[WUBRG]\\}"),unique),  
#     combined_cost = str_remove_all(combined_cost, "\\{[WUBRG]/[WUBRG]\\}")
#     ) %>% 
#   unnest_wider(hybrid_mana,names_sep = "_")

hybride_cost_db_colors_parsing <-  modern_DB_card %>% 
        select(id, name,
               set,scryfall_uri,contains("mana_cost")) %>%
# Combine les colonnes mana_cost et card_faces.mana_cost.* en une seule chaîne pour chaque ligne
  rowwise() %>%
  mutate(
    combined_cost = paste(
      mana_cost,
      card_faces.mana_cost.1,
      card_faces.mana_cost.2,
      card_faces.mana_cost.3,
      card_faces.mana_cost.4,
      card_faces.mana_cost.5,
      sep = " "
    ) %>%
      str_remove_all("NA") %>% # Retirer les "NA"
      str_squish()             # Supprimer les espaces superflus
  ) %>%
  ungroup() %>%
  select(id,set,scryfall_uri,combined_cost) %>% 
  mutate(
    # filer_out = str_detect(combined_cost, "\\{[WUBRG]/[WUBRG]\\}"),
    hybrid_mana = map(str_extract_all(combined_cost, "\\{[WUBRG]/[WUBRG]\\}"),unique),
    combined_cost = str_remove_all(combined_cost, "\\{[WUBRG]/[WUBRG]\\}")
    )  %>%
   unnest_longer(hybrid_mana) %>% 
  rowwise() %>% 
    mutate( 
      combined_cost = list(c(
        paste0(combined_cost,str_extract(hybrid_mana,"\\{[WUBRG](?=/)"),"}"),
      paste0(combined_cost,"{",str_extract(hybrid_mana,"(?<=/)[WUBRG]\\}")) )
      )
              ) %>%
  ungroup() %>% 
   unnest_longer(combined_cost) %>% 
  select(-hybrid_mana) %>% 
  distinct() %>%   
  # Déterminer les couleurs basées sur les symboles dans combined_cost
  mutate(
    color_W = ifelse(str_detect(combined_cost, "W"), 1, 0),
    color_U = ifelse(str_detect(combined_cost, "U"), 1, 0),
    color_B = ifelse(str_detect(combined_cost, "B"), 1, 0),
    color_R = ifelse(str_detect(combined_cost, "R"), 1, 0),
    color_G = ifelse(str_detect(combined_cost, "G"), 1, 0)
  ) %>%
  select(-combined_cost) %>%
  left_join(Deck_color_castable_cards, by = 
              join_by(
                color_W == color_W , 
                color_B == color_B,  
                color_U == color_U ,
                color_R == color_R,
                color_G == color_G
                )
            ) %>% 
  select(-starts_with("color_"))


modern_db_join_with_castable_number_of_deck <- rbind(
  Modern_db_colors_parsing %>%   
  # Déterminer les couleurs basées sur les symboles dans combined_cost
  mutate(
    color_W = ifelse(str_detect(combined_cost, "W"), 1, 0),
    color_U = ifelse(str_detect(combined_cost, "U"), 1, 0),
    color_B = ifelse(str_detect(combined_cost, "B"), 1, 0),
    color_R = ifelse(str_detect(combined_cost, "R"), 1, 0),
    color_G = ifelse(str_detect(combined_cost, "G"), 1, 0)
  ) %>%
  select(-combined_cost) %>%
  group_by(id,set,scryfall_uri) %>%
  summarise(across(starts_with("color_"), sum), .groups = "drop") %>% 
  full_join(Deck_color_castable_cards, by = 
              join_by(
                color_W <= color_W , 
                color_B <= color_B,  
                color_U <= color_U ,
                color_R <= color_R,
                color_G <= color_G
                )
            ) %>% 
  select(-starts_with("color_")) , 
  hybride_cost_db_colors_parsing
  ) %>%
  group_by(id,set,scryfall_uri) %>%
  summarise(
    Presence_count_castable = sum(Presence_count_castable),
    winrate_count_castable = sum( winrate_count_castable),
             .groups = "drop")

```


## Color repartion  

::: {.panel-tabset .nav-pills} 

### Corlor in deck with winrates  

```{r print_color_winrate}
color_presence_plot_fun(
    df_fun_base_color = Deck_color_castable_cards_base,
    column_presence = "winrate_count_castable" # "Presence_count_castable" ,"winrate_count_castable"
  )
```

### Corlors of all deck 
```{r print_color_presence}
color_presence_plot_fun(
    df_fun_base_color = Deck_color_castable_cards_base,
    column_presence = "Presence_count_castable" # "Presence_count_castable" ,"winrate_count_castable"
  )
```
:::



```{r number_of_copy_of_each_cards_result_table_generation}
number_of_copy_of_each_cards_final_table <-  rbind(
    total_deck_total,
    Main_board_total,
    Side_board_total
  ) %>% 
    left_join(
      join_with_scryfall(
        Df_with_cardname =   .,
        cardname_col = "CardName" ,
        scry_fall_df = modern_DB_card
      ),
      by = c("CardName" = "CardName")
    ) %>%
    left_join(
      modern_db_join_with_castable_number_of_deck ,
      by = join_by(
        scry_fall_id == id
      )
    ) %>% 
    add_link_to_a_column(
      df_add_link_fun =   .,
      column_where_is_add = "link", #"link",
      link_column = "scryfall_uri",
      Card_name_col =   "CardName"         
    ) %>% 
  mutate(
    Presence_count_castable = ifelse(
      is.na(Presence_count_castable),df_export$n_deck,Presence_count_castable
      ),
    winrate_count_castable = ifelse(
      is.na(winrate_count_castable),df_export$n_winrates,winrate_count_castable
      )
    ) %>% 
    select(-scry_fall_id,-search_Link) %>% 
    mutate(set = as.factor(set),
    ) %>% 
    relocate(set,.after = CardName)  %>% 
    mutate(
      count_presence_percent = count_presence/unique(df_export$n_deck),
      Presence_count_castable = Presence_count_castable,
      Presence_castable_percent = count_presence/Presence_count_castable,
      .after = count_presence
    )  %>%
    mutate(
      count_winrate_percent = count_winrate/unique(df_export$n_winrates),
      winrate_count_castable = winrate_count_castable,
      winrate_castable_percent = count_winrate/winrate_count_castable,
      .after = count_winrate
    ) %>% 
  relocate(winrate_count_castable,.after = count_winrate_percent) %>% 
  relocate(Presence_count_castable,.after = count_presence_percent) %>% 
    mutate(
      Main_side = as.factor(Main_side) ,
      CardName = as.factor(CardName),
      Count = as.factor(Count)
    ) %>%
    # mutate(Only_count = is.na(count_winrate)) %>%
    arrange(desc(count_winrate)) %>% 
    select(
      -delta_winrate_card,
      -CI_delta_winrate_card,
      -Sign_delta_wr,
      -card_draw_diff
    ) %>% 
    rename_with(
      ~ str_replace(
        str_replace(
          str_replace(
            str_replace_all(., "_", " "),
            "Mainboard", "Main"
          ),
          "Sideboard", "Side"
        ),
        "CardName", "Card"
      )
    )
```

## Number of copy of each cards 

```{r print_number_of_copy_of_each_cards}
DT::datatable(
 number_of_copy_of_each_cards_final_table ,
  callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltips_deck_new_cards, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
",
return_filter_js()
    )
  ),
filter = "top", rownames = FALSE,
options = list(
  dom = "ltipr",
  searchCols = list(
    NULL,list(search = '["All"]'), NULL,NULL,
    list(search = '["Any"]'),
    NULL,NULL,NULL,NULL, NULL,NULL, NULL,
    NULL, # list(search = '10 ...'),
    NULL, NULL#,# NULL, NULL, NULL, NULL,      list(search = '["false"]') # NULL
  ), autoWidth = TRUE, pageLength = 25
),
escape = FALSE
) %>% 
  DT::formatPercentage(c(7,9,11,13,16
                         #,10,13
  ),digits = 1)
```











