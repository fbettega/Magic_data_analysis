---
title: "Overview of results"
---


```{r setup, include=FALSE, message = FALSE, warning = FALSE} 
library(tidyverse)
library(gt)
source("../sources/MTG_function_base_FB/global_mtg_sources.R")
source("../sources/S2_Source_mtg_new_card.R",local = TRUE)
knitr::read_chunk("../sources/S1_introduction_text.R")

params <- read_rds( "../data/intermediate_result/temp_format_encours_for_param.rds")

```


**<span style="color: red;">Please note that this document is not optimised and is difficult to read on mobile.</span>**

To access the other parts of the book on mobile, click here.
![Table Of Content location on mobile](TOC_location.png)

# Acknowledgements
Thanks to [Badaro](https://github.com/Badaro) for his data collection work and the archetype parser.  
Thanks to [Aliquanto](https://github.com/Aliquanto3) for his initial analysis, which served as an inspiration for me.  
Thanks to [Jiliac](https://github.com/Jiliac) for integrating Qonfused data and maintaining Format data.   




# Data include

This book contains data in `r params$format_param` format since `r params$date_cutoff`. If the period in question contains ban announcements, decks containing non-legal cards have been excluded, as have the associated matchups. Decks containing more than 30 copies of a single card have also been excluded. For decklist analyses, only decks valid for the format have been included (number of main deck cards > 60 and number of side cards <= 15).

```{r data_reading}
df_export <- readRDS(paste0("../data/",params$format_param,"_data_meta_en_cours.rds"))

Table_with_arch_count_and_sub_count <- df_export %>%
  select(
    # id,Week,Color,
    Valide_deck,Archetype,Base_Archetype,ReferenceArchetype_Archetype) %>% 
  mutate(across(Archetype:ReferenceArchetype_Archetype, ~ as.numeric(table(.x)[as.character(.x)]), .names = "count_{.col}")) %>% 
  group_by(Archetype,Valide_deck) %>% 
  mutate(across(Base_Archetype:ReferenceArchetype_Archetype, ~ as.numeric(table(.x)[as.character(.x)]), .names = "count_in_arch_{.col}")) %>% 
  distinct() %>% 
  arrange(desc(count_Archetype)) %>% 
  mutate(Archetype = paste0("**",Archetype,"**"," (n :",count_Archetype, ")"),
         proportion_Base_Arch_in_Arch = 
           proportion_format_fun(
             count_in_arch_Base_Archetype,
             count_Archetype
             ),
         proportion_Arch_in_Base_Arch = 
           proportion_format_fun(
             count_in_arch_Base_Archetype,
             count_Base_Archetype
             ),
          proportion_Ref_Arch_in_Arch = 
           proportion_format_fun(
             count_in_arch_ReferenceArchetype_Archetype,
             count_Archetype
             ),
         proportion_Arch_in_Ref_Arch = 
           proportion_format_fun(
             count_in_arch_ReferenceArchetype_Archetype,
             count_ReferenceArchetype_Archetype
             )
         ) %>% 
  select(
    Valide_deck,
    Archetype,
         Base_Archetype,
         ReferenceArchetype_Archetype,
         starts_with("proportion_")
         ) %>% 
  rename(Custom = Base_Archetype,
         Reference = ReferenceArchetype_Archetype
         ) %>% 
  ungroup()


```



# Principal chapter

## Metagame 
::: {.content-visible when-profile="basic"}
### [Presence archetype](2_presence_archetype.qmd)
:::


::: {.content-visible when-profile="fb"}
### Presence archetype
:::

<!---
potentiellement selecteur de deck sous contrainte en script annexe
-->

```{r, Introduction_chunk_2_Deck_analysis, results='asis'}

```



::: {.content-visible when-profile="basic"}
### [Matrix WR](4_matrix_WR.qmd)
:::


::: {.content-visible when-profile="fb"}
### Matrix WR
:::

```{r, Introduction_chunk_4_Deck_analysis, results='asis'}

```



## Deck winrate

::: {.content-visible when-profile="basic"}
### [Card win rate table](3_Card_win_rate_table.qmd)  
:::


::: {.content-visible when-profile="fb"}
### Card win rate table
:::


```{r, Introduction_chunk_3_Deck_analysis, results='asis'}

```




::: {.content-visible when-profile="basic"}
### [Cards WR models](5_Deck_analysis.qmd)
:::


::: {.content-visible when-profile="fb"}
### Cards WR models
:::


```{r, Introduction_chunk_5_Deck_analysis, results='asis'}

```


## Best performing deck

::: {.content-visible when-profile="basic"}
### [Best deck analysis](6_best_deck.qmd)  
:::


::: {.content-visible when-profile="fb"}
### Best deck analysis  
:::



```{r, Introduction_chunk_6_best_deck, results='asis'}

```


::: {.content-visible when-profile="basic"}
### [Top 8 deck](7_last_weeks_winners.qmd)
:::


::: {.content-visible when-profile="fb"}
### Top 8 deck   
:::


```{r, Introduction_chunk_7_top8, results='asis'}

```





::: {.content-visible when-profile="basic"}
## [New card](1_new_card.qmd)
:::


::: {.content-visible when-profile="fb"}
## New card   
:::

```{r, Introduction_chunk_1_newcards, results='asis'}

```


# Archetype aggregation  

For the grouping of decks, the analyses are mainly centred around 2 concepts: archetype and base archetype. Base archetypes are very close to the archetypes returned by the XXX parser. The archetypes are a personal construction to try to solve two problems:  


- giving more flexibility to predict certain decks considered unknown by the parser
- Group together decks with a small number of players that would be very close to a deck with a larger number of players.




## Predict model
5 models were trained on decks with a defined archetype over the last 6 months, or over the entire period of interest if it was longer than 6 months, with cross-validation on 5 folds. The hyper parameters of each model were chosen from a grid search. 

- C5 decision tree
- Random forest
- Elastic net regression
- KNN
- Xgboost 

Then the ‘unknown’ decks or decks with an archetype with low sample size were predicted by each model returns a probability that the deck belongs to each training archetype. The results were aggregated by averaging the probability returned by each model that a deck belonged to one of the training archetypes. For decks with an average probability greater than 0.3, they were integrated into the most likely archetype on average according to the models.



```{r Archetype_prediction_table,results='asis'}
title_table <- paste0("**Tabler summarise how the archetypes are aggregated**")

Subtitle <- paste0(
  "[Custom](https://github.com/fbettega/Modern_FB_archetype) corresponds to my definition of archetypes, also shown as *Base_archetype* in the data \n
[Reference](https://github.com/Badaro/MTGOFormatData) corresponds to Badaro definition of archetypes, also shown as *Reference_archetype* in the data 
  "
)

Table_with_arch_count_and_sub_count  %>%
  filter(Valide_deck) %>% 
  select(-Valide_deck) %>% 
  gt::gt(groupname_col = "Archetype") %>%  
  gt::text_transform(
    locations = cells_row_groups(),
    fn = function(x) {
      lapply(x, function(x) {
        gt::md(x)
      })
     }
  ) %>% 
  tab_options(row_group.as_column = TRUE) %>% 
  tab_spanner(
    label = md("**Parser**"),
    columns = c(Custom, Reference)
  )  %>% 
  tab_spanner(
    label = md("**Custom**"),
    columns = c(proportion_Base_Arch_in_Arch,proportion_Arch_in_Base_Arch)
  ) %>% 
  tab_spanner(
    label = md("**Reference**"),
    columns = c(proportion_Ref_Arch_in_Arch,proportion_Arch_in_Ref_Arch)
  ) %>% 
   cols_label(
    proportion_Base_Arch_in_Arch = md("Percent Archetype"),
    proportion_Arch_in_Base_Arch = md("Percent Sub Archetype"),
    proportion_Ref_Arch_in_Arch = md("Percent Archetype"),
    proportion_Arch_in_Ref_Arch = md("Percent Sub Archetype")
  ) %>%
  gt::cols_align(
    align = c("center"),
    columns = everything()
  ) %>% 
  gt::tab_header(
    title = gt::md(title_table),
    subtitle = gt::md(Subtitle)
  ) %>% 
  gt::tab_options(
    # column_labels.hidden = TRUE,
    table.layout = "Auto"
    )
```



```{r invalide_deck_print}
# recalculer les quatités ..... TODO
title_table_invalide <- paste0(
  "**Invalid deck (< 60 cards) Tabler summarise how the archetypes are aggregated**"
  )

Table_with_arch_count_and_sub_count  %>%
  filter(!Valide_deck) %>%
  select(-Valide_deck) %>%
  gt::gt(groupname_col = "Archetype") %>%
  gt::text_transform(
    locations = cells_row_groups(),
    fn = function(x) {
      lapply(x, function(x) {
        gt::md(x)
      })
     }
  ) %>%
  tab_options(row_group.as_column = TRUE) %>%
  tab_spanner(
    label = md("**Parser**"),
    columns = c(Custom, Reference)
  )  %>%
  tab_spanner(
    label = md("**Custom**"),
    columns = c(proportion_Base_Arch_in_Arch,proportion_Arch_in_Base_Arch)
  ) %>%
  tab_spanner(
    label = md("**Reference**"),
    columns = c(proportion_Ref_Arch_in_Arch,proportion_Arch_in_Ref_Arch)
  ) %>%
   cols_label(
    proportion_Base_Arch_in_Arch = md("Percent Archetype"),
    proportion_Arch_in_Base_Arch = md("Percent Sub Archetype"),
    proportion_Ref_Arch_in_Arch = md("Percent Archetype"),
    proportion_Arch_in_Ref_Arch = md("Percent Sub Archetype")
  ) %>%
  gt::cols_align(
    align = c("center"),
    columns = everything()
  ) %>%
  gt::tab_header(
    title = gt::md(title_table_invalide)
  ) %>%
  gt::tab_options(
    # column_labels.hidden = TRUE,
    table.layout = "Auto"
    )
```


## Proximity aggregation
If the median [jaccard](https://en.wikipedia.org/wiki/Jaccard_index) distance between 2 archetypes is smaller than the 3 quartiles of the internal distance within the archetype, these 2 archetypes will be grouped together.
The table below shows the grouped archetypes:

```{r proximity_table_print,results='asis'}
proximty_classif <- read.csv(
  paste0("../data/intermediate_result/",
         params$format_param,"_proxymity_archetype_group.csv")) 

# recalculer les quatités ..... TODO
title_table_proximity <- paste0(
  "**Proximity aggregation**"
  )

proximty_classif  %>% 
  filter(groupe) %>% 
          select(Archetype.x,
Archetype.y) %>%
  gt::gt() %>% 
   cols_label(
    Archetype.x = md("**Total archetype name**"),
    Archetype.y = md("**Base archetype name group**")
  ) %>%
  gt::cols_align(
    align = c("center"),
    columns = everything()
  ) %>%
  gt::tab_header(
    title = gt::md(title_table_proximity)
  ) %>%
  gt::tab_options(
    # column_labels.hidden = TRUE,
    table.layout = "Auto"
    )
```

