---
title: "Matchup matrix"
---

```{r setup, include=FALSE, message = FALSE, warning = FALSE} 
library(tidyverse)
library(plotly)
library(rwantshue)
# library(ggfittext)
# css: TOC.css
source("../sources/MTG_function_base_FB/global_mtg_sources.R")
source("../sources/S2_Source_mtg_new_card.R", local = TRUE)
source("../sources/sources_script_specific/S4_matrix_WR.R", local = TRUE)
params <- read_rds("../data/intermediate_result/temp_format_encours_for_param.rds")
conflicted::conflicts_prefer(dplyr::filter)
conflicted::conflicts_prefer(plotly::layout)
loaded_base_data <- readRDS(paste0("../data/", params$format_param, "_data_meta_en_cours.rds"))
# Je ne compte pas faire de matrix pour les SUB archetype pour le moment Car les sample sizes sont trop souvent ridicules a réfléchir
# Reflechir a inclusion player
#
# A reflechir :
# * WR including player perf
# * Combination

# X et Y en bilattérale
ratio_plot <- 3
# Generate different color scheme for close archetype
scheme <- iwanthue(seed = 42, force_init = TRUE) # recreate with a seed
```


```{r}
knitr::read_chunk("../sources/S1_introduction_text.R")
# Prendre en compte mieux le nombres de deck avec CI pour le best deck
```


```{r base_data_formating}
# Generate different color scheme for close archetype
df_base <- loaded_base_data %>%
  filter(Tournament != paste0(params$format_param, " League")) %>%
  group_by(Archetype) %>%
  mutate(
    Archetype_count = n()
  ) %>%
  ungroup() %>%
  group_by(Base_Archetype) %>%
  mutate(
    Base_Archetype_count = n()
  ) %>%
  ungroup() %>%
  arrange(Archetype_count)


Other_Archetype <- df_base %>%
  filter(Archetype_count < Archetype_cut_of_4 | Archetype == "Unknown") %>%
  pull(Archetype) %>%
  unique()

Other_base_Archetype <- df_base %>%
  filter(Base_Archetype_count < (Archetype_cut_of_4/2.5) | Base_Archetype == "Unknown") %>%
  pull(Base_Archetype) %>%
  unique()




df_base_all_data <- df_base %>%
  mutate(
    Archetype = ifelse(Archetype %in% Other_Archetype,
      "Other",
      Archetype
    ),
    Base_Archetype = ifelse(Base_Archetype %in% Other_base_Archetype,
      "Other",
      Base_Archetype
    ),
  ) %>%
  mutate(
    Archetype =
      factor(Archetype,
        level = unique(.$Archetype)
      ),
    Rank = as.numeric(
      factor(Archetype,
        level = rev(unique(.$Archetype))
      )
    ),
    Base_Archetype =
      factor(Base_Archetype,
        level = unique(.$Base_Archetype)
      )
  )


```


```{r winrate_matrix_computation}
Df_win_rate_matrix_simple_unnest_matchup <- df_base_all_data %>%
  rowwise() %>%
  filter(!is.null(Matchups)) %>%
  unnest_longer(Matchups) %>%
  unnest_wider(Matchups, names_sep = "_")

tournament_with_matchup <- unique(Df_win_rate_matrix_simple_unnest_matchup$TournamentFile)


Df_win_rate_matrix_correct_maccro_archetype_oppo <- Df_win_rate_matrix_simple_unnest_matchup %>%
  select(TournamentFile, Matchups_Opponent, Matchups_OpponentArchetype) %>%
  distinct(TournamentFile, Matchups_Opponent, Matchups_OpponentArchetype) %>%
  rename(Matchups_Opponent_basedArchetype = Matchups_OpponentArchetype) %>%
  group_by(TournamentFile, Matchups_Opponent) %>%
  left_join(
    Df_win_rate_matrix_simple_unnest_matchup %>%
      select(TournamentFile, Player, Archetype, Base_Archetype),
    by = c(
      "TournamentFile" = "TournamentFile",
      "Matchups_Opponent" = "Player"
    )
  ) %>%
  rename(
    Matchups_OpponentArchetype = Archetype,
    Matchups_OpponentBase_Archetype = Base_Archetype
  ) %>%
  mutate(
    Matchups_OpponentArchetype = as.character(Matchups_OpponentArchetype),
    Matchups_OpponentBase_Archetype = as.character(Matchups_OpponentBase_Archetype)
  ) %>%
  distinct()


Df_win_rate_matrix_base <- Df_win_rate_matrix_simple_unnest_matchup %>%
  select(-Matchups_OpponentArchetype) %>%
  inner_join(
    Df_win_rate_matrix_correct_maccro_archetype_oppo,
    by = c(
      "TournamentFile",
      "Matchups_Opponent"
    )
  ) %>%
  select(
    id, Meta, Week, Date, Archetype, Base_Archetype, Player,
    Matchups_Opponent, Matchups_OpponentArchetype, Matchups_OpponentBase_Archetype, Matchups_Wins,
    Matchups_Losses, Matchups_Draws, matches
  ) %>%
  mutate(
    # Matchups_Opponent_basedArchetype = Matchups_OpponentArchetype,
    Matchups_OpponentArchetype = ifelse(Matchups_OpponentArchetype %in% Other_Archetype,
      "Other",
      Matchups_OpponentArchetype
    ),
    Matchups_OpponentBase_Archetype = ifelse(Matchups_OpponentBase_Archetype %in% Other_base_Archetype,
      "Other",
      Matchups_OpponentBase_Archetype
    ),
    Matchups_OpponentArchetype = factor(Matchups_OpponentArchetype, levels = rev(levels(Archetype))),
    Matchups_OpponentBase_Archetype = factor(Matchups_OpponentBase_Archetype, levels = rev(levels(Base_Archetype)))
  )
```




```{r winrate_matrix_arch}
Df_win_rate_matrix_summarise <- win_rate_matrix_maker(
  df_fun = Df_win_rate_matrix_base,
  Archetype_type = "Archetype" # "Archetype" , "Base_Archetype"
)


Df_win_rate_matrix_format <- Df_win_rate_matrix_summarise %>%
  mutate(
    number_format_games = paste0("n = ", number_of_games, " [", Matchups_Wins, "-", Matchups_Losses, "]"),
    number_format_matches = paste0("n = ", number_of_matches, " [", Win_matches, "-", (number_of_matches - Win_matches), "]"),
    CI_WR_format_matches = paste0(round(WR_matches * 100, 1), "%", formating_CI(WR_matches, CI_WR_matches, round_val = 1, limit = c(0, 1))),
    CI_WR_format_games = paste0(round(WR_games * 100, 1), "%", formating_CI(WR_games, CI_WR_games, round_val = 1, limit = c(0, 1)))
  ) %>%
  mutate(
    CI_WR_sign_diff_0_games = CI_WR_sign_games != "0",
    CI_WR_sign_diff_0_matches = CI_WR_sign_matches != "0"
  )
```


```{r winrate_matrix_base_arch}
Df_win_rate_matrix_base_arch_summarise <- win_rate_matrix_maker(
  df_fun = Df_win_rate_matrix_base,
  Archetype_type = "Base_Archetype" # "Archetype" , "Base_Archetype"
)


Df_win_rate_matrix_base_arch_format <- Df_win_rate_matrix_base_arch_summarise %>%
  mutate(
    number_format_games = paste0("n = ", number_of_games, " [", Matchups_Wins, "-", Matchups_Losses, "]"),
    number_format_matches = paste0("n = ", number_of_matches, " [", Win_matches, "-", (number_of_matches - Win_matches), "]"),
    CI_WR_format_matches = paste0(round(WR_matches * 100, 1), "%", formating_CI(WR_matches, CI_WR_matches, round_val = 1, limit = c(0, 1))),
    CI_WR_format_games = paste0(round(WR_games * 100, 1), "%", formating_CI(WR_games, CI_WR_games, round_val = 1, limit = c(0, 1)))
  ) %>%
  mutate(
    CI_WR_sign_diff_0_games = CI_WR_sign_games != "0",
    CI_WR_sign_diff_0_matches = CI_WR_sign_matches != "0"
  ) %>%
  rename(
    Archetype = Base_Archetype,
    Matchups_OpponentArchetype = Matchups_OpponentBase_Archetype
  )
# %>%
#   filter(number_of_matches > 5)
# a <- table(Df_win_rate_matrix_base$Archetype,Df_win_rate_matrix_base$Base_Archetype) %>%
#   as.data.frame() %>%
#   filter(Freq > 0)


```


* All data : `r format(as.Date(min(Df_win_rate_matrix_simple_unnest_matchup$Date)), "%d-%m-%Y")` to `r format(as.Date(max(Df_win_rate_matrix_simple_unnest_matchup$Date)), format = "%d/%m/%Y")`. 
* Duration `r round(max(difftime(Sys.Date(),Df_win_rate_matrix_simple_unnest_matchup$Date,units = "weeks")),0)` weeks.
* Include meta : `r unique(Df_win_rate_matrix_simple_unnest_matchup$Meta)`.  
* Number of tournament : `r n_distinct(Df_win_rate_matrix_simple_unnest_matchup$TournamentFile)`
* With a total of `r nrow(Df_win_rate_matrix_base)` rounds of magic
* `r nrow(Df_win_rate_matrix_base %>% distinct(Archetype,Matchups_OpponentArchetype))` different matchup for archetypes.  
* `r nrow(Df_win_rate_matrix_base %>%   distinct(Base_Archetype,Matchups_OpponentBase_Archetype))` different matchup for base archetypes.  



```{r, Introduction_chunk_4_Deck_analysis, results='asis'}
```



Plot below show presence of each archetype in the matrix

```{r presence_plot}
#| column: screen
plot_presence_modify_for_matchup_matrix_fun(
     df_base = Df_win_rate_matrix_base,
    color_scheme =  scheme$hex(
  length(levels(Df_win_rate_matrix_base$Base_Archetype))
),
    plot_scaling = 2.25
)
```


# Archetype

For example, a score of 2-1 counts as 1 game won.

## Matrix
::: {.panel-tabset .nav-pills}
### Total matrix  

```{r res_arch_matrix}
plot_win_rate_mat(Df_win_rate_matrix_format, "matches")
```

### Only significative CI

```{r only_signif_mat_arch}
plot_win_rate_mat(Df_win_rate_matrix_format, "matches",
  # simplify_tab_ratio = 0.5,
  only_signif = TRUE
) %>% bslib::card(full_screen = TRUE)
```
:::

## CI plot 
```{r res_ci_plot_arch}
# <!-- #| column: screen -->
Archetype_ci_df_plot <- CI_plot_prepare_df_fun(Df_win_rate_matrix_format) %>%
  mutate(
    Archetype = factor(
      Archetype,
      levels = .$Archetype[order(.$Arch_winrate_matches + .$CI_Arch_winrate_matches)])
  ) %>% 
  arrange(Archetype) %>% 
  mutate(Archetype_count = paste0(number_of_matches ,"(",number_of_games ,")")            )

arch_ci_plot_final <- Generate_CI_plot_fun(
    df_ci_fun_param = Archetype_ci_df_plot,
    win_rate_fun_par = "Arch_winrate_matches",
    CI_fun_par = "CI_Arch_winrate_matches",
    Arch_or_base_arch = "Archetype" #"Base_Archetype" "Archetype"
)

arch_ci_plot_final
```



# Base archetype

For example, a score of 2-1 counts as 1 game won.

## Matrix
::: {.panel-tabset .nav-pills}
### Total matrix  

```{r res_base_arch_matrix}
plot_win_rate_mat(Df_win_rate_matrix_base_arch_format, "matches")
```

### Only significative CI

```{r base_arch_only_signif_mat_arch}
plot_win_rate_mat(Df_win_rate_matrix_base_arch_format, "matches",
  # simplify_tab_ratio = 0.5,
  only_signif = TRUE
) %>% bslib::card(full_screen = TRUE)
```

:::


## CI plot 
```{r res_ci_plot_base_arch}
# <!-- #| column: screen -->
base_Archetype_ci_df_plot <- CI_plot_prepare_df_fun(Df_win_rate_matrix_base_arch_format) %>%
    mutate(
        Archetype = factor(
            Archetype,
            levels = .$Archetype[order(.$Arch_winrate_matches + .$CI_Arch_winrate_matches)]),
    ) %>% 
    arrange(Archetype ) %>% 
  mutate(Archetype_count = paste0(number_of_matches ,"(",number_of_games ,")")            )


base_arch_ci_plot_final <- Generate_CI_plot_fun(
    df_ci_fun_param = base_Archetype_ci_df_plot,
    win_rate_fun_par = "Arch_winrate_matches",
    CI_fun_par = "CI_Arch_winrate_matches",
    Arch_or_base_arch = "Archetype" #"Base_Archetype" "Archetype"
)

base_arch_ci_plot_final
```





#  Best deck 


Attempt to multiply the win rate matrix (WR or CI lower bound) by the weekly presence of the decks in order to calculate it, then divide by the total number of decks in order to calculate an average expected winrate for a given field.

Only decks with a CI are considered.

## Archetype 
```{r best_deck_computation}
Df_Expected_number_of_win_by_week <- df_base_all_data %>%
  group_by(Archetype, Week) %>%
  summarise(n = n(), .groups = "drop") %>%
  rename(Matchups_OpponentArchetype = Archetype) %>%
  full_join(
    Df_win_rate_matrix_summarise %>%
      filter(
        CI_WR_matches != 0,
        !is.na(CI_WR_matches)
      ) %>%
      mutate(lower_ci_bound = WR_matches + CI_WR_matches) %>%
      select(
        Archetype, WR_matches,
        lower_ci_bound,
        Matchups_OpponentArchetype
      ),
    by = c("Matchups_OpponentArchetype")
  ) %>%
  mutate(
    lower_ci_bound = replace(
      replace(lower_ci_bound, lower_ci_bound < 0, 0),
      lower_ci_bound > 1, 1
    ),
    lower_ci_bound = ifelse(Matchups_OpponentArchetype == Archetype,
      0.5, lower_ci_bound
    ),
    expected_win_WR = WR_matches * n,
    expected_win_lower_ci = lower_ci_bound * n
  ) %>%
  drop_na() %>%
  ungroup()



Df_expected_of_week_sum <- rbind(
  Df_Expected_number_of_win_by_week %>%
    mutate(Week = as.character(Week)) %>%
    group_by(Archetype, Week) %>%
    summarise(
      S_wr = sum(expected_win_WR), # /sum(n),
      S_ci = sum(expected_win_lower_ci), # / sum(n),
      .groups = "drop"
    ) %>%
    distinct(),
  Df_Expected_number_of_win_by_week %>%
    group_by(Archetype) %>%
    summarise(
      S_wr = sum(expected_win_WR), # / sum(n),
      S_ci = sum(expected_win_lower_ci), # / sum(n),
      Week = "All",
      .groups = "drop"
    ) %>%
    distinct()
) %>%
  mutate(
    Week = factor(
      Week,
      levels = c(1:max(df_base_all_data$Week), "All")
    )
  ) %>% 
  arrange(Week)


Df_wide_expected_of_week_sum <- Df_expected_of_week_sum %>%
  arrange(Week) %>%
  pivot_wider(
    names_from = Week,
    values_from = c(S_wr, S_ci)
  )
```




```{r spagheti_plot_arch_compute}
Presence_for_best_deck_plot <- rbind(
  Df_Expected_number_of_win_by_week %>%
    distinct(Matchups_OpponentArchetype, Week, n),
  Df_Expected_number_of_win_by_week %>%
    distinct(Matchups_OpponentArchetype, Week, n) %>%
    group_by(Matchups_OpponentArchetype) %>% summarise(
      n = sum(n),
      Week = "All",
      .groups = "drop"
    )
) %>%
  mutate(
    Week = factor(
      Week,
      levels = c(1:max(Df_Expected_number_of_win_by_week$Week), "All")
    )
  ) %>%
  group_by(Week) %>%
  mutate(
    Week_deck_number = sum(n),
    presence_percent = n / sum(n),
    join_week = as.character(Week)
  ) %>% 
  rename(
    Archetype = Matchups_OpponentArchetype,
    Archetype_percent = presence_percent,
    Count_arch = n
    ) %>% 
  left_join(df_base_all_data %>% group_by(Week) %>% 
  summarise(
    Date = min(Date)
            ) %>% 
    mutate(Week = as.character(Week)),
  by = join_by(join_week == Week)
  ) %>% 
  select(-join_week)

plot_archetype_spaghetti <- function_plot_spaghetti_plot(  
  df_fun_spaghetti_plot = Presence_for_best_deck_plot,
  scheme_color_sheme_fun  = scheme,
  Arch_or_base_arch = "Archetype" , #"Base_Archetype" "Archetype"
  hide_treshold = 0.025,
  count_arch_var = "Count_arch" # "Count_base_arch" "Count_arch",
  # ratio_plot_fun = ratio_plot
  )
```


```{r, results='asis'}
if(n_distinct(Presence_for_best_deck_plot$Week) >= 15) pander::pandoc.p("::: {.column-screen}")
```

```{r print_spagheti_plot_arch}
plot_archetype_spaghetti %>%
  plotly::layout(legend = list(
    orientation = "h",
    y = 1.1,
    title = list(text = "")
  )) %>% bslib::card(full_screen = TRUE)

```

```{r, results='asis'}
if(n_distinct(Presence_for_best_deck_plot$Week) >= 15) pander::pandoc.p(":::")
```


::: {.panel-tabset .nav-pills}
### Confidence intervalle lower bound
```{r best_deck_using_ci_res}
DT::datatable(
  Df_wide_expected_of_week_sum %>%
    select(Archetype, starts_with("S_ci_")) %>%
    rename_with(~ str_replace(., "S_ci_", "Week ")) %>% 
            arrange(desc(`Week All`)) %>% 
    select(Archetype,`Week All`,everything()),
  filter = "top", rownames = FALSE,
  callback = DT::JS(
    #         paste0(
    #         "var tips = ['",paste0(tooltips_deck_base,collapse = "','"),"'],
    #     header = table.columns().header();
    # for (var i = 0; i < tips.length; i++) {
    #   $(header[i]).attr('title', tips[i]);
    # }
    # ",
    return_filter_js()
    # )
  ),
  options = list(dom = "ltipr", autoWidth = TRUE, pageLength = nrow(Df_wide_expected_of_week_sum)),
  caption = htmltools::tags$caption(
    style = "caption-side: top; text-align: center; color:black;  font-size:200% ;",
    "Table : Best Archetype using Confidence intervalle lower bound"
  )
) %>%
  DT::formatRound(
    columns = 2:ncol(
      Df_wide_expected_of_week_sum %>%
        select(Archetype, starts_with("S_ci_"))
    ),
    digits = 0
  )
```




### Average Win rate

```{r best_using_average_res}
DT::datatable(
  Df_wide_expected_of_week_sum %>%
    select(Archetype, starts_with("S_wr_")) %>%
    rename_with(~ str_replace(., "S_wr_", "Week ")) %>% 
        arrange(desc(`Week All`)) %>% 
    select(Archetype,`Week All`,everything()),
  filter = "top", rownames = FALSE,
  callback = DT::JS(
    return_filter_js()
  ),
  options = list(dom = "ltipr", autoWidth = TRUE, pageLength = nrow(Df_wide_expected_of_week_sum)),
  caption = htmltools::tags$caption(
    style = "caption-side: top; text-align: center; color:black;  font-size:200% ;",
    "Table : Archetype deck using Win rate"
  )
) %>%
  DT::formatRound(
    columns = 2:ncol(
      Df_wide_expected_of_week_sum %>%
        select(Archetype, starts_with("S_wr_"))
    ),
    digits = 0
  )
```

:::






## Base Archetype 
```{r best_deck_base_arch_computation}

Df_Base_Archetype_Expected_number_of_win_by_week <- df_base_all_data %>%
  group_by(Base_Archetype, Week) %>%
  summarise(n = n(), .groups = "drop") %>%
  rename(Matchups_OpponentBase_Archetype = Base_Archetype) %>%
  full_join(
    Df_win_rate_matrix_base_arch_summarise %>%
      filter(
        CI_WR_matches != 0,
        !is.na(CI_WR_matches)
      ) %>%
      mutate(lower_ci_bound = WR_matches + CI_WR_matches) %>%
      select(
        Base_Archetype, WR_matches,
        lower_ci_bound,
        Matchups_OpponentBase_Archetype
      ),
    by = c("Matchups_OpponentBase_Archetype")
  ) %>%
  mutate(
    lower_ci_bound = replace(
      replace(lower_ci_bound, lower_ci_bound < 0, 0),
      lower_ci_bound > 1, 1
    ),
    lower_ci_bound = ifelse(Matchups_OpponentBase_Archetype == Base_Archetype,
      0.5, lower_ci_bound
    ),
    expected_win_WR = WR_matches * n,
    expected_win_lower_ci = lower_ci_bound * n
  ) %>%
  drop_na() %>%
  ungroup()



Df_Base_Archetype_expected_of_week_sum <- rbind(
  Df_Base_Archetype_Expected_number_of_win_by_week %>%
    mutate(Week = as.character(Week)) %>%
    group_by(Base_Archetype, Week) %>%
    summarise(
      S_wr = sum(expected_win_WR), # /sum(n),
      S_ci = sum(expected_win_lower_ci), # / sum(n),
      .groups = "drop"
    ) %>%
    distinct(),
  Df_Base_Archetype_Expected_number_of_win_by_week %>%
    group_by(Base_Archetype) %>%
    summarise(
      S_wr = sum(expected_win_WR), # / sum(n),
      S_ci = sum(expected_win_lower_ci), # / sum(n),
      Week = "All",
      .groups = "drop"
    ) %>%
    distinct()
) %>%
  mutate(
    Week = factor(
      Week,
      levels = c(1:max(df_base_all_data$Week), "All")
    )
  )


Df_Base_Archetype_wide_expected_of_week_sum <- Df_Base_Archetype_expected_of_week_sum %>%
  arrange(Week) %>%
  pivot_wider(
    names_from = Week,
    values_from = c(S_wr, S_ci)
  )
```



```{r spagheti_plot_base_arch_compute}
Presence_Base_Archetype_for_best_deck_plot <- rbind(
  Df_Base_Archetype_Expected_number_of_win_by_week %>%
    distinct(Matchups_OpponentBase_Archetype, Week, n),
  Df_Base_Archetype_Expected_number_of_win_by_week %>%
    distinct(Matchups_OpponentBase_Archetype, Week, n) %>%
    group_by(Matchups_OpponentBase_Archetype) %>% summarise(
      n = sum(n),
      Week = "All",
      .groups = "drop"
    )
) %>%
  mutate(
    Week = factor(
      Week,
      levels = c(1:max(Df_Base_Archetype_Expected_number_of_win_by_week$Week), "All")
    )
  ) %>%
  group_by(Week) %>%
  mutate(
    Week_deck_number = sum(n),
    presence_percent = n / sum(n),
    join_week = as.character(Week)
  ) %>% 
  rename(
    Base_Archetype = Matchups_OpponentBase_Archetype,
    Base_Archetype_percent = presence_percent,
    Count_base_arch = n
    ) %>% 
  left_join(df_base_all_data %>% group_by(Week) %>% 
  summarise(
    Date = min(Date)
            ) %>% 
    mutate(Week = as.character(Week)),
  by = join_by(join_week == Week)
  ) %>% 
  mutate(Date = ifelse(is.na(Date) & Week == "All",Sys.Date(),Date)) %>% 
  select(-join_week)
```

```{r}
plot_Base_Archetype_spaghetti <- function_plot_spaghetti_plot(  
  df_fun_spaghetti_plot = Presence_Base_Archetype_for_best_deck_plot,
  scheme_color_sheme_fun  = scheme,
  Arch_or_base_arch = "Base_Archetype" , #"Base_Archetype" "Archetype"
  hide_treshold = 0.025,
    count_arch_var = "Count_base_arch" # "Count_base_arch" "Count_arch",
  # ratio_plot_fun = ratio_plotc
  )

```



```{r, results='asis'}
if(n_distinct(Presence_Base_Archetype_for_best_deck_plot$Week) >= 15) pander::pandoc.p("::: {.column-screen}")
```


```{r spagheti_plot_base_arch_print}
# <!-- #| column: screen -->

plot_Base_Archetype_spaghetti %>%
  plotly::layout(legend = list(
    orientation = "h",
    y = 1.1,
    title = list(text = "")
  )) %>% bslib::card(full_screen = TRUE)
```


```{r, results='asis'}
if(n_distinct(Presence_Base_Archetype_for_best_deck_plot$Week) >= 15) pander::pandoc.p(":::")
```


::: {.panel-tabset .nav-pills}
### Confidence intervalle lower bound
```{r best_deck_base_arch_using_ci_res}
DT::datatable(
  Df_Base_Archetype_wide_expected_of_week_sum %>%
    select(Base_Archetype, starts_with("S_ci_")) %>%
    rename_with(~ str_replace(., "S_ci_", "Week ")) %>% 
            arrange(desc(`Week All`)) %>% 
    select(Base_Archetype,`Week All`,everything()),
  filter = "top", rownames = FALSE,
  callback = DT::JS(
    #         paste0(
    #         "var tips = ['",paste0(tooltips_deck_base,collapse = "','"),"'],
    #     header = table.columns().header();
    # for (var i = 0; i < tips.length; i++) {
    #   $(header[i]).attr('title', tips[i]);
    # }
    # ",
    return_filter_js()
    # )
  ),
  options = list(dom = "ltipr", autoWidth = TRUE, pageLength = nrow(Df_Base_Archetype_wide_expected_of_week_sum)),
  caption = htmltools::tags$caption(
    style = "caption-side: top; text-align: center; color:black;  font-size:200% ;",
    "Table : Best base archetype using Confidence intervalle lower bound"
  )
) %>%
  DT::formatRound(
    columns = 2:ncol(
      Df_Base_Archetype_wide_expected_of_week_sum %>%
        select(Base_Archetype, starts_with("S_ci_"))
    ),
    digits = 0
  )
```


### Average Win rate

```{r best_deck_base_arch_using_average_res}
DT::datatable(
  Df_Base_Archetype_wide_expected_of_week_sum %>%
    select(Base_Archetype, starts_with("S_wr_")) %>%
    rename_with(~ str_replace(., "S_wr_", "Week ")) %>% 
        arrange(desc(`Week All`)) %>% 
    select(Base_Archetype,`Week All`,everything()),
  filter = "top", rownames = FALSE,
  callback = DT::JS(
    return_filter_js()
  ),
  options = list(dom = "ltipr", autoWidth = TRUE, pageLength = nrow(Df_Base_Archetype_wide_expected_of_week_sum)),
  caption = htmltools::tags$caption(
    style = "caption-side: top; text-align: center; color:black;  font-size:200% ;",
    "Table : Best Base Archetype using Win rate"
  )
) %>%
  DT::formatRound(
    columns = 2:ncol(
      Df_Base_Archetype_wide_expected_of_week_sum %>%
        select(Base_Archetype, starts_with("S_wr_"))
    ),
    digits = 0
  )
```

:::

