---
title: "Matchup matrix"
---

```{r setup, include=FALSE, message = FALSE, warning = FALSE} 

library("rjson")
library(lubridate)
library(kableExtra)
library(tidyverse)
library(plotly)
library("rwantshue")
library(ggfittext)
# css: TOC.css
source("../sources/S2_Source_mtg_new_card.R",local = TRUE)
source("../sources/sources_script_specific/S4_matrix_WR.R", local = TRUE)
params <- read_rds( "../data/intermediate_result/temp_format_encours_for_param.rds")
conflicted::conflicts_prefer(dplyr::filter)
conflicted::conflicts_prefer(plotly::layout)
loaded_base_data <- readRDS(paste0("../data/",params$format_param,"_data_meta_en_cours.rds"))
# Je ne compte pas faire de matrix pour les SUB archetype pour le moment Car les sample sizes sont trop souvent ridicules a réfléchir
# Reflechir a inclusion player
#
# A reflechir :
# * WR matrix a l'échelle du match
# * WR including player perf
# * Combination

# X et Y en bilattérale
```



```{r}
knitr::read_chunk("../sources/S1_introduction_text.R")
# Prendre en compte mieux le nombres de deck avec CI pour le best deck
```






```{r}
# Generate different color scheme for close archetype


df_base <- loaded_base_data %>%
  filter(Tournament != paste0(params$format_param," League")) %>%
  group_by(Archetype) %>%
  mutate(
    Archetype_count = n()
  ) %>%
  arrange(Archetype_count)




Other_Archetype <- df_base %>%
  filter(Archetype_count < Archetype_cut_of_4 | Archetype == "Unknown") %>%
  pull(Archetype) %>%
  unique()


df_base_all_data <- df_base %>%
  mutate(
    Archetype = ifelse(Archetype %in% Other_Archetype,
      "Other",
      Archetype
    )
  ) %>%
  mutate(
    Archetype =
      factor(Archetype,
        level = unique(.$Archetype)
      ),
    Rank = as.numeric(
      factor(Archetype,
        level = rev(unique(.$Archetype))
      )
    ),
    Base_Archetype =

      factor(Base_Archetype,
        level = unique(.$Base_Archetype)
      )
  )
```






* All data : `r format(as.Date(min(df_base$Date)), "%d-%m-%Y")` to `r format(as.Date(max(df_base$Date)), format = "%d/%m/%Y")`. 
* Duration `r round(max(difftime(Sys.Date(),df_base$Date,units = "weeks")),0)` weeks.
* Include meta : `r unique(df_base$Meta)`.


```{r, Introduction_chunk_4_Deck_analysis, results='asis'}

```




```{r}
Df_win_rate_matrix_simple_unnest_matchup <- df_base_all_data %>%
  rowwise() %>%
  filter(!is.null(Matchups)) %>%
  unnest_longer(Matchups) %>%
  unnest_wider(Matchups, names_sep = "_")


tournament_with_matchup <- unique(Df_win_rate_matrix_simple_unnest_matchup$TournamentFile)


Df_win_rate_matrix_correct_maccro_archetype_oppo <- Df_win_rate_matrix_simple_unnest_matchup %>% 
  select(TournamentFile,Matchups_Opponent,Matchups_OpponentArchetype) %>% 
  distinct(TournamentFile,Matchups_Opponent,Matchups_OpponentArchetype) %>% 
  rename(Matchups_Opponent_basedArchetype = Matchups_OpponentArchetype) %>% 
  group_by(TournamentFile,Matchups_Opponent) %>% 
  left_join(
    Df_win_rate_matrix_simple_unnest_matchup %>% 
      select(TournamentFile,Player,Archetype,Base_Archetype),
    by = c("TournamentFile" = "TournamentFile",
           "Matchups_Opponent" = "Player"
           )
            ) %>% 
  rename(Matchups_OpponentArchetype = Archetype)  %>% 
  distinct()








Df_win_rate_matrix_base <-  Df_win_rate_matrix_simple_unnest_matchup %>% 
  select(-Matchups_OpponentArchetype) %>% 
inner_join(Df_win_rate_matrix_correct_maccro_archetype_oppo %>%
  select(-Base_Archetype),
  by = c(
    "TournamentFile",
    "Matchups_Opponent"
           )
  ) %>%
  select(
    id, Meta, Week, Date, Archetype, Player,
    Matchups_Opponent, Matchups_OpponentArchetype, Matchups_Wins,
    Matchups_Losses, Matchups_Draws, matches
  ) %>%
  mutate(
    Matchups_Opponent_basedArchetype = Matchups_OpponentArchetype,
    Matchups_OpponentArchetype = Archetype_agreger(Matchups_OpponentArchetype),
    Matchups_OpponentArchetype = ifelse(Matchups_OpponentArchetype %in% Other_Archetype,
      "Other",
      Matchups_OpponentArchetype
    ),
    Matchups_OpponentArchetype = factor(Matchups_OpponentArchetype, levels = rev(levels(Archetype)))
  )

```


```{r some_check_chunk}
if(!all(
  Df_win_rate_matrix_correct_maccro_archetype_oppo$Matchups_Opponent_basedArchetype == 
  Df_win_rate_matrix_correct_maccro_archetype_oppo$Base_Archetype)){
  print("problem in base archetype in matchup") 
} 



```


```{r}
Df_win_rate_matrix_summarise <- Df_win_rate_matrix_base %>%
  select(
    Archetype, Matchups_OpponentArchetype,
    Matchups_Wins, Matchups_Losses
  ) %>%
  mutate(
    Result = Matchups_Wins > Matchups_Losses,
    Draw = Matchups_Wins == Matchups_Losses
  ) %>%
  group_by(
    Archetype,
    Matchups_OpponentArchetype
  ) %>%
  summarise(
    number_of_matches = n() - sum(Draw),
    Win_matches = sum(Result),
    number_of_games = sum(Matchups_Wins) + sum(Matchups_Losses),
    Matchups_Wins = sum(Matchups_Wins),
    Matchups_Losses = sum(Matchups_Losses),
    .groups = "drop"
  ) %>%
  mutate(
    WR_games = winrate_1_data(Matchups_Wins, Matchups_Losses),
    CI_WR_games = CI_prop(WR_games, number_of_games),
    CI_WR_sign_games = factor(
      ifelse(CI_WR_games == 0, "0",
        ifelse(
          ((WR_games - 0.5) + (CI_WR_games)) > 0,
          "+",
          ifelse(
            ((WR_games - 0.5) - (CI_WR_games)) < 0,
            "-", "0"
          )
        )
      ),
      levels = c("+", "0", "-")
    ),
    WR_matches = winrate_1_data(Win_matches, (number_of_matches - Win_matches)),
    CI_WR_matches = CI_prop(WR_matches, number_of_matches),
    CI_WR_sign_matches = factor(
      ifelse(CI_WR_matches == 0, "0",
        ifelse(
          ((WR_matches - 0.5) + (CI_WR_matches)) > 0,
          "+",
          ifelse(
            ((WR_matches - 0.5) - (CI_WR_matches)) < 0,
            "-", "0"
          )
        )
      ),
      levels = c("+", "0", "-")
    ),
  )


Df_win_rate_matrix_format <- Df_win_rate_matrix_summarise %>%
  mutate(
    number_format_games = paste0("n = ", number_of_games, " [", Matchups_Wins, "-", Matchups_Losses, "]"),
    number_format_matches = paste0("n = ", number_of_matches, " [", Win_matches, "-", (number_of_matches - Win_matches), "]"),
    CI_WR_format_matches = paste0(round(WR_matches * 100, 1), "%", formating_CI(WR_matches, CI_WR_matches, round_val = 1, limit = c(0, 1))),
    CI_WR_format_games = paste0(round(WR_games * 100, 1), "%", formating_CI(WR_games, CI_WR_games, round_val = 1, limit = c(0, 1)))
  ) %>%
  mutate(
    CI_WR_sign_diff_0_games = CI_WR_sign_games != "0",
    CI_WR_sign_diff_0_matches = CI_WR_sign_matches != "0"
  )
```



# Matrice utilisant le nombres de manches

Par exemple un socre de 2-1 compte comme 3 manches

## Total matrix

```{r}
plot_win_rate_mat(Df_win_rate_matrix_format, "games", 
                  size_multiplier =2.8) %>%
  bslib::card(full_screen = TRUE)
```

## Only significative CI

```{r}
plot_win_rate_mat(Df_win_rate_matrix_format, "games",
  # simplify_tab_ratio = 0.1,
  only_signif = TRUE, size_multiplier =2.8
) %>%
  bslib::card(full_screen = TRUE)
```

## Only more than 20 matches

```{r}
plot_win_rate_mat(Df_win_rate_matrix_format, "games",
  Cut_of_number_of_data = 20,
  simplify_tab_ratio = 0.5,
  size_multiplier =2.8
) %>% bslib::card(full_screen = TRUE)
```






# Matrice utilisant le nombres de partie

Par exemple un socre de 2-1 compte comme 1 partie gagné.


## Total matrix  

```{r}
plot_win_rate_mat(Df_win_rate_matrix_format, "matches", size_multiplier =2.8)
```


## Only significative CI

```{r}
plot_win_rate_mat(Df_win_rate_matrix_format, "matches",
  # simplify_tab_ratio = 0.5,
  only_signif = TRUE, size_multiplier =2.8
) %>% bslib::card(full_screen = TRUE)
```


## Only more than 20 matches

```{r}
plot_win_rate_mat(Df_win_rate_matrix_format, "matches",
  Cut_of_number_of_data = 20,
  simplify_tab_ratio = 0.5,
  size_multiplier =2.8
) %>% bslib::card(full_screen = TRUE)
```






#  Best deck 

Tentative de multiplier la matrice de win rate (WR ou borne inférieure du CI) par la présence hebdomadaire des decks afin de calculer diviser par le nombre total de decks afin de calculer un expected winrate moyen pour un field donnée. 


Ne sont considéré que les decks avec un CI
```{r}
Df_Expected_number_of_win_by_week <- df_base_all_data %>%
  group_by(Archetype, Week) %>%
  summarise(n = n(), .groups = "drop") %>%
  rename(Matchups_OpponentArchetype = Archetype) %>%
  full_join(
    Df_win_rate_matrix_summarise %>%
      filter(
        CI_WR_matches != 0,
        !is.na(CI_WR_matches)
      ) %>%
      mutate(lower_ci_bound = WR_matches + CI_WR_matches) %>%
      select(
        Archetype, WR_matches,
        lower_ci_bound,
        Matchups_OpponentArchetype
      ),
    by = c("Matchups_OpponentArchetype")
  ) %>%
  mutate(
    lower_ci_bound = replace(
      replace(lower_ci_bound, lower_ci_bound < 0, 0),
      lower_ci_bound > 1, 1
    ),
    lower_ci_bound = ifelse(Matchups_OpponentArchetype == Archetype,
      0.5, lower_ci_bound
    ),
    expected_win_WR = WR_matches * n,
    expected_win_lower_ci = lower_ci_bound * n
  ) %>%
  drop_na() %>%
  ungroup()



Df_expected_of_week_sum <- rbind(
  Df_Expected_number_of_win_by_week %>%
    mutate(Week = as.character(Week)) %>%
    group_by(Archetype, Week) %>%
    summarise(
      S_wr = sum(expected_win_WR), #/sum(n),
      S_ci = sum(expected_win_lower_ci), #/ sum(n),
      .groups = "drop"
    ) %>%
    distinct(),
  Df_Expected_number_of_win_by_week %>%
    group_by(Archetype) %>%
    summarise(
      S_wr = sum(expected_win_WR),# / sum(n),
      S_ci = sum(expected_win_lower_ci),# / sum(n),
      Week = "All",
      .groups = "drop"
    ) %>%
    distinct()
) %>%
  mutate(
    Week = factor(
      Week,
      levels = c(1:max(df_base_all_data$Week), "All")
    )
  )


Df_wide_expected_of_week_sum <- Df_expected_of_week_sum %>%
  arrange(Week) %>%
  pivot_wider(
    names_from = Week,
    values_from = c(S_wr, S_ci)
  )
```



```{r}
Presence_for_best_deck_plot <- rbind(
  Df_Expected_number_of_win_by_week %>%
    distinct(Matchups_OpponentArchetype, Week, n),
  Df_Expected_number_of_win_by_week %>%
    distinct(Matchups_OpponentArchetype, Week, n) %>%
    group_by(Matchups_OpponentArchetype) %>% summarise(
      n = sum(n),
      Week = "All",
      .groups = "drop"
    )
) %>%
  mutate(
    Week = factor(
      Week,
      levels = c(1:max(Df_Expected_number_of_win_by_week$Week), "All")
    )
  ) %>%
  group_by(Week) %>%
  mutate(
    presence_percent = n / sum(n)
  )

scheme <- iwanthue(seed = 42, force_init = TRUE)
# Plot color scales
colors_scales_presence <- scheme$hex(
  length(levels(Presence_for_best_deck_plot$Matchups_OpponentArchetype))
)


plot_archetype_spaghetti <- (
  ggplot(
  Presence_for_best_deck_plot,
  aes(
    x = Week,
    y = presence_percent,
    color = Matchups_OpponentArchetype,
    text = paste(
      "Archetype: ", Matchups_OpponentArchetype, "<br>", # Archetype name
      "n : ", n, " (", round(presence_percent * 100, 2), " %)", "<br>",
      sep = ""
    ),
    group = 1
  )
) +
  geom_line() +
  geom_point() +
  scale_color_manual(
    values = colors_scales_presence
  ) +
  ylab("Archetype presence") +
  scale_y_continuous(labels = function(x) scales::percent(x)) +
  theme(
    axis.title = element_blank(),
    panel.border = element_blank()
  )
) %>%
  ggplotly(tooltip = c("text"), height = (450 * 2.5), width = (850 * 2.5)) %>%
  plotly::layout(legend = list(
    orientation = "h",
    y = 1.1,
    title = list(text = "")
  ))
```





```{r}
#| column: screen
plot_archetype_spaghetti %>% bslib::card(full_screen = TRUE)
```


```{r}
DT::datatable(
  Df_wide_expected_of_week_sum %>%
    select(Archetype, starts_with("S_ci_")) %>%
    rename_with(~ str_replace(., "S_ci_", "Week ")),
  filter = "top", rownames = FALSE,
  callback = DT::JS(
    #         paste0(
    #         "var tips = ['",paste0(tooltips_deck_base,collapse = "','"),"'],
    #     header = table.columns().header();
    # for (var i = 0; i < tips.length; i++) {
    #   $(header[i]).attr('title', tips[i]);
    # }
    # ",
    onfly_filter_js
    # )
  ),
  options = list(dom = "ltipr", autoWidth = TRUE, pageLength = nrow(Df_wide_expected_of_week_sum)),
  caption = htmltools::tags$caption(
    style = "caption-side: top; text-align: center; color:black;  font-size:200% ;",
    "Table : Best deck using Confidence intervalle lower bound"
  )
) %>%
  DT::formatRound(
    columns = 2:ncol(
      Df_wide_expected_of_week_sum %>%
        select(Archetype, starts_with("S_ci_"))
    ),
    digits = 2
  )
```






```{r}
#| column: screen
plot_archetype_spaghetti %>% bslib::card(full_screen = TRUE)
```




```{r}
DT::datatable(
  Df_wide_expected_of_week_sum %>%
    select(Archetype, starts_with("S_wr_")) %>%
    rename_with(~ str_replace(., "S_wr_", "Week ")),
  filter = "top", rownames = FALSE,
  callback = DT::JS(
    #         paste0(
    #         "var tips = ['",paste0(tooltips_deck_base,collapse = "','"),"'],
    #     header = table.columns().header();
    # for (var i = 0; i < tips.length; i++) {
    #   $(header[i]).attr('title', tips[i]);
    # }
    # ",
    onfly_filter_js
    # )
  ),
  options = list(dom = "ltipr", autoWidth = TRUE, pageLength = nrow(Df_wide_expected_of_week_sum)),
  caption = htmltools::tags$caption(
    style = "caption-side: top; text-align: center; color:black;  font-size:200% ;",
    "Table : Best deck using Win rate"
  )
) %>%
  DT::formatRound(
    columns = 2:ncol(
      Df_wide_expected_of_week_sum %>%
        select(Archetype, starts_with("S_wr_"))
    ),
    digits = 2
  )
```


