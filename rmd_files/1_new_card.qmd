---
title: "New cards analysis"
---

```{r setup, include=FALSE, message = FALSE, warning = FALSE} 
# Note globale

# probablement reformater le code des CI plus présentations en un fonction renvoyant X colonnes WR upper and lower

# Reflechir a passer en shiny
#
# ajouter une colonne nombre de deck
library(binom)
library("rjson")
library(kableExtra)
library(tidyverse)
library(scryr)
source("../S2_Source_mtg_new_card.R",local = TRUE)
conflicted::conflicts_prefer(dplyr::filter)
refetch_cards_new_set <- FALSE
```





```{r}
# Fonction that count cards in given arhcetype

Count_cards_in_decklist <- function(df, Name_of_card_of_interest, colname_deck_list) {
  if (colname_deck_list == "Mainboard") {
    expected_min_size <- 60
  } else {
    expected_min_size <- 0
  }

  df_new_card_base <- df %>%
    unnest_longer(!!colname_deck_list) %>%
    unnest_wider(!!colname_deck_list, names_sep = "_") %>%
    group_by(id) %>%
    # a filtrer mes uniquement pour le main deck
    mutate(Number_of_cards := sum(!!rlang::sym(paste0(colname_deck_list, "_Count")))) %>%
    filter(Number_of_cards >= expected_min_size) %>%
    filter(!!rlang::sym(paste0(colname_deck_list, "_CardName")) %in% Name_of_card_of_interest) %>%
    mutate(!!rlang::sym(paste0(colname_deck_list, "_CardName")) := Card_agregueur(
      !!rlang::sym(paste0(colname_deck_list, "_CardName")),
      fetch = TRUE,
      Tron = TRUE,
      snow = TRUE,
      surveil = TRUE,
      shock = TRUE
    )) %>%
    group_by(id, !!rlang::sym(paste0(colname_deck_list, "_CardName"))) %>%
    mutate(
      !!rlang::sym(paste0(colname_deck_list, "_Count")) :=
        sum(!!rlang::sym(paste0(colname_deck_list, "_Count")))
    ) %>%
    distinct()


  df_new_card <- df_new_card_base %>%
    group_by(
      Archetype,
      Archetype_count,
      !!rlang::sym(paste0(colname_deck_list, "_CardName")),
      !!rlang::sym(paste0(colname_deck_list, "_Count"))
    ) %>%
    summarise(
      count = n(),
      .groups = "drop"
    ) %>%
    mutate(!!rlang::sym(paste0(colname_deck_list, "_Count")) := as.character(!!rlang::sym(paste0(colname_deck_list, "_Count"))))


  df_new_card_total <- df_new_card %>%
    group_by(
      Archetype,
      !!rlang::sym(paste0(colname_deck_list, "_CardName"))
    ) %>%
    filter(n() > 1) %>%
    group_by(
      Archetype,
      Archetype_count,
      !!rlang::sym(paste0(colname_deck_list, "_CardName"))
    ) %>%
    summarise(
      !!rlang::sym(paste0(colname_deck_list, "_Count")) := "Any",
      count = sum(count),
      .groups = "drop"
    ) %>%
    rbind(df_new_card) %>%
    arrange(
      desc(Archetype_count), Archetype, !!rlang::sym(paste0(colname_deck_list, "_CardName")),
      !!rlang::sym(paste0(colname_deck_list, "_Count"))
    ) %>%
    select(-Archetype_count)

  return(df_new_card_total)
}
```






```{r}
# Count_and_winrates_cards_in_decklist(
#   df_export,
#   card_of_interest$name, "Mainboard"
# )

# Fonction that count + win rates cards in given arhcetype
Count_and_winrates_cards_in_decklist <- function(df, Name_of_card_of_interest, colname_deck_list, filter_archetype_count = 10) {
  winrate_by_archetype <- df %>%
    filter(!is.na(Wins)) %>%
    filter(!is.null(!!colname_deck_list)) %>%
    filter(Archetype_count > filter_archetype_count) %>%
    group_by(Archetype) %>%
    summarise(
      Wins_total = sum(Wins),
      Losses_total = sum(Losses),
      Draws_total = sum(Draws)
    )
  # browser()

  if (colname_deck_list == "Mainboard") {
    expected_min_size <- 60
  } else {
    expected_min_size <- 0
  }
  df_new_card_base <- df %>%
    filter(!is.na(Wins)) %>%
    filter(!is.null(!!colname_deck_list)) %>%
    filter(Archetype_count > filter_archetype_count) %>%
    unnest_longer(!!colname_deck_list) %>%
    unnest_wider(!!colname_deck_list, names_sep = "_") %>%
    group_by(id) %>%
    # a filtrer mes uniquement pour le main deck
    mutate(Number_of_cards := sum(!!rlang::sym(paste0(colname_deck_list, "_Count")))) %>%
    filter(Number_of_cards >= expected_min_size) %>%
    filter(!!rlang::sym(paste0(colname_deck_list, "_CardName")) %in% Name_of_card_of_interest) %>%
    mutate(!!rlang::sym(paste0(colname_deck_list, "_CardName")) := Card_agregueur(
      !!rlang::sym(paste0(colname_deck_list, "_CardName")),
      fetch = TRUE,
      Tron = TRUE,
      snow = TRUE,
      surveil = TRUE,
      shock = TRUE
    )) %>%
    group_by(id, !!rlang::sym(paste0(colname_deck_list, "_CardName"))) %>%
    mutate(
      !!rlang::sym(paste0(colname_deck_list, "_Count")) :=
        sum(!!rlang::sym(paste0(colname_deck_list, "_Count")))
    ) %>%
    distinct() %>%
    inner_join(winrate_by_archetype, by = "Archetype")




  df_new_card <- df_new_card_base %>%
    group_by(
      Archetype,
      Archetype_count,
      !!rlang::sym(paste0(colname_deck_list, "_CardName")),
      !!rlang::sym(paste0(colname_deck_list, "_Count")),
      Wins_total,
      Losses_total,
      Draws_total # ,
      # .drop = FALSE
    ) %>%
    summarise(
      count = n(),
      Wins_card = sum(Wins),
      Losses_card = sum(Losses),
      Draws_card = sum(Draws),
      .groups = "drop"
    ) %>%
    mutate(!!rlang::sym(paste0(colname_deck_list, "_Count")) := as.character(!!rlang::sym(paste0(colname_deck_list, "_Count"))))


  df_new_card_total <- df_new_card %>%
    group_by(
      Archetype,
      !!rlang::sym(paste0(colname_deck_list, "_CardName"))
    ) %>%
    # je laisse le doublon dans le cas d'une seul carte pour faciliter les filters
    # filter(n() > 1) %>%
    group_by(
      Archetype,
      Archetype_count,
      !!rlang::sym(paste0(colname_deck_list, "_CardName")),
      Wins_total,
      Losses_total,
      Draws_total
    ) %>%
    summarise(
      !!rlang::sym(paste0(colname_deck_list, "_Count")) := "Any",
      count = sum(count),
      Wins_card = sum(Wins_card),
      Losses_card = sum(Losses_card),
      Draws_card = sum(Draws_card),
      .groups = "drop"
    ) %>%
    rbind(df_new_card) %>%
    filter((Wins_card + Losses_card) > 10) %>%
    arrange(
      desc(Archetype_count), Archetype, !!rlang::sym(paste0(colname_deck_list, "_CardName")),
      !!rlang::sym(paste0(colname_deck_list, "_Count"))
    ) # %>% select(-Archetype_count)


  Win_rate_df <- df_new_card_total %>%
    group_by(
      Archetype,
      Archetype_count,
      !!rlang::sym(paste0(colname_deck_list, "_CardName")),
      !!rlang::sym(paste0(colname_deck_list, "_Count")),
      count
    ) %>%
    summarise(
      card_win_rate = winrate_1_data(Wins_card, Losses_card),
      CI_card_win_rate = CI_prop(card_win_rate, (Wins_card + Losses_card)),
      not_card_win_rate = winrate_2_data(
        Wins_total, Losses_total,
        Wins_card, Losses_card
      ),
      delta_winrate_card = card_win_rate - not_card_win_rate,
      CI_delta_winrate_card = CI_2_prop(
        card_win_rate,
        not_card_win_rate,
        (Wins_card + Losses_card),
        (
          (Wins_total - Wins_card) + (Losses_total - Losses_card)
        )
      ),
      card_draw_diff = Draw_diff_2_data(
        Wins_card, Draws_card, Losses_card,
        Wins_total, Draws_total, Losses_total
      ),
      .groups = "drop"
    )


  Win_rate_df_final <- Win_rate_df %>%
    mutate(
      Sign_delta_wr = factor(ifelse(
        (delta_winrate_card + CI_delta_winrate_card) > 0,
        "+",
        ifelse(
          (delta_winrate_card - CI_delta_winrate_card) < 0,
          "-", "0"
        )
      ), levels = c("+", "0", "-")),
      CI_card_win_rate = formating_CI(card_win_rate, CI_card_win_rate),
      card_win_rate = round(card_win_rate * 100, 2),
      CI_delta_winrate_card = formating_CI(delta_winrate_card, CI_delta_winrate_card),
      delta_winrate_card = round(delta_winrate_card * 100, 2),
      card_draw_diff = round(card_draw_diff * 100, 2),
      count_winrate = count
    ) %>%
    select(
      Archetype, count_winrate,
      !!rlang::sym(paste0(colname_deck_list, "_CardName")),
      !!rlang::sym(paste0(colname_deck_list, "_Count")),
      card_win_rate, CI_card_win_rate,
      delta_winrate_card, CI_delta_winrate_card, Sign_delta_wr,
      card_draw_diff
    )


  return(Win_rate_df_final)
}
```


```{r data_reading }
df_export <- readRDS("../data/data_meta_en_cours.rds") %>%
      # include filter bad deck
  filter(Valide_deck) %>% 
  mutate(
    Deck_winrate = Wins / (Losses + Wins)
  ) %>%
  group_by(Archetype) %>% 
  mutate(
    Archetype_count = n()
  ) %>% 
    ungroup()


modern_DB_card <- read_csv("../data/DBcarte_modern.csv")
```


```{r}
set_code_help_search <- modern_DB_card %>% 
  arrange(desc(released_at)) %>%
  select(released_at,set) %>% 
  distinct(set,.keep_all = TRUE)

## all code to pull cards new to moder
# if (refetch_cards_new_set) {
#   cards_in_set_of_interest <- scry_cards(
#     paste0("e:",set_code_help_search$set %>% head(7),collapse = " or ")
#     # "e:mh3"
#     )
#   cards_in_set_of_interest_name <- cards_in_set_of_interest$name
#   write_rds(cards_in_set_of_interest_name,"../data/intermediate_result/list_of_new_cards")
# } else {
#   cards_in_set_of_interest_name <- read_rds("../data/intermediate_result/list_of_new_cards")
# }
```



```{r set_choose }
# Meta_of_interest <- c("PostMurdersAtKarlovManor")
exclude_cards <- c(
  "Flooded Strand","Polluted Delta",
  "Wooded Foothills","Bloodstained Mire", 
  "Windswept Heath", "Flusterstorm" 
)


card_of_interest <- modern_DB_card %>%
  filter(
    set %in% (set_code_help_search$set %>% head(7)),
     !reprint,
    # name %in% cards_in_set_of_interest_name,
    # name %notin% exclude_cards,
    # !str_detect(type_line,"Basic Land — ")
         ) %>% 
  mutate(
    name = str_remove(name,"\\s? //.+")
         )
```




```{r}
tooltips_deck_new_cards <- c(
  "Deck Archetype agregated",
  "Card name",
  "Number of copies of the cards",
  "Number of decks with the card (exact number of copies)",
  "Number of decks include in the win rate computation of the card (exact number of copies)",
  "Win rate of the card",
  "95 % Confidence intervale of card win rate",
  'Win rate of the card vs deck with different count for the card.For example, if "Count" = 4, the win rate of 4 copies minus the win rate of 0, 1, 2 or 3 copies.',
  "95 % Confidence intervale of card win rate vs other",
  "The confidence interval is different from 0. + means a strictly positive confidence interval - means a strictly negative confidence interval,  0 means a confidence interval covering 0.",
  "Boolean for card with no possible win rate inclusion (only league)"
)
```


```{r js_function}
onfly_filter_js <- c(r"{
function onlyUnique(value, index, self) {
return self.indexOf(value) === index;
};
var table_header = table.table().header();
var column_nodes = $(table_header).find('tr:nth-child(2) > td');
var input_nodes = $(column_nodes).find('input.form-control');
for (let i = 0; i < input_nodes.length; i++){
data_type_attr = $(input_nodes[i]).closest('td').attr('data-type');
if (data_type_attr == 'factor'){
$(input_nodes[i]).on('input propertychange', function(){
if (typeof unique_values !== 'undefined'){
selection_content = $(input_nodes[i]).closest('td').find('div.selectize-dropdown-content');
var content_str = '';
for (let j = 0; j < unique_values.length; j++){
content_str = content_str.concat('<div data-value="', unique_values[j],'" data-selectable="" class="option">', unique_values[j], '</div>')
}
selection_content[0].innerHTML = content_str;
}
})
}
}
column_nodes.on('click', function(){
setTimeout(function(){
for (let i = 0; i < column_nodes.length; i++){
data_type_attr = $(column_nodes[i]).attr('data-type');
if (data_type_attr == 'factor'){
selection_div = $(column_nodes[i]).find('div.selectize-input');
if($(selection_div).hasClass('dropdown-active')){
values = table.column(i, {pages: 'all', search: 'applied'}).data();
unique_values = Array.from(values.filter(onlyUnique));
selection_content = $(column_nodes[i]).find('div.selectize-dropdown-content');
var content_str = '';
for (let j = 0; j < unique_values.length; j++){
content_str = content_str.concat('<div data-value="', unique_values[j],'" data-selectable="" class="option">', unique_values[j], '</div>')
}
selection_content[0].innerHTML = content_str;
}
}
}
}, 50);
})
}")
```









# Winrates des nouvelles cartes



Inclues les leagues (5-0) pour le compte des nouvelles cartes même si aucun winrate

```{r data_select_with_new_card_main_L}

df_main_unnest <- df_export %>%
  unnest_longer(Mainboard) %>%
  unnest_wider(Mainboard, names_sep = "_")

df_new_card_main_base <- df_main_unnest %>%
  filter(Mainboard_CardName %in% card_of_interest$name)
```




```{r}
win_rate_main_board <- Count_and_winrates_cards_in_decklist(
  df_export,
  card_of_interest$name, "Mainboard"
)

General_presence_mainboard <- Count_cards_in_decklist(
  df_export, card_of_interest$name, "Mainboard"
) %>%
  rename(count_presence = count)
```



```{r}
win_rate_side_board <- Count_and_winrates_cards_in_decklist(
  df_export, card_of_interest$name, "Sideboard"
)

General_presence_sideboard <- Count_cards_in_decklist(
  df_export, card_of_interest$name, "Sideboard"
) %>%
  rename(count_presence = count)
```



```{r html_new_cards_table}
# 
# Bulk_new_cards_show_html <- Bulk_new_cards  %>% 
#   left_join(
#     card_of_interest %>%
#       select(name,rarity,scryfall_uri),
#     by = c("CardName" = "name")
#     ) %>% 
#   mutate(
#     rarity = as.factor(rarity),
#     CardName = paste0('<a href=\"',scryfall_uri,'">',CardName,'</a>'),
#     CardName = as.factor(CardName)
#          ) %>% 
#   select(-scryfall_uri) %>% 
#   arrange(desc(Count)) 
# 
# 
# 
# 
# DT::datatable(Bulk_new_cards_show_html, escape = FALSE,
#   filter = "top", rownames = FALSE,
#   options = list(dom = "ltipr", autoWidth = TRUE, pageLength = 25))
```



## Mainboard_card
```{r}
DT::datatable(
  full_join(
    General_presence_mainboard,
    win_rate_main_board,
    by = c("Archetype", "Mainboard_CardName", "Mainboard_Count")
  ) %>%
    mutate(
      Archetype = factor(
        Archetype,
        levels = unique(General_presence_mainboard$Archetype)
      ),
      Mainboard_CardName = as.factor(Mainboard_CardName),
      Mainboard_Count = as.factor(Mainboard_Count)
    ) %>%
    mutate(Only_count = is.na(count_winrate)) %>%
    rename_with(
      ~ str_replace(
        str_replace(
          str_replace(
            str_replace_all(., "_", " "),
            "Mainboard", "Main"
          ),
          "Sideboard", "Side"
        ),
        "CardName", "Card"
      )
    ),
  callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltips_deck_new_cards, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
",
      onfly_filter_js
    )
  ),
  filter = "top", rownames = FALSE,
  options = list(dom = "ltipr", autoWidth = TRUE, pageLength = 25)
)
```



## sideboard_card
```{r}
DT::datatable(
  full_join(
    General_presence_sideboard,
    win_rate_side_board,
    by = c("Archetype", "Sideboard_CardName", "Sideboard_Count")
  ) %>%
    mutate(
      Archetype = factor(Archetype,
        levels = unique(General_presence_sideboard$Archetype)
      ),
      Sideboard_CardName = as.factor(Sideboard_CardName),
      Sideboard_Count = as.factor(Sideboard_Count)
    ) %>%
    mutate(Only_count = is.na(count_winrate)) %>%
    rename_with(
      ~ str_replace(
        str_replace(
          str_replace(
            str_replace_all(., "_", " "),
            "Mainboard", "Main"
          ),
          "Sideboard", "Side"
        ),
        "CardName", "Card"
      )
    ),
  callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltips_deck_new_cards, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
",
      onfly_filter_js
    )
  ),
  filter = "top", rownames = FALSE,
  options = list(dom = "ltipr", autoWidth = TRUE, pageLength = 25)
)
```














