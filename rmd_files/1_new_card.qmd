---
title: "New cards analysis"
---

```{r setup, include=FALSE, message = FALSE, warning = FALSE} 
# Note globale
# probablement reformater le code des CI plus présentations en un fonction renvoyant X colonnes WR upper and lower
# Reflechir a passer en shiny
#
# ajouter une colonne nombre de deck
library(binom)
library("rjson")
library(kableExtra)
library(tidyverse)
library(scryr)


source("../sources/S2_Source_mtg_new_card.R", local = TRUE)
source("../sources/sources_script_specific/S1new_cards.R", local = TRUE)
conflicted::conflicts_prefer(dplyr::filter)
params <- read_rds( "../data/intermediate_result/temp_format_encours_for_param.rds")
refetch_cards_new_set <- FALSE
```




```{r data_reading }


df_export <- readRDS(paste0("../data/",params$format_param,"_data_meta_en_cours.rds")) %>%
  # include filter bad deck
  filter(Valide_deck) %>%
  mutate(
    Deck_winrate = Wins / (Losses + Wins)
  ) %>%
  group_by(Archetype) %>%
  mutate(
    Archetype_count = n()
  ) %>%
  ungroup()


# formatmodif
modern_DB_card <- read_csv("../data/mtg_data/DBcarte_oracle.csv",show_col_types = FALSE) %>% 
   filter(
     !!sym(paste0("legalities.",tolower(params$format_param))) == "legal"
     )
 
```


```{r}
set_code_help_search <- modern_DB_card %>%
  arrange(desc(released_at)) %>%
  select(released_at, set) %>%
  distinct(set, .keep_all = TRUE)

## all code to pull cards new to moder
# if (refetch_cards_new_set) {
#   cards_in_set_of_interest <- scry_cards(
#     paste0("e:",set_code_help_search$set %>% head(7),collapse = " or ")
#     # "e:mh3"
#     )
#   cards_in_set_of_interest_name <- cards_in_set_of_interest$name
#   write_rds(cards_in_set_of_interest_name,"../data/intermediate_result/list_of_new_cards")
# } else {
#   cards_in_set_of_interest_name <- read_rds("../data/intermediate_result/list_of_new_cards")
# }
```



```{r set_choose }
# Meta_of_interest <- c("PostMurdersAtKarlovManor")
exclude_cards <- c(
  "Flooded Strand", "Polluted Delta",
  "Wooded Foothills", "Bloodstained Mire",
  "Windswept Heath", "Flusterstorm"
)


card_of_interest <- modern_DB_card %>%
  filter(
    set %in% (set_code_help_search$set %>% head(5)),
    !reprint,
    # name %in% cards_in_set_of_interest_name,
    # name %notin% exclude_cards,
    # !str_detect(type_line,"Basic Land — ")
  ) %>%
  mutate(
    name = str_remove(name, "\\s? //.+")
  )
```




```{r}
tooltips_deck_new_cards <- c(
  "Deck Archetype agregated",
  "Card name",
  "Number of copies of the cards",
  "Number of decks with the card (exact number of copies)",
  "Number of decks include in the win rate computation of the card (exact number of copies)",
  "Win rate of the card",
  "95 % Confidence intervale of card win rate",
  'Win rate of the card vs deck with different count for the card.For example, if "Count" = 4, the win rate of 4 copies minus the win rate of 0, 1, 2 or 3 copies.',
  "95 % Confidence intervale of card win rate vs other",
  "The confidence interval is different from 0. + means a strictly positive confidence interval - means a strictly negative confidence interval,  0 means a confidence interval covering 0.",
  "Boolean for card with no possible win rate inclusion (only league)"
)
```








```{r}
win_rate_main_board <- Count_and_winrates_cards_in_decklist(
  df_export,
  card_of_interest$name, 
  "Mainboard"
)


General_presence_mainboard <- Count_cards_in_decklist(
  df_export, card_of_interest$name, 
  "Mainboard"
) %>%
  rename(count_presence = count)

```



```{r}
win_rate_side_board <- Count_and_winrates_cards_in_decklist(
  df_export, card_of_interest$name, "Sideboard"
)

General_presence_sideboard <- Count_cards_in_decklist(
  df_export, card_of_interest$name, "Sideboard"
) %>%
  rename(count_presence = count)
```



```{r}
win_rate_main_total <- Count_and_winrates_cards_in_decklist(
  df_export %>% 
    mutate(
      Archetype = "All",
      Archetype_count = 100
      ),
  card_of_interest$name, 
  "All"
)

General_presence_total <- Count_cards_in_decklist(
  df_export %>% 
    mutate(Archetype = "All"), 
  card_of_interest$name,
  "All"
) %>%
  rename(count_presence = count) %>% 
  group_by(Archetype, CardName, Count) %>% 
  # a verif
  summarise(count_presence = sum(count_presence),.groups = "drop")

```


# Total cards
```{r}
DT::datatable(
  full_join(
    win_rate_main_total,
    General_presence_total,
    by = c("Archetype", "CardName", "Count")
  ) %>%
  inner_join(
    card_of_interest %>% 
      select(name,set),
    by = join_by(
      CardName == name
    )
  ) %>%
    relocate(set,.after = CardName) %>% 
    mutate(
      count_presence = ifelse(
        is.na(count_presence),count_winrate,count_presence),
      set = as.factor(set),
      CardName = as.factor(CardName),
      Count = as.factor(Count)
    ) %>%
    relocate(count_presence,.after = count_winrate) %>% 
    mutate(Only_count = is.na(count_winrate)) %>%
    arrange(desc(count_winrate)) %>%
    rename_with(
      ~ str_replace(
        str_replace(
          str_replace(
            str_replace_all(., "_", " "),
            "Mainboard", "Main"
          ),
          "Sideboard", "Side"
        ),
        "CardName", "Card"
      )
    ) %>% 
    select(-Archetype),
  callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltips_deck_new_cards, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
",
      return_filter_js()
    )
  ),
  filter = "top", rownames = FALSE,
  options = list(
    dom = "ltipr",
    searchCols = list(
      NULL, NULL,NULL,NULL,
      list(search = '["Any"]'),
      NULL,NULL,
       # list(search = '10 ...'),
      NULL, NULL, NULL, NULL, NULL, NULL, list(search = '["false"]') # NULL
    ), autoWidth = TRUE, pageLength = 25
  )
 ) %>%  
  DT::formatPercentage(c(8,10,13),digits = 1)
```



# Mainboard_card
```{r}
DT::datatable(
  full_join(
    General_presence_mainboard,
    win_rate_main_board,
    by = c("Archetype", "Mainboard_CardName", "Mainboard_Count")
  ) %>%
  inner_join(
    card_of_interest %>% 
      select(name,set),
    by = join_by(
      Mainboard_CardName == name
    )
  ) %>%
    relocate(set,.after = Mainboard_CardName) %>% 
    mutate(
      count_presence = ifelse(
        is.na(count_presence),count_winrate,count_presence),
      Archetype = factor(
        Archetype,
        levels = unique(General_presence_mainboard$Archetype)
      ),
      set = as.factor(set),
      Mainboard_CardName = as.factor(Mainboard_CardName),
      Mainboard_Count = as.factor(Mainboard_Count)
    ) %>%
    mutate(Only_count = is.na(count_winrate)) %>%
    arrange(desc(count_winrate)) %>%
    rename_with(
      ~ str_replace(
        str_replace(
          str_replace(
            str_replace_all(., "_", " "),
            "Mainboard", "Main"
          ),
          "Sideboard", "Side"
        ),
        "CardName", "Card"
      )
    ) ,
  callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltips_deck_new_cards, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
",
      return_filter_js()
    )
  ),
  filter = "top", rownames = FALSE,
  options = list(
    dom = "ltipr",
    searchCols = list(
      NULL, NULL, NULL,
      list(search = '["Any"]'),
      NULL,NULL, NULL,
      NULL, # list(search = '10 ...'),
      NULL, NULL, NULL, NULL, NULL, NULL, list(search = '["false"]') # NULL
    ), autoWidth = TRUE, pageLength = 25
  )
) %>% 
  DT::formatPercentage(c(9,11,14),digits = 1)
```



# sideboard_card
```{r}
DT::datatable(
  full_join(
    General_presence_sideboard,
    win_rate_side_board,
    by = c("Archetype", "Sideboard_CardName", "Sideboard_Count")
  ) %>%
  inner_join(
    card_of_interest %>% 
      select(name,set),
    by = join_by(
      Sideboard_CardName == name
    )
  ) %>%
    relocate(set,.after = Sideboard_CardName) %>%
    mutate(
      count_presence = ifelse(
        is.na(count_presence),count_winrate,count_presence),
      Archetype = factor(Archetype,
        levels = unique(General_presence_sideboard$Archetype)
      ),
      set = as.factor(set),
      Sideboard_CardName = as.factor(Sideboard_CardName),
      Sideboard_Count = as.factor(Sideboard_Count)
    ) %>%
    mutate(Only_count = is.na(count_winrate)) %>%
    arrange(
      desc(count_winrate)) %>%
    rename_with(
      ~ str_replace(
        str_replace(
          str_replace(
            str_replace_all(., "_", " "),
            "Mainboard", "Main"
          ),
          "Sideboard", "Side"
        ),
        "CardName", "Card"
      )
    ) 
    ,
  callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltips_deck_new_cards, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
",
      return_filter_js()
    )
  ),
  filter = "top", rownames = FALSE,
  options = list(
    dom = "ltipr",
    searchCols = list(
      NULL, NULL, NULL,
      list(search = '["Any"]'),
      NULL,NULL, NULL,
      NULL, # list(search = '10 ...'),
      NULL, NULL, NULL, NULL, NULL, NULL, list(search = '["false"]') # NULL
    ), autoWidth = TRUE, pageLength = 25
  )
) %>% 
  DT::formatPercentage(c(9,11,14),digits = 1)
```
