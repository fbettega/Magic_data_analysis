---
title: "Deck analysis"
---

```{r setup, include=FALSE, message = FALSE, warning = FALSE} 
library(pander)
library("rjson")
library(tidyverse)
conflicted::conflicts_prefer(dplyr::filter)
conflicted::conflicts_prefer(dplyr::lag)
conflicted::conflicts_prefer(purrr::discard)
source("../sources/S2_Source_mtg_new_card.R",local = TRUE)

# loaded_base_data <- readRDS("data/data_meta_en_cours.rds")

modern_DB_card <- read_csv("../data/mtg_data/DBcarte_modern.csv")

# sample size minimum pour etre un groupe


Land_modern <- modern_DB_card %>%
  filter(str_detect(type_line, "Land|land")) %>%
  # Remove dfc land exept dfc land // land
  filter(
    !str_detect(
      type_line,
      "(?<!Land )// Land"
    )
  ) %>%
  {
    . ->> tmp
  } %>%
  filter(str_detect(name, ".+ //")) %>%
  mutate(name = str_remove(name, " // .+")) %>%
  rbind(tmp)

rm(tmp)



df_export <- readRDS("../data/data_meta_en_cours.rds") %>%
      # include filter bad deck
  filter(Valide_deck) %>% 
  mutate(
    Deck_winrate = winrate_1_data(Wins, Losses)
  ) %>%
  mutate(
    Archetype_count = n()
  ) %>%
  filter(Archetype != "Unknown")




# a reflechir car pour le moment bloque les regroupement
 #  min(50, 
 # sum(unique(df_export$Archetype_count))*2/100 )

```

```{r}
knitr::read_chunk("../sources/S2_Source_mtg_new_card.R")
```


# Deck analysis 


```{r, Introduction_chunk_5_Deck_analysis, results='asis'}

```



```{r}
# Manque visual représentation of deck

# Projet detection automatiques des cartes nested par exemple : felidar et sahelli  dans l'idéal devrait détecter zulaport et bloodartist

# check with codetools::checkUsage(f) and all fun
```



```{r function}
findIntRuns <- function(run) {
  run <- sort(run)
  rundiff <- c(1, diff(run))
  difflist <- split(run, cumsum(rundiff != 1))
  unlist(lapply(difflist, function(x) {
    if (length(x) %in% 1:2) as.character(x) else paste0(x[1], "-", x[length(x)])
  }), use.names = FALSE)
}

name_list_of_df_with_arch <- function(list) {
  names(list) <- lapply(list, function(x) {
    as.character(x$Archetype[1])
  }) %>% unlist()

  return(list)
}

name_list_of_model_with_string <- function(list, string) {
  names(list) <- string
  return(list)
}





format_model_list <- function(model_list) {
  model_clean <- lapply(model_list, function(x) {
    
    if(is.null(x$Model_any)){
      Model_any_encours <- NULL
      }else{
    Model_any_encours <- x$Model_any %>%
      gtsummary::tbl_regression(exponentiate = TRUE) %>%
      gtsummary::bold_labels() %>%
      gtsummary::add_n(location = "level") %>%
      gtsummary::modify_spanning_header(
        c(stat_n, estimate,
          #ci
          conf.low, p.value) ~
          paste0(
            "**", x$Model_any$Archetype, " N :",
            sum(x$Model_any$data$Wins + x$Model_any$data$Losses),
            "**"
          )
      )
    }
    if(is.null(x$Model_count)){
      Model_count_encours <- NULL
      }else{
    Model_count_encours <- x$Model_count %>%
      gtsummary::tbl_regression(exponentiate = TRUE) %>%
      gtsummary::bold_labels() %>%
      gtsummary::add_n(location = "level") %>%
      gtsummary::modify_spanning_header(
        c(stat_n, estimate, 
          #ci
          conf.low, p.value) ~
          paste0(
            "**", x$Model_count$Archetype, " N :",
            sum(x$Model_count$data$Wins + x$Model_count$data$Losses),
            "**"
          )
      )
      }
    return(
      list(
      Model_any = Model_any_encours,
      Model_count = Model_count_encours
    ))
  })

  return(model_clean)
}






# Function that create model for based cards

model_base_var_count_cards_fun <- function(df_fun, cols_fun) {
  model_based_fun <- lapply(
    unique(df_fun$Archetype),
    function(x) {
      df_model <- df_fun %>%
        select(-Join_main_count) %>%
        filter(Archetype == x) %>%
        ungroup() %>%
        filter(!is.na(!!rlang::sym(paste0(cols_fun, "_CardName")))) %>%
        rowwise() %>%
        mutate(!!rlang::sym(paste0(cols_fun, "_Count")) := paste0(findIntRuns(as.numeric(unlist(str_split(!!rlang::sym(paste0(cols_fun, "_Count")), "/")))), collapse = "/")) %>%
        ungroup() %>%
        pivot_wider(
          names_from = !!rlang::sym(paste0(cols_fun, "_CardName")),
          values_from = !!rlang::sym(paste0(cols_fun, "_Count")),
          values_fill = NA
        ) %>%
        mutate(
          # Groupe les rares manquant <50 avec le groupe le plus larges probablement a réfléchir
          across(
            -1,
            ~ ifelse(is.na(.),
                     names(sort(table(.),
                                decreasing = TRUE
                     ))[1],
                     .
            )
          )
        ) %>%
        select(-Archetype, -Player, -id, -Archetype_count, -Draws) %>%
        mutate(
          # Choose most common level as references
          across(
            where(is.character),
            ~ fct_infreq(as.factor(.))
          )
        )
      
      model_base_card_var_count_tot_fun <- df_fun %>%
        select(-Join_main_count) %>%
        filter(Archetype == x) %>%
        ungroup() %>%
        filter(!is.na(!!rlang::sym(paste0(cols_fun, "_CardName")))) %>%
        rowwise() %>%
        mutate(!!rlang::sym(paste0(cols_fun, "_Count")) := paste0(findIntRuns(as.numeric(unlist(str_split(!!rlang::sym(paste0(cols_fun, "_Count")), "/")))), collapse = "/")) %>%
        ungroup() %>%
        pivot_wider(
          names_from = !!rlang::sym(paste0(cols_fun, "_CardName")),
          values_from = !!rlang::sym(paste0(cols_fun, "_Count")),
          values_fill = NA
        ) %>%
        mutate(
          # Groupe les rares manquant <50 avec le groupe le plus larges probablement a réfléchir
          across(
            -1,
            ~ ifelse(is.na(.),
                     names(sort(table(.),
                                decreasing = TRUE
                     ))[1],
                     .
            )
          )
        ) %>%
        select(-Archetype, -Player, -id, -Archetype_count, -Draws) %>%
        mutate(
          # Choose most common level as references
          across(
            where(is.character),
            ~ factor(
              if_else(. == names(sort(table(.),
                                      decreasing = TRUE
              ))[1],
              names(sort(table(.),
                         decreasing = TRUE
              ))[1], "Other"
              ),
              levels = c(names(sort(table(.),
                                    decreasing = TRUE
              ))[1], "Other")
            )
          )
        )
      
      if (nrow(df_model) == 0) {
        model_res <- NULL
        model_res_any <- NULL
      } else {
        model_res_any <- glm(cbind(Wins, Losses) ~ .,
                             data = model_base_card_var_count_tot_fun,
                             family = quasibinomial # binomial
        )
        
        model_res <- glm(cbind(Wins, Losses) ~ .,
                         data = df_model,
                         family = quasibinomial # binomial
        )
        model_res_any$Archetype <- x
        model_res$Archetype <- x
      }
      return(
        list(
          Model_any = model_res_any,
          Model_count = model_res
        )
      )
    }
  ) %>%
    discard(is.null)
  
  return(model_based_fun)
}







# Function that create model for unco cards
# Function that create model for unco cards
model_unco_cards_fun <- function(df_fun, cols_fun) {
  model_unco_fun <- lapply(
    unique(df_fun$Archetype),
    function(x) {
      df_model <- df_fun %>%
        select(-Join_main_count) %>%
        filter(Archetype == x) %>%
        ungroup() %>%
        filter(!is.na(!!rlang::sym(paste0(cols_fun, "_CardName")))) %>%
        rowwise() %>%
        mutate(!!rlang::sym(paste0(cols_fun, "_Count")) := paste0(findIntRuns(as.numeric(unlist(str_split(!!rlang::sym(paste0(cols_fun, "_Count")), "/")))), collapse = "/")) %>%
        ungroup() %>%
        pivot_wider(
          names_from = !!rlang::sym(paste0(cols_fun, "_CardName")),
          values_from = !!rlang::sym(paste0(cols_fun, "_Count")),
          values_fill = "0"
        ) %>%
        select(-Archetype, -Player, -id, -Archetype_count, -Draws) %>%
        mutate(
          # Choose most common level as references
          across(
            where(is.character),
            ~ fct_infreq(as.factor(.))
          )
        )
      
      model_unco_tot_fun <- df_fun %>%
        select(-Join_main_count) %>%
        filter(Archetype == x) %>%
        ungroup() %>%
        filter(!is.na(!!rlang::sym(paste0(cols_fun, "_CardName")))) %>%
        rowwise() %>%
        mutate(!!rlang::sym(paste0(cols_fun, "_Count")) := paste0(findIntRuns(as.numeric(unlist(str_split(!!rlang::sym(paste0(cols_fun, "_Count")), "/")))), collapse = "/")) %>%
        ungroup() %>%
        pivot_wider(
          names_from = !!rlang::sym(paste0(cols_fun, "_CardName")),
          values_from = !!rlang::sym(paste0(cols_fun, "_Count")),
          values_fill = "0"
        ) %>%
        select(-Archetype, -Player, -id, -Archetype_count, -Draws) %>%
        mutate(
          # Choose most common level as references
          across(
            where(is.character),
            ~ factor(
              if_else("0" == ., "0", "1+"),
              levels = c("0", "1+")
            )
          )
        )
      
      if (nrow(df_model) == 0) {
        model_res <- NULL
        model_res_any <- NULL
      } else {
        model_res_any <- glm(cbind(Wins, Losses) ~ .,
                             data = model_unco_tot_fun,
                             family = quasibinomial # binomial
        )
        
        model_res <- glm(cbind(Wins, Losses) ~ .,
                         data = df_model,
                         family = quasibinomial # binomial
        )
        model_res_any$Archetype <- x
        model_res$Archetype <- x
      }
      return(
        list(
          Model_any = model_res_any,
          Model_count = model_res
        )
      )
    }
  ) %>%
    discard(is.null)
  
  return(model_unco_fun)
}


```



```{r agreg_land_name}
df_Archetype_long <- df_export %>%
  filter(!is.na(Wins)) %>%
  rowwise() %>%
  filter(!is.null(Mainboard)) %>%
  filter(!is.null(Sideboard)) %>%
  ungroup() %>%
  group_by(Archetype) %>%
  mutate(
    Archetype_count = n()
  ) %>%
  filter(Archetype_count > filter_archetype_count_5) %>%
  arrange(desc(Archetype_count)) %>%
  unnest_longer(Mainboard) %>%
  unnest_wider(Mainboard, names_sep = "_") %>%
  # mutate(Mainboard_CardName = Card_agregueur(Mainboard_CardName)) %>%
  select(id, Player, Wins, Losses, Draws, Archetype, Mainboard_Count, Mainboard_CardName) %>%
  group_by(id) %>%
  mutate(Number_of_cards = sum(Mainboard_Count)) %>%
  filter(Number_of_cards >= 60) %>%
  ungroup() %>%
  mutate(
    Archetype =
      factor(Archetype,
        level = unique(.$Archetype)
      )
  )


Df_archetype_cards_land_name_agreg <- rbind(
  df_Archetype_long %>%
    group_by(Archetype) %>%
    mutate(Archetype_count = n_distinct(id)) %>%
    mutate(
      Mainboard_CardName =
        Card_agregueur(
          Mainboard_CardName,
          fetch = TRUE,
          Tron = TRUE,
          snow = TRUE,
          surveil = TRUE,
          shock = TRUE,
          triome = TRUE,
          filter_land = TRUE,
          fast_land = TRUE,
          bounce_land = TRUE,
          horizon_land = TRUE,
          basic_land = TRUE
        )
    ) %>%
    ungroup() %>%
    group_by(id, Mainboard_CardName) %>%
    mutate(
      Mainboard_Count = sum(Mainboard_Count)
    ) %>%
    distinct(id, Mainboard_CardName, .keep_all = TRUE),
  df_Archetype_long %>%
    mutate(
      Mainboard_Count = if_else(
        Mainboard_CardName %in% Land_modern$name,
        Mainboard_Count, 0
      ),
      Mainboard_CardName = "Land_tot"
    ) %>%
    group_by(id) %>%
    mutate(
      Mainboard_Count = sum(Mainboard_Count)
    ) %>%
    ungroup() %>%
    group_by(Archetype) %>%
    mutate(Archetype_count = n_distinct(id)) %>%
    ungroup() %>%
    distinct()
) %>%
  arrange(desc(Archetype_count), id)



Df_archetype_cards_agreg <- Df_archetype_cards_land_name_agreg %>%
  group_by(Archetype, Archetype_count, Mainboard_CardName, Mainboard_Count) %>%
  summarise(
    Wins = sum(Wins),
    Losses = sum(Losses),
    count_iteration_cards = n(),
    .groups = "drop"
  ) %>%
  group_by(Archetype, Mainboard_CardName) %>%
  mutate(
    Wins = sum(Wins),
    Losses = sum(Losses),
    total_number_of_copie = sum(count_iteration_cards),
    most_common_count = max(count_iteration_cards)
  ) %>% 
  filter(total_number_of_copie >= min_sample_size_5)
```


```{r agreg_sideboard}
df_side_Archetype_long <- df_export %>%
  # remove deck with less than 60 cards or no side / no main or with not enought data in arch
  filter(id %in% unique(df_Archetype_long$id)) %>%
  group_by(Archetype) %>%
  mutate(
    Archetype_count = n()
  ) %>%
  arrange(desc(Archetype_count)) %>%
  unnest_longer(Sideboard) %>%
  unnest_wider(Sideboard, names_sep = "_") %>%
  select(id, Player, Wins, Losses, Draws, Archetype, Sideboard_CardName, Sideboard_Count) %>%
  mutate(
    Archetype =
      factor(Archetype,
        level = unique(.$Archetype)
      )
  ) %>%
  group_by(Archetype) %>%
  mutate(Archetype_count = n_distinct(id)) %>%
  ungroup()



Df_side_archetype_cards_agreg <- df_side_Archetype_long %>%
  group_by(Archetype, Archetype_count, Sideboard_CardName, Sideboard_Count) %>%
  summarise(
    Wins = sum(Wins),
    Losses = sum(Losses),
    count_iteration_cards = n(),
    .groups = "drop"
  ) %>%
  group_by(Archetype, Sideboard_CardName) %>%
  mutate(
    Wins = sum(Wins),
    Losses = sum(Losses),
    total_number_of_copie = sum(count_iteration_cards),
    most_common_count = max(count_iteration_cards)
  ) %>% 
  filter(total_number_of_copie >= min_sample_size_5)
```


```{r}
# a <- df_Archetype_long %>% filter(Archetype == "Nadu")
# 
# write_rds(a,"test_list.rds")
```

```{r base_card_and_variable_count}
# First because of cards with 1 level after agreg
Base_cards_and_variable_count_pre_process <- Df_archetype_cards_agreg %>%
  # filter(count_iteration_cards == most_common_count) %>%
  filter(
    #Not in base cards fix count
    (Archetype_count - most_common_count) >= min_sample_size_5,
    # most_common_count >= min_sample_size_5
    (Archetype_count - total_number_of_copie) < min_sample_size_5
  ) %>%
  group_by(Archetype, Mainboard_CardName) %>%
  mutate(
    # Choix de prendre la plus faible quantité en cas d'éaglité pour le plus commun
    most_common_quantity = Mainboard_Count[count_iteration_cards == max(count_iteration_cards)][1],
    min_count_group = Mainboard_Count
  )

Base_cards_and_variable_count_agreg_out <- Agreg_count_by_cards(
  Base_cards_and_variable_count_pre_process,
  "Mainboard",
  min_sample_size_5
)

Base_cards_and_variable_count <- Base_cards_and_variable_count_agreg_out %>%
  group_by(Archetype, Mainboard_CardName) %>%
  filter(n() > 1)
```


```{r side_base_card_and_variable_count}
# First because of cards with 1 level after agreg
Side_Base_cards_and_variable_count_pre_process <- Df_side_archetype_cards_agreg %>%
  # filter(count_iteration_cards == most_common_count) %>%
  filter(
    (Archetype_count - most_common_count) >= min_sample_size_5,
    # most_common_count >= min_sample_size_5
    (Archetype_count - total_number_of_copie) < min_sample_size_5
  ) %>%
  group_by(Archetype, Sideboard_CardName) %>%
  mutate(
    # Choix de prendre la plus faible quantité en cas d'éaglité pour le plus commun
    most_common_quantity = Sideboard_Count[count_iteration_cards == max(count_iteration_cards)][1],
    min_count_group = Sideboard_Count
  )


Side_Base_cards_and_variable_count_agreg_out <- Agreg_count_by_cards(
  Side_Base_cards_and_variable_count_pre_process,
  "Sideboard",
  min_sample_size_5
)


Side_Base_cards_and_variable_count <- Side_Base_cards_and_variable_count_agreg_out %>%
  group_by(Archetype, Sideboard_CardName) %>%
  filter(n() > 1)
```




```{r uncommon_cards}
Uncommon_cards_pre_process <- Df_archetype_cards_agreg %>%
  # filter(count_iteration_cards == most_common_count) %>%
  filter(
    (Archetype_count - most_common_count) >= min_sample_size_5,
    # most_common_count >= min_sample_size_5
    (Archetype_count - total_number_of_copie) >= min_sample_size_5,
    total_number_of_copie >= min_sample_size_5
  ) %>%
  group_by(Archetype, Mainboard_CardName) %>%
  mutate(
    # Choix de prendre la plus faible quantité en cas d'éaglité pour le plus commun
    most_common_quantity = Mainboard_Count[count_iteration_cards == max(count_iteration_cards)][1],
    min_count_group = Mainboard_Count
  )




Uncommon_cards_agreg_out <- Agreg_count_by_cards(
  Uncommon_cards_pre_process,
  "Mainboard",
  min_sample_size_5
)

Uncommon_cards <- Uncommon_cards_agreg_out %>%
  group_by(Archetype, Mainboard_CardName)
```


```{r Side_uncommon_cards}
Side_Uncommon_cards_pre_process <- Df_side_archetype_cards_agreg %>%
  # filter(count_iteration_cards == most_common_count) %>%
  filter(
    (Archetype_count - most_common_count) >= min_sample_size_5,
    # most_common_count >= min_sample_size_5
    (Archetype_count - total_number_of_copie) >= min_sample_size_5,
    total_number_of_copie >= min_sample_size_5
  ) %>%
  group_by(Archetype, Sideboard_CardName) %>%
  mutate(
    # Choix de prendre la plus faible quantité en cas d'éaglité pour le plus commun
    most_common_quantity = Sideboard_Count[count_iteration_cards == max(count_iteration_cards)][1],
    min_count_group = Sideboard_Count
  )




Side_Uncommon_cards_agreg_out <- Agreg_count_by_cards(
  Side_Uncommon_cards_pre_process,
  "Sideboard",
  min_sample_size_5
)

Side_Uncommon_cards <- Side_Uncommon_cards_agreg_out %>%
  group_by(Archetype, Sideboard_CardName)
```



```{r Base_cards_grouping_with_agreg}
# Récupération des cartes a 1 niveaux après agreg
Base_cards_and_base_count <- rbind(
  Df_archetype_cards_agreg %>%
    mutate(
      min_count_group = Mainboard_Count,
      most_common_quantity = Mainboard_Count
    ) %>%
    group_by(Archetype, Mainboard_CardName) %>%
    mutate(Mainboard_Count = paste0(Mainboard_Count, collapse = "/")) %>%
    ungroup() %>%
    filter(count_iteration_cards == most_common_count) %>%
    filter((Archetype_count - most_common_count) < min_sample_size_5),
  Base_cards_and_variable_count_agreg_out %>%
    group_by(Archetype, Mainboard_CardName) %>%
    filter(n() == 1)
) %>%
  rowwise() %>%
  mutate(Mainboard_Count = paste0(findIntRuns(as.numeric(unlist(str_split(Mainboard_Count, "/")))), collapse = "/")) %>%
  ungroup() %>%
  group_split(Archetype) %>%
  name_list_of_df_with_arch()
```


```{r Side_Base_cards_grouping_with_agreg}
# Récupération des cartes a 1 niveaux après agreg
Side_Base_cards_and_base_count <- rbind(
  Df_side_archetype_cards_agreg %>%
    mutate(
      min_count_group = Sideboard_Count,
      most_common_quantity = Sideboard_Count
    ) %>%
    group_by(Archetype, Sideboard_CardName) %>%
    mutate(Sideboard_Count = paste0(Sideboard_Count, collapse = "/")) %>%
    ungroup() %>%
    filter(count_iteration_cards == most_common_count) %>%
    filter((Archetype_count - most_common_count) < min_sample_size_5),
  Side_Base_cards_and_variable_count_agreg_out %>%
    group_by(Archetype, Sideboard_CardName) %>%
    filter(n() == 1)
) %>%
  rowwise() %>%
  mutate(Sideboard_Count = paste0(findIntRuns(as.numeric(unlist(str_split(Sideboard_Count, "/")))), collapse = "/")) %>%
  ungroup() %>%
  group_split(Archetype) %>%
  name_list_of_df_with_arch()
```



```{r mdoel_based_cards}
Model_data_base_cards <- prepare_df_for_model(
  df_fun = Base_cards_and_variable_count,
  base_df = Df_archetype_cards_land_name_agreg,
  cols_fun = "Mainboard"
  )

# Intégré base card and base count
# Projet avec les images des cartes pour arborescence deck list penser a mettre en gras le compte le plus rreprésenter pour base card and base count
# regression just of number of cards
result_models_variable_count_all_arch <- model_base_var_count_cards_fun(Model_data_base_cards, "Mainboard")

```


```{r}

a <- Model_data_Uncommon_cards %>% 
  select(
    Archetype,
    Archetype_count,
    Mainboard_CardName,
    
    # Join_main_count,
    Mainboard_Count,
    
    id
    ) %>% 
  pivot_wider(
    names_from = Mainboard_CardName,
    values_from = Mainboard_Count,#Join_main_count,
    values_fill = "0"
    )



```


```{r}
# library("lares")
# 
# 
# 
# 
# 
# b <- lapply(unique(as.character(a$Archetype)), function(x){
#   print(x)
#   
#   data_en_cours <- a %>% 
#        filter(Archetype == x) %>% 
#        select(-Archetype,-id) %>% 
#        select(where(~n_distinct(.) > 1))
#   print(dim(data_en_cours))
#   
#    corr_cross_res <- corr_cross(
#      df = data_en_cours,
#      top = 2000
#            )
#   
#   return(corr_cross_res$data %>% 
#            arrange(desc(abs)))
# }) %>% 
#   set_names(unique(as.character(a$Archetype)))
# 
# 
# a %>% 
#        filter(Archetype == "Black Or.Red.Midrange") %>% 
#        select(-Archetype,-id) %>% 
#        select(where(~n_distinct(.) > 1))
# 
# b 
```

```{r}

x <- result_models_variable_count_all_arch[[1]]


filter_vif <- function(vif_res){
  if (is.vector(vif_res)) {
   res <- vif_res %>%
    as.data.frame() %>%
    rename(vif = 1 ) %>%
    rownames_to_column("name")  %>%
     filter(vif > 5 )
    
  } else {
    res <- vif_res %>%
    as_tibble() %>%
    filter(`GVIF^(1/(2*Df))` > 5 )
  }
  
  return(res)
}





vif_model <- lapply(result_models_Uncommon_cards_all_arch, function(x){
  
  vif_count <- car::vif(x$Model_count) %>%  filter_vif()
  
  vif_any <- car::vif(x$Model_any) %>% filter_vif()
  
  return(list(any = vif_any,
              count = vif_count
              ))
})
vif_model[[1]]

# 
b <- result_models_Uncommon_cards_all_arch[[4]]
car::vif(b$Model_count)
```

```{r Side_mdoel_based_cards}
Side_Model_data_base_cards <- prepare_df_for_model(
  df_fun = Side_Base_cards_and_variable_count,
  base_df = df_side_Archetype_long,
  cols_fun = "Sideboard"
  )

# Intégré base card and base count
# Projet avec les images des cartes pour arborescence deck list penser a mettre en gras le compte le plus rreprésenter pour base card and base count
# regression just of number of cards
Side_result_models_variable_count_all_arch <- model_base_var_count_cards_fun(Side_Model_data_base_cards, "Sideboard")
```





```{r model_unco_cards}
Model_data_Uncommon_cards <- prepare_df_for_model(
  df_fun = Uncommon_cards,
  base_df = Df_archetype_cards_land_name_agreg,
  cols_fun = "Mainboard"
  )

# Projet avec les images des cartes pour arborescence deck list penser a mettre en gras le compte le plus rreprésenter pour base card and base count
result_models_Uncommon_cards_all_arch <- model_unco_cards_fun(Model_data_Uncommon_cards, "Mainboard")
```

```{r side_model_unco_cards}
Side_Model_data_Uncommon_cards <-  prepare_df_for_model(
  df_fun = Side_Uncommon_cards,
  base_df = df_side_Archetype_long,
  cols_fun = "Sideboard"
  )
# Projet avec les images des cartes pour arborescence deck list penser a mettre en gras le compte le plus rreprésenter pour base card and base count

Side_result_models_Uncommon_cards_all_arch <- model_unco_cards_fun(Side_Model_data_Uncommon_cards, "Sideboard")
```


```{r format_main_models}
Base_card_variable_count_format_model <- format_model_list(result_models_variable_count_all_arch) %>%
  name_list_of_model_with_string(unique(Model_data_base_cards$Archetype))

uncomon_card_format_model <- format_model_list(result_models_Uncommon_cards_all_arch) %>%
  name_list_of_model_with_string(unique(Model_data_Uncommon_cards$Archetype))
```


```{r format_side_models}
Side_Base_card_variable_count_format_model <- format_model_list(Side_result_models_variable_count_all_arch) %>%
  name_list_of_model_with_string(unique(Side_Model_data_base_cards$Archetype)) 

Side_uncomon_card_format_model <- format_model_list(Side_result_models_Uncommon_cards_all_arch) %>%
  name_list_of_model_with_string(unique(Side_Model_data_Uncommon_cards$Archetype))
```




```{r print_result, results='asis', out.width="100%"}
for (i in sort(levels(df_Archetype_long$Archetype))) {
  # Inserts Month titles
  pander::pandoc.header(i, level = 2)
  # Section contents
  pander::pandoc.header("Main deck", level = 3)
  pander::pandoc.p("")
  pander::pandoc.header("Base Cards", level = 4)
  pander::pandoc.p("")
  pander::pandoc.p("Cards Always in deck with nearly fix count")
  pander::pandoc.p("")

  if (i %in% names(Base_cards_and_base_count)) {
    flextable::flextable_to_rmd(
      flextable::flextable(
        Base_cards_and_base_count[[i]] %>%
          mutate(
            WR = paste0(round(Wins * 100 / (Wins + Losses), 2), " %"),
            Not_most_common_count = total_number_of_copie - most_common_count,
            Card_not_in_deck = Archetype_count - total_number_of_copie
          ) %>%
          select(
            Mainboard_CardName, WR, Mainboard_Count,
            most_common_quantity, Card_not_in_deck, Not_most_common_count
          )
      ) %>% flextable::align(align = "center", part = "all")
    )
  }
  pander::pandoc.header("Base Cards Variable count", level = 4)
  pander::pandoc.p("")
  pander::pandoc.p("Cards Always in deck with  different count using binomial regression for WR")
  pander::pandoc.p("")

  if (i %in% names(Base_card_variable_count_format_model)) {
    
    pander::pandoc.p(':::::::::::::: {.columns}
::: {.column width="50%"}')
  if (!is.null(Base_card_variable_count_format_model[[i]]$Model_any)) {
    flextable::flextable_to_rmd(
      Base_card_variable_count_format_model[[i]]$Model_any %>%
        gtsummary::as_flex_table()
    )
  }
    pander::pandoc.p("")
    pander::pandoc.p(":::")

    pander::pandoc.p('::: {.column width="50%"}')
    pander::pandoc.p("")
      if (!is.null(Base_card_variable_count_format_model[[i]]$Model_count)) {
    flextable::flextable_to_rmd(
      Base_card_variable_count_format_model[[i]]$Model_count %>%
        gtsummary::as_flex_table()
    )
      }
    pander::pandoc.p(":::
::::::::::::::")
  }

  pander::pandoc.header("Uncommon Cards", level = 4)
  pander::pandoc.p("")
  pander::pandoc.p("Cards not always in deck using binomial regression for WR")
  pander::pandoc.p("")

  if (i %in% names(uncomon_card_format_model)) {
    pander::pandoc.p(':::::::::::::: {.columns}
::: {.column width="50%"}')
if (!is.null(uncomon_card_format_model[[i]]$Model_any)) {
    flextable::flextable_to_rmd(
      uncomon_card_format_model[[i]]$Model_any %>%
        gtsummary::as_flex_table()
    )
}
    pander::pandoc.p("")
    pander::pandoc.p(":::")

    pander::pandoc.p('::: {.column width="50%"}')
    pander::pandoc.p("")
    if (!is.null(uncomon_card_format_model[[i]]$Model_count )) {
    flextable::flextable_to_rmd(
      uncomon_card_format_model[[i]]$Model_count %>%
        gtsummary::as_flex_table()
    )
}
    pander::pandoc.p(":::
::::::::::::::")
  }
  # adding also empty lines, to be sure that this is valid Markdown
  pander::pandoc.p("")
  pander::pandoc.p("")

  pander::pandoc.header("Side Board", level = 3)
  pander::pandoc.p("")
  pander::pandoc.header("Base Cards", level = 4)
  pander::pandoc.p("")
  pander::pandoc.p("Cards Always in deck with nearly fix count")
  pander::pandoc.p("")

  if (i %in% names(Side_Base_cards_and_base_count)) {
    pander::pandoc.p(':::::::::::::: {.columns}
::: {.column width="50%"}')

    flextable::flextable_to_rmd(
      flextable::flextable(
        Side_Base_cards_and_base_count[[i]] %>%
          mutate(
            WR = paste0(round(Wins * 100 / (Wins + Losses), 2), " %"),
            Not_most_common_count = total_number_of_copie - most_common_count,
            Card_not_in_deck = Archetype_count - total_number_of_copie
          ) %>%
          select(
            Sideboard_CardName, WR, Sideboard_Count,
            most_common_quantity, Card_not_in_deck, Not_most_common_count
          )
      ) %>%
        flextable::align(align = "center", part = "all")
    )
    pander::pandoc.p(":::")

    pander::pandoc.p('::: {.column width="50%"}')
    pander::pandoc.p("")
    flextable::flextable_to_rmd(
      flextable::flextable(
        Side_Base_cards_and_base_count[[i]] %>%
          mutate(
            WR = paste0(round(Wins * 100 / (Wins + Losses), 2), " %"),
            Not_most_common_count = total_number_of_copie - most_common_count,
            Card_not_in_deck = Archetype_count - total_number_of_copie
          ) %>%
          select(
            Sideboard_CardName, WR, Sideboard_Count,
            most_common_quantity, Card_not_in_deck, Not_most_common_count
          )
      ) %>%
        flextable::align(align = "center", part = "all")
    )
    pander::pandoc.p(":::
::::::::::::::")
  }
  pander::pandoc.header("Base Cards Variable count", level = 4)
  pander::pandoc.p("")
  pander::pandoc.p("Cards Always in deck with  different count using binomial regression for WR")
  pander::pandoc.p("")


  if (i %in% names(Side_Base_card_variable_count_format_model)) {
    pander::pandoc.p(':::::::::::::: {.columns}
::: {.column width="50%"}')
        if (!is.null(Side_Base_card_variable_count_format_model[[i]]$Model_any )) {
    flextable::flextable_to_rmd(
      Side_Base_card_variable_count_format_model[[i]]$Model_any %>%
        gtsummary::as_flex_table()
    )
}
    pander::pandoc.p(":::")

    pander::pandoc.p('::: {.column width="50%"}')
    pander::pandoc.p("")
        if (!is.null(Side_Base_card_variable_count_format_model[[i]]$Model_count)) {
    flextable::flextable_to_rmd(
      Side_Base_card_variable_count_format_model[[i]]$Model_count %>%
        gtsummary::as_flex_table()
    )
        }
    pander::pandoc.p(":::
::::::::::::::")
  }

  pander::pandoc.header("Uncommon Cards", level = 4)
  pander::pandoc.p("")
  pander::pandoc.p("Cards not always in deck using binomial regression for WR")
  pander::pandoc.p("")

  if (i %in% names(uncomon_card_format_model)) {
    pander::pandoc.p(':::::::::::::: {.columns}
::: {.column width="50%"}')
    if (!is.null(Side_uncomon_card_format_model[[i]]$Model_any)) {
    flextable::flextable_to_rmd(
      Side_uncomon_card_format_model[[i]]$Model_any %>%
        gtsummary::as_flex_table()
    )
}
    pander::pandoc.p(":::")

    pander::pandoc.p('::: {.column width="50%"}')
    pander::pandoc.p("")
if (!is.null(Side_uncomon_card_format_model[[i]]$Model_count)) {
    flextable::flextable_to_rmd(
      Side_uncomon_card_format_model[[i]]$Model_count %>%
        gtsummary::as_flex_table()
    )
}
    pander::pandoc.p(":::
::::::::::::::")
  }
  # adding also empty lines, to be sure that this is valid Markdown
  pander::pandoc.p("")
  pander::pandoc.p("")



  pander::pandoc.p("")
  pander::pandoc.p("")
}
```
