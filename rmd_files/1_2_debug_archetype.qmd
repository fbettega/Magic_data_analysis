---
title: "Archetype definition and other debug results"
---

```{r setup, include=FALSE, message = FALSE, warning = FALSE} 
library(tidyverse)
source("../sources/S2_Source_mtg_new_card.R",local = TRUE)

conflicted::conflicts_prefer(dplyr::filter)
params <- read_rds( "../data/intermediate_result/temp_format_encours_for_param.rds")
```


```{r data_reading }
df_export <-  readRDS(paste0("../data/",params$format_param,"_data_meta_en_cours.rds")) %>%
      # include filter bad deck
  filter(Valide_deck) %>% 
  mutate(
    Deck_winrate = Wins / (Losses + Wins)
  ) %>%
  group_by(Archetype) %>% 
  mutate(
    Archetype_count = n()
  ) %>% 
    ungroup() 

```





```{r cards_in_archetype_definition_computation}
merge_df_side_main <- 
  rbind(
  df_export %>%
  unnest_longer(Mainboard) %>%
  unnest_wider(Mainboard, names_sep = "_")  %>%
  select(Mainboard_Count,Mainboard_CardName,Archetype,Base_Archetype,id) %>%
  rename(Count = 1 , CardName = 2)   %>%
  mutate(main_side = "Main"),
  df_export %>%
  unnest_longer(Sideboard) %>%
  unnest_wider(Sideboard, names_sep = "_") %>%
  select(Sideboard_Count,Sideboard_CardName,Archetype,Base_Archetype,id) %>%
  rename(Count = 1 , CardName = 2) %>%
  mutate(main_side = "Side")
  ) 

Deck_list_cards_count <- 
  rbind(
    merge_df_side_main,
  merge_df_side_main %>% 
    mutate(main_side = "Any") %>% 
  group_by(
    id,
    main_side,
    CardName,
    Archetype,
    Base_Archetype
    ) %>% 
  summarise(Count = sum(Count),.groups = "drop") 
  ) %>% 
  group_by( 
    Archetype,
    Base_Archetype
    ) %>% 
  mutate(Archetype_count = n_distinct(id)) %>% 
  group_by(
    main_side,
    CardName,
    Count,
    Archetype,
    Base_Archetype,
    Archetype_count
    ) %>% 
  summarise(N = n(),.groups = "drop") 


Deck_list_cards_count_with_any <- rbind(
  Deck_list_cards_count,
  Deck_list_cards_count %>% 
    mutate(Count = "Any") %>% 
  group_by(
    main_side,
    CardName,
    Count,
    Archetype,
    Base_Archetype,
    Archetype_count
    ) %>% 
  summarise(N = sum(N),.groups = "drop") 
  ) %>% 
  mutate(
    percent_presence = N/Archetype_count
  ) %>% 
  arrange(desc(Archetype_count)) %>% 
  mutate(across(where(is.character),as.factor))
# rm(Deck_list_cards_count)
```



# Cards in Archetype based arch combination  

```{r tooltips_card_arch_def}
tooltips_base_arch_cards <- c(
  "Main, Side or Both combine",
  "Card name",
  "Number of copies of the cards",
    "Deck Archetype agregated",
    "Deck Archetype parser",
  "Number of decks with the card (exact number of copies) including deck without winrate like 5-0 leagues",
  "Number of time the cards is present",
  "Percent of time the cards is present"#,"Boolean for card with no possible win rate inclusion (only league)"
)
```


```{r cards_in_archetype_definition_print}
htmltools::tagList(
      DT::datatable( 
        Deck_list_cards_count_with_any,
        colnames = str_replace_all(colnames(Deck_list_cards_count_with_any), "_", " "),
    callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltips_base_arch_cards, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
",
      return_filter_js()
    )
  ),     
  filter = "top",
  rownames = FALSE,
  options = list(
  dom = "ltipr",
    searchCols = list(
    list(search = '["Any"]' ),
    NULL,
    list(search = '["Any"]' ),
    NULL,NULL,NULL,NULL,NULL
  ),
  autoWidth = TRUE,
  pageLength = 25)
  )  %>% 
  DT::formatPercentage(c("percent_presence"),digits = 1)
  )
```


# Proximity

negative numbers are explicable because Y to X is positive.

```{r proximity_classif_loading}
proximty_classif <- read.csv(
  paste0("../data/intermediate_result/",
         params$format_param,"_proxymity_archetype_group.csv")) %>% 
          mutate(
            Archetype.x = as.factor(Archetype.x),
            Archetype.y = as.factor(Archetype.y)
                 ) %>% 
          # rename(
          #   `Total archetype name` = Archetype_proximity ,
          #   `Base archetype name group` = value 
          #   ) %>% 
  as_tibble()

```


```{r tooltips_proximity}
tooltips_proximity <- c(
  "Final Archetype name",
  "Initial Archetype name",
  "Third quartile (75%) of distance between deck inside the final archetype",
  "Median of distance between final and initial archetype",
  "Delta between last Q3 and Q2 (last two columns)",
  "Boolean TRUE if Final Archetype is group with initial archetype "
)
```


```{r proximity_classif_print}
htmltools::tagList(
      DT::datatable( 
        proximty_classif ,
    callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltips_proximity, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
",
      return_filter_js()
    )
  ),      
  filter = "top",
  rownames = FALSE,
  options = list(
  dom = "ltipr"  ,
  searchCols = list(
    NULL,NULL,NULL,NULL,NULL,
    list(search = '["true"]' )
  ),
  autoWidth = TRUE,
  pageLength = 25)  ,
  escape=FALSE
  ) %>% 
    DT::formatRound(c(3:5), digits = 2)
  )

```



# Scryfall join not matching cards   

Just list all distinct cards in format with boolean if match or not with my scryfall join function.

```{r scryfall_db_matching_datareading}
modern_DB_card <- read_csv("../data/mtg_data/DBcarte_oracle.csv",show_col_types = FALSE) %>% 
filter(
    !!sym(paste0("legalities.",tolower(params$format_param))) == "legal" |
        !!sym(paste0("legalities.",tolower(params$format_param))) ==  "restricted"
)

test_scry_fall_on_all_cards <- 
  rbind(
    df_export %>%
    unnest_longer(Mainboard) %>%
    unnest_wider(Mainboard, names_sep = "_") %>% 
  select(Mainboard_CardName) %>%
  rename(CardName = Mainboard_CardName) ,
    df_export %>%
    unnest_longer(Sideboard) %>%
    unnest_wider(Sideboard, names_sep = "_") %>% 
  select(Sideboard_CardName) %>%
  rename(CardName = Sideboard_CardName) 
  )

```




```{r scryfall_db_matching_computation}
scry_fall_join_test_res <- join_with_scryfall(
    Df_with_cardname = test_scry_fall_on_all_cards,
    cardname_col = "CardName",
    scry_fall_df = modern_DB_card
                                 )
```


only show non matching cards no bug if table is empty.
Number of cards correctly match : `r sum(!is.na(scry_fall_join_test_res$scry_fall_id))` (`r round(sum(!is.na(scry_fall_join_test_res$scry_fall_id))*100/nrow(scry_fall_join_test_res),2)` %)

```{r tooltips_scryfall_matching}
tooltips_scryfall_matching <- c(
  "Card name",
 "Boolean if function result in no match with scryfall id"
)
```

```{r scryfall_db_matching_print}
htmltools::tagList(
      DT::datatable( 
        scry_fall_join_test_res %>% 
          mutate(
            `parsing fail` = is.na(scry_fall_id),
            CardName = as.factor(CardName)
          ) %>% 
          select(-scry_fall_id) %>% 
          arrange(desc(`parsing fail`)
                  ),
      # colnames = str_replace_all(colnames(model_pred), "_", " "),
    callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltips_scryfall_matching, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
",
      return_filter_js()
    )
  ),     
  filter = "top",
  rownames = FALSE,
  options = list(
  dom = "ltipr",
  searchCols = list(
    NULL,
    list(search = '["true"]' )
  ),
  autoWidth = TRUE,
  pageLength = 25)  ,
  escape=FALSE
  ) 
  )


```







# Prediction and deck list

```{r model_prediction_reading}
# note pour FB du futur l'ordre compte et si cette table est affichÃ© en premier les 
# autres ne fonctionne pas

Base_prediction_df <- read_rds(
  paste0("../data/intermediate_result/",params$format_param,"_result_pred.rds")
  )

model_pred <- left_join(
  inner_join(
    Base_prediction_df$table_each_model_pred %>%
      rename(Archetype = Archetype.x) %>%
      select(-Archetype.y) %>% select(-AnchorUri),
    vote_pred <- Base_prediction_df$table_vote_pred %>%
      select(-Archetype) %>%
      rename(
        Voting_Arch = name,
        Voting_result = value
      ),
    by = join_by(id)
  ),
  df_export %>%
    select(id, ReferenceArchetype_Archetype, parser_base_arch, Base_Archetype, Color),
  by = join_by(id)
) %>% 
  select(-id) %>% 
  relocate(
    ReferenceArchetype_Archetype, parser_base_arch,
    Base_Archetype, Color,Voting_Arch,Voting_result,
    .after = Archetype
           )  %>% 
  rename(Reference_Archetype = ReferenceArchetype_Archetype) %>% 
  mutate(across(where(is.character),as.factor)) %>% 
  mutate(AnchorUri = as.character(AnchorUri)) %>% 
  mutate(link = paste0(
    '<a href=\"',AnchorUri,'">',"link",'</a>'
    ),.before = 1  
    ) %>% 
  select(-AnchorUri) %>% 
  arrange(desc(Voting_result))


```



```{r tool_tips_prediction_arch}
tooltips_prediction_arch <- c(
  "Link to source deck",
  "Archetype (a confirmer ???)",
  "Badaro Parser results (???)",
  "(???)",
  "Base archetype (???)",
  "Deck color from archetype",
  "Model voting result if score > 0.3",
  "Voting model score [0-1] predict if > 0.3s",
  "Regression best prediction",
  "Regression best score",
   "Random forest best prediction",
  "Random forest best score",
   "K-nearest neighboor best prediction",
  "K-nearest neighboor best score",
   "Decision tree best prediction",
  "Decision tree best score",
   "Xgboost best prediction",
  "Xgboost best score"
)
```

```{r model_prediction_print}
htmltools::tagList(
      DT::datatable(
        model_pred,
        colnames = str_replace_all(colnames(model_pred), "_", " "),
    callback = DT::JS(
    paste0(
      "var tips = ['", paste0(tooltips_prediction_arch, collapse = "','"), "'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}
",
      return_filter_js()
    )
  ),    
  filter = "top",
  rownames = FALSE,
  options = list(
  dom = "ltipr",
    searchCols = list(
    NULL,NULL,NULL,NULL,NULL,NULL,NULL,
    list(search = '... 0.3')
  ),
  autoWidth = TRUE,
  pageLength = 25),
  escape=FALSE
  )  %>%
  DT::formatPercentage(c("Voting_result","regression_proba","rando_forest_proba","knn_proba","decision_tree_c5_proba","xgboost_proba"),digits = 1)
  )
```
