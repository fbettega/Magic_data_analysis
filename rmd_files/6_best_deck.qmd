---
title: "Best decks"
---


```{r setup, include=FALSE, message = FALSE, warning = FALSE} 
#     theme: united  # many options for theme, this one is my favorite.
library(tidyverse)
library(hdi)
conflicted::conflicts_prefer(dplyr::filter)
conflicted::conflicts_prefer(dplyr::lag)
conflicted::conflicts_prefer(purrr::discard)
conflicted::conflicts_prefer(dplyr::mutate)
conflicted::conflicts_prefer(dplyr::arrange)

# conflicted::conflict_prefer_all("dplyr")


source("../sources/S2_Source_mtg_new_card.R")
source("../sources/sources_script_specific/S5_6_model_deck.R")
source("../sources/sources_script_specific/S6_best_deck.R")
params <- read_rds( "../data/intermediate_result/temp_format_encours_for_param.rds")
options(kableExtra.auto_format = FALSE)
# loaded_base_data <- readRDS("data/data_meta_en_cours.rds")

modern_DB_card <- read_csv("../data/mtg_data/DBcarte_oracle.csv") %>% 
    filter(
        !!sym(paste0("legalities.",tolower(params$format_param))) == "legal" |
        !!sym(paste0("legalities.",tolower(params$format_param))) ==  "restricted"
    )

# sample size minimum pour etre un groupe


Land_modern <- modern_DB_card %>%
  filter(str_detect(type_line, "Land|land")) %>%
  # Remove dfc land exept dfc land // land
  filter(
    !str_detect(
      type_line,
      "(?<!Land )// Land"
    )
  ) %>%
  {
    . ->> tmp
  } %>%
  filter(str_detect(name, ".+ //")) %>%
  mutate(name = str_remove(name, " // .+")) %>%
  rbind(tmp)

rm(tmp)



df_export <- readRDS(paste0("../data/",params$format_param,"_data_meta_en_cours.rds")) %>%
      # include filter bad deck
  filter(Valide_deck) %>% 
  mutate(
    Deck_winrate = winrate_1_data(Wins, Losses)
  ) %>%
  group_by(Archetype) %>% 
  mutate(
    Archetype_count = n()
  ) %>%
  filter(Archetype != "Unknown") %>% 
  ungroup()

Number_of_deck <- 7
```


```{r}
knitr::read_chunk("../sources/S1_introduction_text.R")
```


```{r}
# Manque visual représentation of deck

# Projet detection automatiques des cartes nested par exemple : felidar et sahelli  dans l'idéal devrait détecter zulaport et bloodartist

# check with codetools::checkUsage(f) and all fun
```



```{r compute_res_arch}
total_result_Archetype_best_deck_to_print <- generate_total_result_of_best_deck(
  fun_par_df = df_export,
fun_parmin_arch_presence_fun = filter_archetype_count_6,
fun_pardeck_or_side = c(
  "All","Mainboard" ,"Sideboard"
  ),
fun_partype_of_archetype = "Archetype",# "Archetype" "Base_Archetype"
fun_parland_name_fun = Land_modern,
fun_parmin_number_of_cards = min_sample_size_6,
fun_parnumber_of_week = c(
  Inf,2
  ),
fun_parNumber_of_deck_print = Number_of_deck,
  db_scryfall_fun_par = modern_DB_card
)
```


# Archetype
```{r, Introduction_chunk_6_best_deck, results='asis'}

```


## All Data Model best deck prediction


```{r print_result_all_data, results='asis'}
#, out.width="100%"
all_data_best_deck_arch_print_res <- 
  lapply(total_result_Archetype_best_deck_to_print$Archetype_consider,
         function(arch_encours){
    print_result_total_script_best_deck(
    total_result_Archetype_best_deck_to_print$resulting_gt_table$number_of_week_Inf$global,
    total_result_Archetype_best_deck_to_print$resulting_gt_table$number_of_week_Inf$main_side,
    iteration = arch_encours
    ) 
         }
         )
```


## 2 weeks Data Model best deck prediction


```{r print_result_2weeks, results='asis'}
#, out.width="100%"
twoweeks_data_best_deck_arch_print_res <- 
  lapply(total_result_Archetype_best_deck_to_print$Archetype_consider,
         function(arch_encours){
    print_result_total_script_best_deck(
    total_result_Archetype_best_deck_to_print$resulting_gt_table$number_of_week_2$global,
    total_result_Archetype_best_deck_to_print$resulting_gt_table$number_of_week_2$main_side,
    iteration = arch_encours
    ) 
         }
         )
```


# Base Archetype


```{r compute_res_base_arch}
total_result_base_Archetype_best_deck_to_print <- generate_total_result_of_best_deck(
  fun_par_df = df_export,
fun_parmin_arch_presence_fun = filter_archetype_count_6,
fun_pardeck_or_side = c("All","Mainboard" ,"Sideboard"),
fun_partype_of_archetype = "Base_Archetype",# "Archetype" "Base_Archetype"
fun_parland_name_fun = Land_modern,
fun_parmin_number_of_cards = min_sample_size_6,
fun_parnumber_of_week = c(Inf,2),
fun_parNumber_of_deck_print = Number_of_deck,
  db_scryfall_fun_par = modern_DB_card
)
```


```{r,intro_second_time ,ref.label=c('Introduction_chunk_6_best_deck'), results='asis'}

```


## All Data Model best deck prediction



```{r print_result_all_data_base_arch, results='asis'}
#, out.width="100%"
all_data_best_deck_arch_print_res <- 
  lapply(total_result_base_Archetype_best_deck_to_print$Archetype_consider,
         function(arch_encours){
    print_result_total_script_best_deck(
    total_result_base_Archetype_best_deck_to_print$resulting_gt_table$number_of_week_Inf$global,
    total_result_base_Archetype_best_deck_to_print$resulting_gt_table$number_of_week_Inf$main_side,
    iteration = arch_encours
    ) 
         }
         )
```



  

## 2 weeks Data Model best deck prediction



```{r print_result_2weeks_base_arch, results='asis'}
#, out.width="100%"
twoweeks_data_best_deck_arch_print_res <- 
  lapply(total_result_base_Archetype_best_deck_to_print$Archetype_consider,
         function(arch_encours){
    print_result_total_script_best_deck(
    total_result_base_Archetype_best_deck_to_print$resulting_gt_table$number_of_week_2$global,
    total_result_base_Archetype_best_deck_to_print$resulting_gt_table$number_of_week_2$main_side,
    iteration = arch_encours
    ) 
         }
         )
```
